package odf_odt

import (
	_ "github.com/pygolin/pypi-docutils"
	πg "github.com/pygolin/runtime"
	_ "github.com/pygolin/stdlib/pkg/ConfigParser"
	_ "github.com/pygolin/stdlib/pkg/Image"
	_ "github.com/pygolin/stdlib/pkg/PIL"
	_ "github.com/pygolin/stdlib/pkg/PIL/Image"
	_ "github.com/pygolin/stdlib/pkg/StringIO"
	_ "github.com/pygolin/stdlib/pkg/configparser"
	_ "github.com/pygolin/stdlib/pkg/copy"
	_ "github.com/pygolin/stdlib/pkg/io"
	_ "github.com/pygolin/stdlib/pkg/itertools"
	_ "github.com/pygolin/stdlib/pkg/locale"
	_ "github.com/pygolin/stdlib/pkg/os"
	_ "github.com/pygolin/stdlib/pkg/os/path"
	_ "github.com/pygolin/stdlib/pkg/pygments"
	_ "github.com/pygolin/stdlib/pkg/pygments/lexers"
	_ "github.com/pygolin/stdlib/pkg/pygmentsformatter"
	_ "github.com/pygolin/stdlib/pkg/re"
	_ "github.com/pygolin/stdlib/pkg/sys"
	_ "github.com/pygolin/stdlib/pkg/tempfile"
	_ "github.com/pygolin/stdlib/pkg/time"
	_ "github.com/pygolin/stdlib/pkg/urllib"
	_ "github.com/pygolin/stdlib/pkg/urllib/error"
	_ "github.com/pygolin/stdlib/pkg/urllib/request"
	_ "github.com/pygolin/stdlib/pkg/urllib2"
	_ "github.com/pygolin/stdlib/pkg/weakref"
	_ "github.com/pygolin/stdlib/pkg/xml"
	_ "github.com/pygolin/stdlib/pkg/xml/dom"
	_ "github.com/pygolin/stdlib/pkg/xml/dom/minidom"
	_ "github.com/pygolin/stdlib/pkg/xml/etree"
	_ "github.com/pygolin/stdlib/pkg/xml/etree/ElementTree"
	_ "github.com/pygolin/stdlib/pkg/zipfile"
)

var Code *πg.Code

func init() {
	Code = πg.NewCode("<module>", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
		var πR *πg.Object
		_ = πR
		var πE *πg.BaseException
		_ = πE
		ß := πg.InternStr("")
		ß0 := πg.InternStr("0")
		ß0in := πg.InternStr("0in")
		ß1 := πg.InternStr("1")
		ß10 := πg.InternStr("10")
		ß12pt := πg.InternStr("12pt")
		ß9999 := πg.InternStr("9999")
		ßA := πg.InternStr("A")
		ßB := πg.InternStr("B")
		ßBUILTIN_DEFAULT_TABLE_STYLE := πg.InternStr("BUILTIN_DEFAULT_TABLE_STYLE")
		ßCNSD := πg.InternStr("CNSD")
		ßCONTENT_NAMESPACE_ATTRIB := πg.InternStr("CONTENT_NAMESPACE_ATTRIB")
		ßCONTENT_NAMESPACE_DICT := πg.InternStr("CONTENT_NAMESPACE_DICT")
		ßCaption := πg.InternStr("Caption")
		ßConfigParser := πg.InternStr("ConfigParser")
		ßContents_20_Heading := πg.InternStr("Contents_20_Heading")
		ßDanglingReferences := πg.InternStr("DanglingReferences")
		ßDescription := πg.InternStr("Description")
		ßEXTENSION := πg.InternStr("EXTENSION")
		ßElement := πg.InternStr("Element")
		ßElementTree := πg.InternStr("ElementTree")
		ßFILL_PAT1 := πg.InternStr("FILL_PAT1")
		ßFILL_PAT2 := πg.InternStr("FILL_PAT2")
		ßFalse := πg.InternStr("False")
		ßFormats := πg.InternStr("Formats")
		ßGENERATOR_DESC := πg.InternStr("GENERATOR_DESC")
		ßGenericNodeVisitor := πg.InternStr("GenericNodeVisitor")
		ßHTTPError := πg.InternStr("HTTPError")
		ßIMAGE_NAME_COUNTER := πg.InternStr("IMAGE_NAME_COUNTER")
		ßIOError := πg.InternStr("IOError")
		ßImage := πg.InternStr("Image")
		ßImportError := πg.InternStr("ImportError")
		ßListLevel := πg.InternStr("ListLevel")
		ßLucidasans1 := πg.InternStr("Lucidasans1")
		ßMANIFEST_NAMESPACE_ATTRIB := πg.InternStr("MANIFEST_NAMESPACE_ATTRIB")
		ßMANIFEST_NAMESPACE_DICT := πg.InternStr("MANIFEST_NAMESPACE_DICT")
		ßMANNSD := πg.InternStr("MANNSD")
		ßMETA_NAMESPACE_ATTRIB := πg.InternStr("META_NAMESPACE_ATTRIB")
		ßMETA_NAMESPACE_DICT := πg.InternStr("META_NAMESPACE_DICT")
		ßMETNSD := πg.InternStr("METNSD")
		ßMIME_TYPE := πg.InternStr("MIME_TYPE")
		ßNAME_SPACE_1 := πg.InternStr("NAME_SPACE_1")
		ßNameError := πg.InternStr("NameError")
		ßNamedTemporaryFile := πg.InternStr("NamedTemporaryFile")
		ßNone := πg.InternStr("None")
		ßODFTranslator := πg.InternStr("ODFTranslator")
		ßOSError := πg.InternStr("OSError")
		ßOdtPygmentsLaTeXFormatter := πg.InternStr("OdtPygmentsLaTeXFormatter")
		ßOdtPygmentsProgFormatter := πg.InternStr("OdtPygmentsProgFormatter")
		ßOption := πg.InternStr("Option")
		ßP := πg.InternStr("P")
		ßP1003 := πg.InternStr("P1003")
		ßPIL := πg.InternStr("PIL")
		ßPT00M01S := πg.InternStr("PT00M01S")
		ßReader := πg.InternStr("Reader")
		ßRuntimeError := πg.InternStr("RuntimeError")
		ßSNSD := πg.InternStr("SNSD")
		ßSPACES_PATTERN := πg.InternStr("SPACES_PATTERN")
		ßSTYLES_NAMESPACE_ATTRIB := πg.InternStr("STYLES_NAMESPACE_ATTRIB")
		ßSTYLES_NAMESPACE_DICT := πg.InternStr("STYLES_NAMESPACE_DICT")
		ßSect1 := πg.InternStr("Sect1")
		ßSkipChildren := πg.InternStr("SkipChildren")
		ßStandard := πg.InternStr("Standard")
		ßStringIO := πg.InternStr("StringIO")
		ßSubElement := πg.InternStr("SubElement")
		ßSyntaxError := πg.InternStr("SyntaxError")
		ßTABLENAMEDEFAULT := πg.InternStr("TABLENAMEDEFAULT")
		ßTABLEPROPERTYNAMES := πg.InternStr("TABLEPROPERTYNAMES")
		ßTABLESTYLEPREFIX := πg.InternStr("TABLESTYLEPREFIX")
		ßTABS_PATTERN := πg.InternStr("TABS_PATTERN")
		ßTableStyle := πg.InternStr("TableStyle")
		ßTable_20_Contents := πg.InternStr("Table_20_Contents")
		ßTable_20_Heading := πg.InternStr("Table_20_Heading")
		ßTextElement := πg.InternStr("TextElement")
		ßTimes := πg.InternStr("Times")
		ßToString := πg.InternStr("ToString")
		ßTrue := πg.InternStr("True")
		ßTypeError := πg.InternStr("TypeError")
		ßUSER := πg.InternStr("USER")
		ßVERSION := πg.InternStr("VERSION")
		ßValueError := πg.InternStr("ValueError")
		ßWORD_SPLIT_PAT1 := πg.InternStr("WORD_SPLIT_PAT1")
		ßWeakKeyDictionary := πg.InternStr("WeakKeyDictionary")
		ßWriter := πg.InternStr("Writer")
		ßZIP_DEFLATED := πg.InternStr("ZIP_DEFLATED")
		ßZIP_STORED := πg.InternStr("ZIP_STORED")
		ßZipFile := πg.InternStr("ZipFile")
		ßZipInfo := πg.InternStr("ZipInfo")
		ß_ := πg.InternStr("_")
		ß_ElementInterface := πg.InternStr("_ElementInterface")
		ß_ElementInterfaceWrapper := πg.InternStr("_ElementInterfaceWrapper")
		ß__doc__ := πg.InternStr("__doc__")
		ß__docformat__ := πg.InternStr("__docformat__")
		ß__file__ := πg.InternStr("__file__")
		ß__init__ := πg.InternStr("__init__")
		ß__metaclass__ := πg.InternStr("__metaclass__")
		ß__module__ := πg.InternStr("__module__")
		ß__name__ := πg.InternStr("__name__")
		ß__version__ := πg.InternStr("__version__")
		ß_add_syntax_highlighting := πg.InternStr("_add_syntax_highlighting")
		ß_calculate_code_block_padding := πg.InternStr("_calculate_code_block_padding")
		ß_parents := πg.InternStr("_parents")
		ßa := πg.InternStr("a")
		ßabspath := πg.InternStr("abspath")
		ßabstract := πg.InternStr("abstract")
		ßaction := πg.InternStr("action")
		ßadd := πg.InternStr("add")
		ßadd_doc_title := πg.InternStr("add_doc_title")
		ßadd_header_footer := πg.InternStr("add_header_footer")
		ßadd_ns := πg.InternStr("add_ns")
		ßadd_syntax_highlighting := πg.InternStr("add_syntax_highlighting")
		ßaddress := πg.InternStr("address")
		ßalign := πg.InternStr("align")
		ßappend := πg.InternStr("append")
		ßappend_child := πg.InternStr("append_child")
		ßappend_p := πg.InternStr("append_p")
		ßappend_pending_ids := πg.InternStr("append_pending_ids")
		ßarabic := πg.InternStr("arabic")
		ßassemble_my_parts := πg.InternStr("assemble_my_parts")
		ßassemble_parts := πg.InternStr("assemble_parts")
		ßastext := πg.InternStr("astext")
		ßattach_page_style := πg.InternStr("attach_page_style")
		ßattention := πg.InternStr("attention")
		ßattrib := πg.InternStr("attrib")
		ßattributes := πg.InternStr("attributes")
		ßattribution := πg.InternStr("attribution")
		ßauthor := πg.InternStr("author")
		ßauthors := πg.InternStr("authors")
		ßauto := πg.InternStr("auto")
		ßautomatic_styles := πg.InternStr("automatic_styles")
		ßbackgroundcolor := πg.InternStr("backgroundcolor")
		ßbackgroundcolor_ := πg.InternStr("backgroundcolor_")
		ßbackrefs := πg.InternStr("backrefs")
		ßblockindent := πg.InternStr("blockindent")
		ßblockquote := πg.InternStr("blockquote")
		ßblockstyle := πg.InternStr("blockstyle")
		ßbody_text_element := πg.InternStr("body_text_element")
		ßborder := πg.InternStr("border")
		ßborder_ := πg.InternStr("border_")
		ßbottom := πg.InternStr("bottom")
		ßbulletitem := πg.InternStr("bulletitem")
		ßbulletlist := πg.InternStr("bulletlist")
		ßbumped_list_level_stack := πg.InternStr("bumped_list_level_stack")
		ßcapitalize := πg.InternStr("capitalize")
		ßcaption := πg.InternStr("caption")
		ßcaution := πg.InternStr("caution")
		ßcenter := πg.InternStr("center")
		ßcenteredtextbody := πg.InternStr("centeredtextbody")
		ßchart := πg.InternStr("chart")
		ßcheck_file_exists := πg.InternStr("check_file_exists")
		ßchildren := πg.InternStr("children")
		ßchr := πg.InternStr("chr")
		ßcitation := πg.InternStr("citation")
		ßcitation_id := πg.InternStr("citation_id")
		ßcitation_reference := πg.InternStr("citation_reference")
		ßclasses := πg.InternStr("classes")
		ßclear := πg.InternStr("clear")
		ßcloak_email_addresses := πg.InternStr("cloak_email_addresses")
		ßcloak_mailto := πg.InternStr("cloak_mailto")
		ßclose := πg.InternStr("close")
		ßcm := πg.InternStr("cm")
		ßcode_field := πg.InternStr("code_field")
		ßcode_none := πg.InternStr("code_none")
		ßcode_text := πg.InternStr("code_text")
		ßcodeblock := πg.InternStr("codeblock")
		ßcolumn_count := πg.InternStr("column_count")
		ßcolwidth := πg.InternStr("colwidth")
		ßcompile := πg.InternStr("compile")
		ßcompress_type := πg.InternStr("compress_type")
		ßconfig_section := πg.InternStr("config_section")
		ßconfig_section_dependencies := πg.InternStr("config_section_dependencies")
		ßcontact := πg.InternStr("contact")
		ßcontent := πg.InternStr("content")
		ßcontent_astext := πg.InternStr("content_astext")
		ßcontent_tree := πg.InternStr("content_tree")
		ßcontents := πg.InternStr("contents")
		ßconvert_to_cm := πg.InternStr("convert_to_cm")
		ßcopy := πg.InternStr("copy")
		ßcopy_from_stylesheet := πg.InternStr("copy_from_stylesheet")
		ßcopyright := πg.InternStr("copyright")
		ßcount := πg.InternStr("count")
		ßcreate_custom_headfoot := πg.InternStr("create_custom_headfoot")
		ßcreate_links := πg.InternStr("create_links")
		ßcreate_manifest := πg.InternStr("create_manifest")
		ßcreate_meta := πg.InternStr("create_meta")
		ßcreate_sections := πg.InternStr("create_sections")
		ßcurrent := πg.InternStr("current")
		ßcurrent_element := πg.InternStr("current_element")
		ßcurrent_table_style := πg.InternStr("current_table_style")
		ßcustom_footer := πg.InternStr("custom_footer")
		ßcustom_header := πg.InternStr("custom_header")
		ßd1 := πg.InternStr("d1")
		ßd2 := πg.InternStr("d2")
		ßd3 := πg.InternStr("d3")
		ßd4 := πg.InternStr("d4")
		ßd5 := πg.InternStr("d5")
		ßdanger := πg.InternStr("danger")
		ßdate := πg.InternStr("date")
		ßdc := πg.InternStr("dc")
		ßdecode := πg.InternStr("decode")
		ßdedication := πg.InternStr("dedication")
		ßdeepcopy := πg.InternStr("deepcopy")
		ßdef_list_level := πg.InternStr("def_list_level")
		ßdefault := πg.InternStr("default")
		ßdefault_departure := πg.InternStr("default_departure")
		ßdefault_stylesheet := πg.InternStr("default_stylesheet")
		ßdefault_stylesheet_path := πg.InternStr("default_stylesheet_path")
		ßdefault_template := πg.InternStr("default_template")
		ßdefault_template_path := πg.InternStr("default_template_path")
		ßdefault_visit := πg.InternStr("default_visit")
		ßdepart_Text := πg.InternStr("depart_Text")
		ßdepart_abbreviation := πg.InternStr("depart_abbreviation")
		ßdepart_acronym := πg.InternStr("depart_acronym")
		ßdepart_address := πg.InternStr("depart_address")
		ßdepart_admonition := πg.InternStr("depart_admonition")
		ßdepart_attention := πg.InternStr("depart_attention")
		ßdepart_attribution := πg.InternStr("depart_attribution")
		ßdepart_author := πg.InternStr("depart_author")
		ßdepart_authors := πg.InternStr("depart_authors")
		ßdepart_block_quote := πg.InternStr("depart_block_quote")
		ßdepart_bullet_list := πg.InternStr("depart_bullet_list")
		ßdepart_caption := πg.InternStr("depart_caption")
		ßdepart_caution := πg.InternStr("depart_caution")
		ßdepart_citation := πg.InternStr("depart_citation")
		ßdepart_citation_reference := πg.InternStr("depart_citation_reference")
		ßdepart_classifier := πg.InternStr("depart_classifier")
		ßdepart_colspec := πg.InternStr("depart_colspec")
		ßdepart_comment := πg.InternStr("depart_comment")
		ßdepart_compound := πg.InternStr("depart_compound")
		ßdepart_contact := πg.InternStr("depart_contact")
		ßdepart_container := πg.InternStr("depart_container")
		ßdepart_copyright := πg.InternStr("depart_copyright")
		ßdepart_danger := πg.InternStr("depart_danger")
		ßdepart_date := πg.InternStr("depart_date")
		ßdepart_decoration := πg.InternStr("depart_decoration")
		ßdepart_definition := πg.InternStr("depart_definition")
		ßdepart_definition_list := πg.InternStr("depart_definition_list")
		ßdepart_definition_list_item := πg.InternStr("depart_definition_list_item")
		ßdepart_description := πg.InternStr("depart_description")
		ßdepart_docinfo := πg.InternStr("depart_docinfo")
		ßdepart_doctest_block := πg.InternStr("depart_doctest_block")
		ßdepart_document := πg.InternStr("depart_document")
		ßdepart_emphasis := πg.InternStr("depart_emphasis")
		ßdepart_entry := πg.InternStr("depart_entry")
		ßdepart_enumerated_list := πg.InternStr("depart_enumerated_list")
		ßdepart_error := πg.InternStr("depart_error")
		ßdepart_field := πg.InternStr("depart_field")
		ßdepart_field_body := πg.InternStr("depart_field_body")
		ßdepart_field_list := πg.InternStr("depart_field_list")
		ßdepart_field_name := πg.InternStr("depart_field_name")
		ßdepart_figure := πg.InternStr("depart_figure")
		ßdepart_footer := πg.InternStr("depart_footer")
		ßdepart_footnote := πg.InternStr("depart_footnote")
		ßdepart_footnote_reference := πg.InternStr("depart_footnote_reference")
		ßdepart_generated := πg.InternStr("depart_generated")
		ßdepart_header := πg.InternStr("depart_header")
		ßdepart_hint := πg.InternStr("depart_hint")
		ßdepart_image := πg.InternStr("depart_image")
		ßdepart_important := πg.InternStr("depart_important")
		ßdepart_inline := πg.InternStr("depart_inline")
		ßdepart_label := πg.InternStr("depart_label")
		ßdepart_legend := πg.InternStr("depart_legend")
		ßdepart_line := πg.InternStr("depart_line")
		ßdepart_line_block := πg.InternStr("depart_line_block")
		ßdepart_list_item := πg.InternStr("depart_list_item")
		ßdepart_literal := πg.InternStr("depart_literal")
		ßdepart_literal_block := πg.InternStr("depart_literal_block")
		ßdepart_math := πg.InternStr("depart_math")
		ßdepart_math_block := πg.InternStr("depart_math_block")
		ßdepart_meta := πg.InternStr("depart_meta")
		ßdepart_note := πg.InternStr("depart_note")
		ßdepart_option := πg.InternStr("depart_option")
		ßdepart_option_argument := πg.InternStr("depart_option_argument")
		ßdepart_option_group := πg.InternStr("depart_option_group")
		ßdepart_option_list := πg.InternStr("depart_option_list")
		ßdepart_option_list_item := πg.InternStr("depart_option_list_item")
		ßdepart_option_string := πg.InternStr("depart_option_string")
		ßdepart_organization := πg.InternStr("depart_organization")
		ßdepart_paragraph := πg.InternStr("depart_paragraph")
		ßdepart_problematic := πg.InternStr("depart_problematic")
		ßdepart_raw := πg.InternStr("depart_raw")
		ßdepart_reference := πg.InternStr("depart_reference")
		ßdepart_revision := πg.InternStr("depart_revision")
		ßdepart_row := πg.InternStr("depart_row")
		ßdepart_rubric := πg.InternStr("depart_rubric")
		ßdepart_section := πg.InternStr("depart_section")
		ßdepart_sidebar := πg.InternStr("depart_sidebar")
		ßdepart_status := πg.InternStr("depart_status")
		ßdepart_strong := πg.InternStr("depart_strong")
		ßdepart_subscript := πg.InternStr("depart_subscript")
		ßdepart_substitution_definition := πg.InternStr("depart_substitution_definition")
		ßdepart_subtitle := πg.InternStr("depart_subtitle")
		ßdepart_superscript := πg.InternStr("depart_superscript")
		ßdepart_system_message := πg.InternStr("depart_system_message")
		ßdepart_table := πg.InternStr("depart_table")
		ßdepart_target := πg.InternStr("depart_target")
		ßdepart_tbody := πg.InternStr("depart_tbody")
		ßdepart_term := πg.InternStr("depart_term")
		ßdepart_tgroup := πg.InternStr("depart_tgroup")
		ßdepart_thead := πg.InternStr("depart_thead")
		ßdepart_tip := πg.InternStr("depart_tip")
		ßdepart_title := πg.InternStr("depart_title")
		ßdepart_title_reference := πg.InternStr("depart_title_reference")
		ßdepart_topic := πg.InternStr("depart_topic")
		ßdepart_transition := πg.InternStr("depart_transition")
		ßdepart_version := πg.InternStr("depart_version")
		ßdepart_warning := πg.InternStr("depart_warning")
		ßdescription := πg.InternStr("description")
		ßdest := πg.InternStr("dest")
		ßdirname := πg.InternStr("dirname")
		ßdispatch_visit := πg.InternStr("dispatch_visit")
		ßdocument := πg.InternStr("document")
		ßdocutils := πg.InternStr("docutils")
		ßdom := πg.InternStr("dom")
		ßdom_stylesheet := πg.InternStr("dom_stylesheet")
		ßdom_stylesheetcontent := πg.InternStr("dom_stylesheetcontent")
		ßdpi := πg.InternStr("dpi")
		ßdr3d := πg.InternStr("dr3d")
		ßdraw := πg.InternStr("draw")
		ßdummy := πg.InternStr("dummy")
		ßdynamic := πg.InternStr("dynamic")
		ßembed := πg.InternStr("embed")
		ßembedded_file_list := πg.InternStr("embedded_file_list")
		ßemphasis := πg.InternStr("emphasis")
		ßencode := πg.InternStr("encode")
		ßencoding := πg.InternStr("encoding")
		ßend := πg.InternStr("end")
		ßendnote := πg.InternStr("endnote")
		ßendnotes_end_doc := πg.InternStr("endnotes_end_doc")
		ßendswith := πg.InternStr("endswith")
		ßentry := πg.InternStr("entry")
		ßenumitem := πg.InternStr("enumitem")
		ßenumlist := πg.InternStr("enumlist")
		ßenumtype := πg.InternStr("enumtype")
		ßenviron := πg.InternStr("environ")
		ßepigraph := πg.InternStr("epigraph")
		ßerror := πg.InternStr("error")
		ßescape_cdata := πg.InternStr("escape_cdata")
		ßetree := πg.InternStr("etree")
		ßexists := πg.InternStr("exists")
		ßexternal_attr := πg.InternStr("external_attr")
		ßextra := πg.InternStr("extra")
		ßextract_table_styles := πg.InternStr("extract_table_styles")
		ßfalse := πg.InternStr("false")
		ßfield_element := πg.InternStr("field_element")
		ßfield_name := πg.InternStr("field_name")
		ßfield_pat := πg.InternStr("field_pat")
		ßfigure := πg.InternStr("figure")
		ßfigureframe := πg.InternStr("figureframe")
		ßfill_func1 := πg.InternStr("fill_func1")
		ßfill_func2 := πg.InternStr("fill_func2")
		ßfill_line := πg.InternStr("fill_line")
		ßfind := πg.InternStr("find")
		ßfind_first_text_p := πg.InternStr("find_first_text_p")
		ßfind_title_label := πg.InternStr("find_title_label")
		ßfindall := πg.InternStr("findall")
		ßfix_ns := πg.InternStr("fix_ns")
		ßfloat := πg.InternStr("float")
		ßfo := πg.InternStr("fo")
		ßfooter := πg.InternStr("footer")
		ßfooter_content := πg.InternStr("footer_content")
		ßfootnote := πg.InternStr("footnote")
		ßfootnote_chars := πg.InternStr("footnote_chars")
		ßfootnote_chars_idx := πg.InternStr("footnote_chars_idx")
		ßfootnote_level := πg.InternStr("footnote_level")
		ßfootnote_list := πg.InternStr("footnote_list")
		ßfootnote_ref_dict := πg.InternStr("footnote_ref_dict")
		ßform := πg.InternStr("form")
		ßformat := πg.InternStr("format")
		ßformat_map := πg.InternStr("format_map")
		ßfound_doc_title := πg.InternStr("found_doc_title")
		ßfromstring := πg.InternStr("fromstring")
		ßfrontend := πg.InternStr("frontend")
		ßgenerate_admonition := πg.InternStr("generate_admonition")
		ßgenerate_content_element := πg.InternStr("generate_content_element")
		ßgenerate_figure := πg.InternStr("generate_figure")
		ßgenerate_image := πg.InternStr("generate_image")
		ßgenerate_labeled_block := πg.InternStr("generate_labeled_block")
		ßgenerate_labeled_line := πg.InternStr("generate_labeled_line")
		ßgenerate_oowriter_toc := πg.InternStr("generate_oowriter_toc")
		ßgenerate_table_of_content_entry_template := πg.InternStr("generate_table_of_content_entry_template")
		ßgenerated := πg.InternStr("generated")
		ßgeneric := πg.InternStr("generic")
		ßget := πg.InternStr("get")
		ßget_backgroundcolor_ := πg.InternStr("get_backgroundcolor_")
		ßget_border_ := πg.InternStr("get_border_")
		ßget_dom_stylesheet := πg.InternStr("get_dom_stylesheet")
		ßget_embedded_file_list := πg.InternStr("get_embedded_file_list")
		ßget_image_scale := πg.InternStr("get_image_scale")
		ßget_image_scaled_width_height := πg.InternStr("get_image_scaled_width_height")
		ßget_image_width_height := πg.InternStr("get_image_width_height")
		ßget_language := πg.InternStr("get_language")
		ßget_level := πg.InternStr("get_level")
		ßget_lexer_by_name := πg.InternStr("get_lexer_by_name")
		ßget_meta_dict := πg.InternStr("get_meta_dict")
		ßget_nested := πg.InternStr("get_nested")
		ßget_page_width := πg.InternStr("get_page_width")
		ßget_property := πg.InternStr("get_property")
		ßget_settings := πg.InternStr("get_settings")
		ßget_sibling := πg.InternStr("get_sibling")
		ßget_source_line := πg.InternStr("get_source_line")
		ßget_str_stylesheet := πg.InternStr("get_str_stylesheet")
		ßget_stylesheet := πg.InternStr("get_stylesheet")
		ßget_table_style := πg.InternStr("get_table_style")
		ßget_title := πg.InternStr("get_title")
		ßget_transforms := πg.InternStr("get_transforms")
		ßgetcwd := πg.InternStr("getcwd")
		ßgetparent := πg.InternStr("getparent")
		ßgetroot := πg.InternStr("getroot")
		ßgetvalue := πg.InternStr("getvalue")
		ßgraphic := πg.InternStr("graphic")
		ßgroup := πg.InternStr("group")
		ßgroups := πg.InternStr("groups")
		ßhandle_basic_atts := πg.InternStr("handle_basic_atts")
		ßhasattr := πg.InternStr("hasattr")
		ßheader := πg.InternStr("header")
		ßheader_content := πg.InternStr("header_content")
		ßheading1 := πg.InternStr("heading1")
		ßheading2 := πg.InternStr("heading2")
		ßheading3 := πg.InternStr("heading3")
		ßheading4 := πg.InternStr("heading4")
		ßheading5 := πg.InternStr("heading5")
		ßheading6 := πg.InternStr("heading6")
		ßheading7 := πg.InternStr("heading7")
		ßheight := πg.InternStr("height")
		ßhighlight := πg.InternStr("highlight")
		ßhighlights := πg.InternStr("highlights")
		ßhint := πg.InternStr("hint")
		ßhorizontalline := πg.InternStr("horizontalline")
		ßids := πg.InternStr("ids")
		ßimage := πg.InternStr("image")
		ßimage_count := πg.InternStr("image_count")
		ßimage_dict := πg.InternStr("image_dict")
		ßimage_style_count := πg.InternStr("image_style_count")
		ßimportant := πg.InternStr("important")
		ßin := πg.InternStr("in")
		ßin_citation := πg.InternStr("in_citation")
		ßin_footer := πg.InternStr("in_footer")
		ßin_header := πg.InternStr("in_header")
		ßin_paragraph := πg.InternStr("in_paragraph")
		ßin_table_of_contents := πg.InternStr("in_table_of_contents")
		ßin_thead := πg.InternStr("in_thead")
		ßinfo := πg.InternStr("info")
		ßinline_style_count_stack := πg.InternStr("inline_style_count_stack")
		ßinlineliteral := πg.InternStr("inlineliteral")
		ßinsert := πg.InternStr("insert")
		ßint := πg.InternStr("int")
		ßis_in_table := πg.InternStr("is_in_table")
		ßisalpha := πg.InternStr("isalpha")
		ßisinstance := πg.InternStr("isinstance")
		ßitalic := πg.InternStr("italic")
		ßitems := πg.InternStr("items")
		ßiter := πg.InternStr("iter")
		ßiterfind := πg.InternStr("iterfind")
		ßitertools := πg.InternStr("itertools")
		ßjoin := πg.InternStr("join")
		ßkeywords := πg.InternStr("keywords")
		ßlabels := πg.InternStr("labels")
		ßlanguage := πg.InternStr("language")
		ßlanguage_code := πg.InternStr("language_code")
		ßlanguages := πg.InternStr("languages")
		ßlatex := πg.InternStr("latex")
		ßleft := πg.InternStr("left")
		ßlegend := πg.InternStr("legend")
		ßlen := πg.InternStr("len")
		ßlevel := πg.InternStr("level")
		ßlexers := πg.InternStr("lexers")
		ßline_block_level := πg.InternStr("line_block_level")
		ßline_indent_level := πg.InternStr("line_indent_level")
		ßlineblock1 := πg.InternStr("lineblock1")
		ßlineblock2 := πg.InternStr("lineblock2")
		ßlineblock3 := πg.InternStr("lineblock3")
		ßlineblock4 := πg.InternStr("lineblock4")
		ßlineblock5 := πg.InternStr("lineblock5")
		ßlineblock6 := πg.InternStr("lineblock6")
		ßlist := πg.InternStr("list")
		ßlist_level := πg.InternStr("list_level")
		ßlist_style_stack := πg.InternStr("list_style_stack")
		ßliteral_block := πg.InternStr("literal_block")
		ßlocale := πg.InternStr("locale")
		ßlocaltime := πg.InternStr("localtime")
		ßlong := πg.InternStr("long")
		ßlower := πg.InternStr("lower")
		ßmake_field_element := πg.InternStr("make_field_element")
		ßmanifest := πg.InternStr("manifest")
		ßmargins := πg.InternStr("margins")
		ßmatch := πg.InternStr("match")
		ßmath := πg.InternStr("math")
		ßmeta := πg.InternStr("meta")
		ßmeta_dict := πg.InternStr("meta_dict")
		ßmetavar := πg.InternStr("metavar")
		ßmiddle := πg.InternStr("middle")
		ßmimetype := πg.InternStr("mimetype")
		ßminidom := πg.InternStr("minidom")
		ßmm := πg.InternStr("mm")
		ßmorecols := πg.InternStr("morecols")
		ßmorerows := πg.InternStr("morerows")
		ßname := πg.InternStr("name")
		ßnamelist := πg.InternStr("namelist")
		ßnested_level := πg.InternStr("nested_level")
		ßnext := πg.InternStr("next")
		ßnodes := πg.InternStr("nodes")
		ßnone := πg.InternStr("none")
		ßnormalize := πg.InternStr("normalize")
		ßnote := πg.InternStr("note")
		ßnumber := πg.InternStr("number")
		ßobject := πg.InternStr("object")
		ßodf_config_file := πg.InternStr("odf_config_file")
		ßodt := πg.InternStr("odt")
		ßoffice := πg.InternStr("office")
		ßonLoad := πg.InternStr("onLoad")
		ßooo := πg.InternStr("ooo")
		ßoooc := πg.InternStr("oooc")
		ßooow := πg.InternStr("ooow")
		ßopen := πg.InternStr("open")
		ßoptiontablestyles_generated := πg.InternStr("optiontablestyles_generated")
		ßord := πg.InternStr("ord")
		ßorganization := πg.InternStr("organization")
		ßos := πg.InternStr("os")
		ßoutput := πg.InternStr("output")
		ßoutput_encoding := πg.InternStr("output_encoding")
		ßoutput_encoding_error_handler := πg.InternStr("output_encoding_error_handler")
		ßp := πg.InternStr("p")
		ßpage := πg.InternStr("page")
		ßpagedefault := πg.InternStr("pagedefault")
		ßparagraph := πg.InternStr("paragraph")
		ßparagraph_style_stack := πg.InternStr("paragraph_style_stack")
		ßparent := πg.InternStr("parent")
		ßparseString := πg.InternStr("parseString")
		ßparts := πg.InternStr("parts")
		ßpath := πg.InternStr("path")
		ßpc := πg.InternStr("pc")
		ßpending_ids := πg.InternStr("pending_ids")
		ßpop := πg.InternStr("pop")
		ßpopen := πg.InternStr("popen")
		ßpresentation := πg.InternStr("presentation")
		ßprocess_footnotes := πg.InternStr("process_footnotes")
		ßproperty := πg.InternStr("property")
		ßpt := πg.InternStr("pt")
		ßpx := πg.InternStr("px")
		ßpygments := πg.InternStr("pygments")
		ßpython := πg.InternStr("python")
		ßquotation := πg.InternStr("quotation")
		ßr := πg.InternStr("r")
		ßrange := πg.InternStr("range")
		ßre := πg.InternStr("re")
		ßreStructuredText := πg.InternStr("reStructuredText")
		ßread := πg.InternStr("read")
		ßreferences := πg.InternStr("references")
		ßrefid := πg.InternStr("refid")
		ßrefname := πg.InternStr("refname")
		ßrefuri := πg.InternStr("refuri")
		ßrelative_path := πg.InternStr("relative_path")
		ßrelative_path_settings := πg.InternStr("relative_path_settings")
		ßremove := πg.InternStr("remove")
		ßreplace := πg.InternStr("replace")
		ßreporter := πg.InternStr("reporter")
		ßretrieve_styles := πg.InternStr("retrieve_styles")
		ßrevision := πg.InternStr("revision")
		ßright := πg.InternStr("right")
		ßrstrip := πg.InternStr("rstrip")
		ßrststyle := πg.InternStr("rststyle")
		ßrubric := πg.InternStr("rubric")
		ßs := πg.InternStr("s")
		ßsave_current_element := πg.InternStr("save_current_element")
		ßsave_footnote_current := πg.InternStr("save_footnote_current")
		ßscale := πg.InternStr("scale")
		ßscript := πg.InternStr("script")
		ßsearch := πg.InternStr("search")
		ßsection := πg.InternStr("section")
		ßsection_count := πg.InternStr("section_count")
		ßsection_level := πg.InternStr("section_level")
		ßseek := πg.InternStr("seek")
		ßsep := πg.InternStr("sep")
		ßset := πg.InternStr("set")
		ßset_backgroundcolor_ := πg.InternStr("set_backgroundcolor_")
		ßset_border_ := πg.InternStr("set_border_")
		ßset_current_element := πg.InternStr("set_current_element")
		ßset_embedded_file_list := πg.InternStr("set_embedded_file_list")
		ßset_level := πg.InternStr("set_level")
		ßset_nested := πg.InternStr("set_nested")
		ßset_sibling := πg.InternStr("set_sibling")
		ßset_title := πg.InternStr("set_title")
		ßset_to_parent := πg.InternStr("set_to_parent")
		ßsetparent := πg.InternStr("setparent")
		ßsettings := πg.InternStr("settings")
		ßsettings_defaults := πg.InternStr("settings_defaults")
		ßsettings_spec := πg.InternStr("settings_spec")
		ßsetup_page := πg.InternStr("setup_page")
		ßsetup_paper := πg.InternStr("setup_paper")
		ßsibling_level := πg.InternStr("sibling_level")
		ßsimple := πg.InternStr("simple")
		ßsize := πg.InternStr("size")
		ßsplit := πg.InternStr("split")
		ßsplit_field_specifiers_iter := πg.InternStr("split_field_specifiers_iter")
		ßsplit_words := πg.InternStr("split_words")
		ßsplitext := πg.InternStr("splitext")
		ßstandalone := πg.InternStr("standalone")
		ßstandard := πg.InternStr("standard")
		ßstart := πg.InternStr("start")
		ßstartswith := πg.InternStr("startswith")
		ßstatus := πg.InternStr("status")
		ßstore_embedded_files := πg.InternStr("store_embedded_files")
		ßstore_false := πg.InternStr("store_false")
		ßstore_true := πg.InternStr("store_true")
		ßstr := πg.InternStr("str")
		ßstr_stylesheet := πg.InternStr("str_stylesheet")
		ßstr_stylesheetcontent := πg.InternStr("str_stylesheetcontent")
		ßstrftime := πg.InternStr("strftime")
		ßstring := πg.InternStr("string")
		ßstrip := πg.InternStr("strip")
		ßstrong := πg.InternStr("strong")
		ßstyle := πg.InternStr("style")
		ßstyle_index := πg.InternStr("style_index")
		ßstyles := πg.InternStr("styles")
		ßstylesheet := πg.InternStr("stylesheet")
		ßstylesheet_path := πg.InternStr("stylesheet_path")
		ßsub := πg.InternStr("sub")
		ßsubtitle := πg.InternStr("subtitle")
		ßsupported := πg.InternStr("supported")
		ßsvg := πg.InternStr("svg")
		ßsyntaxhighlight_lexer := πg.InternStr("syntaxhighlight_lexer")
		ßsyntaxhighlighting := πg.InternStr("syntaxhighlighting")
		ßsys := πg.InternStr("sys")
		ßt := πg.InternStr("t")
		ßt1 := πg.InternStr("t1")
		ßt2 := πg.InternStr("t2")
		ßt3 := πg.InternStr("t3")
		ßt4 := πg.InternStr("t4")
		ßtable := πg.InternStr("table")
		ßtable_border_thickness := πg.InternStr("table_border_thickness")
		ßtable_count := πg.InternStr("table_count")
		ßtable_of_content_index_body := πg.InternStr("table_of_content_index_body")
		ßtable_styles := πg.InternStr("table_styles")
		ßtable_width := πg.InternStr("table_width")
		ßtableoption := πg.InternStr("tableoption")
		ßtag := πg.InternStr("tag")
		ßtagname := πg.InternStr("tagname")
		ßtail := πg.InternStr("tail")
		ßtempfile := πg.InternStr("tempfile")
		ßtex := πg.InternStr("tex")
		ßtext := πg.InternStr("text")
		ßtextbody := πg.InternStr("textbody")
		ßtime := πg.InternStr("time")
		ßtip := πg.InternStr("tip")
		ßtitle := πg.InternStr("title")
		ßtocbulletlist := πg.InternStr("tocbulletlist")
		ßtocenumlist := πg.InternStr("tocenumlist")
		ßtop := πg.InternStr("top")
		ßtoprettyxml := πg.InternStr("toprettyxml")
		ßtostring := πg.InternStr("tostring")
		ßtrace_level := πg.InternStr("trace_level")
		ßtranslate := πg.InternStr("translate")
		ßtranslator_class := πg.InternStr("translator_class")
		ßtransparent := πg.InternStr("transparent")
		ßtrue := πg.InternStr("true")
		ßtype := πg.InternStr("type")
		ßunicode := πg.InternStr("unicode")
		ßupdate_stylesheet := πg.InternStr("update_stylesheet")
		ßupdate_toc_add_numbers := πg.InternStr("update_toc_add_numbers")
		ßupdate_toc_collect := πg.InternStr("update_toc_collect")
		ßupdate_toc_page_numbers := πg.InternStr("update_toc_page_numbers")
		ßupper := πg.InternStr("upper")
		ßuri := πg.InternStr("uri")
		ßurlopen := πg.InternStr("urlopen")
		ßused_styles := πg.InternStr("used_styles")
		ßutils := πg.InternStr("utils")
		ßvalidate_boolean := πg.InternStr("validate_boolean")
		ßvalidate_nonnegative_int := πg.InternStr("validate_nonnegative_int")
		ßvalidator := πg.InternStr("validator")
		ßversion := πg.InternStr("version")
		ßversion_info := πg.InternStr("version_info")
		ßvisit_Text := πg.InternStr("visit_Text")
		ßvisit_abbreviation := πg.InternStr("visit_abbreviation")
		ßvisit_acronym := πg.InternStr("visit_acronym")
		ßvisit_address := πg.InternStr("visit_address")
		ßvisit_admonition := πg.InternStr("visit_admonition")
		ßvisit_attention := πg.InternStr("visit_attention")
		ßvisit_attribution := πg.InternStr("visit_attribution")
		ßvisit_author := πg.InternStr("visit_author")
		ßvisit_authors := πg.InternStr("visit_authors")
		ßvisit_block_quote := πg.InternStr("visit_block_quote")
		ßvisit_bullet_list := πg.InternStr("visit_bullet_list")
		ßvisit_caption := πg.InternStr("visit_caption")
		ßvisit_caution := πg.InternStr("visit_caution")
		ßvisit_citation := πg.InternStr("visit_citation")
		ßvisit_citation_reference := πg.InternStr("visit_citation_reference")
		ßvisit_classifier := πg.InternStr("visit_classifier")
		ßvisit_colspec := πg.InternStr("visit_colspec")
		ßvisit_comment := πg.InternStr("visit_comment")
		ßvisit_compound := πg.InternStr("visit_compound")
		ßvisit_contact := πg.InternStr("visit_contact")
		ßvisit_container := πg.InternStr("visit_container")
		ßvisit_copyright := πg.InternStr("visit_copyright")
		ßvisit_danger := πg.InternStr("visit_danger")
		ßvisit_date := πg.InternStr("visit_date")
		ßvisit_decoration := πg.InternStr("visit_decoration")
		ßvisit_definition := πg.InternStr("visit_definition")
		ßvisit_definition_list := πg.InternStr("visit_definition_list")
		ßvisit_definition_list_item := πg.InternStr("visit_definition_list_item")
		ßvisit_description := πg.InternStr("visit_description")
		ßvisit_docinfo := πg.InternStr("visit_docinfo")
		ßvisit_doctest_block := πg.InternStr("visit_doctest_block")
		ßvisit_document := πg.InternStr("visit_document")
		ßvisit_emphasis := πg.InternStr("visit_emphasis")
		ßvisit_entry := πg.InternStr("visit_entry")
		ßvisit_enumerated_list := πg.InternStr("visit_enumerated_list")
		ßvisit_error := πg.InternStr("visit_error")
		ßvisit_field := πg.InternStr("visit_field")
		ßvisit_field_body := πg.InternStr("visit_field_body")
		ßvisit_field_list := πg.InternStr("visit_field_list")
		ßvisit_field_name := πg.InternStr("visit_field_name")
		ßvisit_figure := πg.InternStr("visit_figure")
		ßvisit_footer := πg.InternStr("visit_footer")
		ßvisit_footnote := πg.InternStr("visit_footnote")
		ßvisit_footnote_reference := πg.InternStr("visit_footnote_reference")
		ßvisit_generated := πg.InternStr("visit_generated")
		ßvisit_header := πg.InternStr("visit_header")
		ßvisit_hint := πg.InternStr("visit_hint")
		ßvisit_image := πg.InternStr("visit_image")
		ßvisit_important := πg.InternStr("visit_important")
		ßvisit_inline := πg.InternStr("visit_inline")
		ßvisit_label := πg.InternStr("visit_label")
		ßvisit_legend := πg.InternStr("visit_legend")
		ßvisit_line := πg.InternStr("visit_line")
		ßvisit_line_block := πg.InternStr("visit_line_block")
		ßvisit_list_item := πg.InternStr("visit_list_item")
		ßvisit_literal := πg.InternStr("visit_literal")
		ßvisit_literal_block := πg.InternStr("visit_literal_block")
		ßvisit_math := πg.InternStr("visit_math")
		ßvisit_math_block := πg.InternStr("visit_math_block")
		ßvisit_meta := πg.InternStr("visit_meta")
		ßvisit_note := πg.InternStr("visit_note")
		ßvisit_option := πg.InternStr("visit_option")
		ßvisit_option_argument := πg.InternStr("visit_option_argument")
		ßvisit_option_group := πg.InternStr("visit_option_group")
		ßvisit_option_list := πg.InternStr("visit_option_list")
		ßvisit_option_list_item := πg.InternStr("visit_option_list_item")
		ßvisit_option_string := πg.InternStr("visit_option_string")
		ßvisit_organization := πg.InternStr("visit_organization")
		ßvisit_paragraph := πg.InternStr("visit_paragraph")
		ßvisit_problematic := πg.InternStr("visit_problematic")
		ßvisit_raw := πg.InternStr("visit_raw")
		ßvisit_reference := πg.InternStr("visit_reference")
		ßvisit_revision := πg.InternStr("visit_revision")
		ßvisit_row := πg.InternStr("visit_row")
		ßvisit_rubric := πg.InternStr("visit_rubric")
		ßvisit_section := πg.InternStr("visit_section")
		ßvisit_sidebar := πg.InternStr("visit_sidebar")
		ßvisit_status := πg.InternStr("visit_status")
		ßvisit_strong := πg.InternStr("visit_strong")
		ßvisit_subscript := πg.InternStr("visit_subscript")
		ßvisit_substitution_definition := πg.InternStr("visit_substitution_definition")
		ßvisit_subtitle := πg.InternStr("visit_subtitle")
		ßvisit_superscript := πg.InternStr("visit_superscript")
		ßvisit_system_message := πg.InternStr("visit_system_message")
		ßvisit_table := πg.InternStr("visit_table")
		ßvisit_target := πg.InternStr("visit_target")
		ßvisit_tbody := πg.InternStr("visit_tbody")
		ßvisit_term := πg.InternStr("visit_term")
		ßvisit_tgroup := πg.InternStr("visit_tgroup")
		ßvisit_thead := πg.InternStr("visit_thead")
		ßvisit_tip := πg.InternStr("visit_tip")
		ßvisit_title := πg.InternStr("visit_title")
		ßvisit_title_reference := πg.InternStr("visit_title_reference")
		ßvisit_topic := πg.InternStr("visit_topic")
		ßvisit_transition := πg.InternStr("visit_transition")
		ßvisit_version := πg.InternStr("visit_version")
		ßvisit_warning := πg.InternStr("visit_warning")
		ßvisitor := πg.InternStr("visitor")
		ßw := πg.InternStr("w")
		ßwalkabout := πg.InternStr("walkabout")
		ßwarning := πg.InternStr("warning")
		ßwb := πg.InternStr("wb")
		ßweakref := πg.InternStr("weakref")
		ßwhole := πg.InternStr("whole")
		ßwidth := πg.InternStr("width")
		ßwrap := πg.InternStr("wrap")
		ßwrite := πg.InternStr("write")
		ßwrite_zip_str := πg.InternStr("write_zip_str")
		ßwriters := πg.InternStr("writers")
		ßwritestr := πg.InternStr("writestr")
		ßxforms := πg.InternStr("xforms")
		ßxlink := πg.InternStr("xlink")
		ßxmlcharrefreplace := πg.InternStr("xmlcharrefreplace")
		ßxsd := πg.InternStr("xsd")
		ßxsi := πg.InternStr("xsi")
		ßzipfile := πg.InternStr("zipfile")
		var πTemp001 *πg.Object
		_ = πTemp001
		var πTemp002 []*πg.Object
		_ = πTemp002
		var πTemp003 *πg.BaseException
		_ = πTemp003
		var πTemp004 *πg.Traceback
		_ = πTemp004
		var πTemp005 bool
		_ = πTemp005
		var πTemp006 *πg.Object
		_ = πTemp006
		var πTemp007 *πg.Object
		_ = πTemp007
		var πTemp008 *πg.Dict
		_ = πTemp008
		var πTemp009 *πg.BaseException
		_ = πTemp009
		var πTemp010 []πg.Param
		_ = πTemp010
		var πTemp011 *πg.Object
		_ = πTemp011
		var πTemp012 *πg.Object
		_ = πTemp012
		var πTemp013 *πg.Object
		_ = πTemp013
		var πTemp014 *πg.Object
		_ = πTemp014
		var πTemp015 *πg.Object
		_ = πTemp015
		var πTemp016 *πg.Object
		_ = πTemp016
		var πTemp017 *πg.Object
		_ = πTemp017
		var πTemp018 πg.KWArgs
		_ = πTemp018
		var πTemp019 *πg.Object
		_ = πTemp019
		for ; πF.State() >= 0; πF.PopCheckpoint() {
			switch πF.State() {
			case 0:
			case 8:
				goto Label8
			case 2:
				goto Label2
			case 11:
				goto Label11
			case 14:
				goto Label14
			default:
				panic("unexpected function state")
			}
			// line 5: """
			πF.SetLineno(5)
			// line 5: """
			πF.SetLineno(5)
			if πE = πF.Globals().SetItem(πF, ß__doc__.ToObject(), πg.NewStr("\nOpen Document Format (ODF) Writer.\n\n").ToObject()); πE != nil {
				continue
			}
			// line 9: from __future__ import absolute_import
			πF.SetLineno(9)
			// line 11: __docformat__ = 'reStructuredText'
			πF.SetLineno(11)
			if πE = πF.Globals().SetItem(πF, ß__docformat__.ToObject(), ßreStructuredText.ToObject()); πE != nil {
				continue
			}
			// line 14: import sys
			πF.SetLineno(14)
			if πTemp002, πE = πg.ImportModule(πF, "sys"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßsys.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 15: import os
			πF.SetLineno(15)
			if πTemp002, πE = πg.ImportModule(πF, "os"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßos.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 16: import os.path
			πF.SetLineno(16)
			if πTemp002, πE = πg.ImportModule(πF, "os.path"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßos.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 17: import tempfile
			πF.SetLineno(17)
			if πTemp002, πE = πg.ImportModule(πF, "tempfile"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßtempfile.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 18: import zipfile
			πF.SetLineno(18)
			if πTemp002, πE = πg.ImportModule(πF, "zipfile"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßzipfile.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 19: from xml.etree import ElementTree as etree
			πF.SetLineno(19)
			if πTemp002, πE = πg.ImportModule(πF, "xml.etree.ElementTree"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[2]
			if πE = πF.Globals().SetItem(πF, ßetree.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 20: from xml.dom import minidom
			πF.SetLineno(20)
			if πTemp002, πE = πg.ImportModule(πF, "xml.dom.minidom"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[2]
			if πE = πF.Globals().SetItem(πF, ßminidom.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 21: import time
			πF.SetLineno(21)
			if πTemp002, πE = πg.ImportModule(πF, "time"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßtime.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 22: import re
			πF.SetLineno(22)
			if πTemp002, πE = πg.ImportModule(πF, "re"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßre.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 23: import copy
			πF.SetLineno(23)
			if πTemp002, πE = πg.ImportModule(πF, "copy"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßcopy.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 24: import itertools
			πF.SetLineno(24)
			if πTemp002, πE = πg.ImportModule(πF, "itertools"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßitertools.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 25: import weakref
			πF.SetLineno(25)
			if πTemp002, πE = πg.ImportModule(πF, "weakref"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßweakref.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 27: try:
			πF.SetLineno(27)
			πF.PushCheckpoint(2)
			// line 28: import locale   # module missing in Jython
			πF.SetLineno(28)
			if πTemp002, πE = πg.ImportModule(πF, "locale"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßlocale.ToObject(), πTemp001); πE != nil {
				continue
			}
			πF.PopCheckpoint()
			goto Label1
		Label2:
			if πE == nil {
				continue
			}
			πE = nil
			πTemp003, πTemp004 = πF.ExcInfo()
			if πTemp001, πE = πg.ResolveGlobal(πF, ßImportError); πE != nil {
				continue
			}
			if πTemp005, πE = πg.IsInstance(πF, πTemp003.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp005 {
				goto Label3
			}
			πE = πF.Raise(πTemp003.ToObject(), nil, πTemp004.ToObject())
			continue
			// line 29: except ImportError:
			πF.SetLineno(29)
		Label3:
			// line 30: pass
			πF.SetLineno(30)
			πF.RestoreExc(nil, nil)
			goto Label1
		Label1:
			// line 32: import docutils
			πF.SetLineno(32)
			if πTemp002, πE = πg.ImportModule(πF, "docutils"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßdocutils.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 33: from docutils import frontend, nodes, utils, writers, languages
			πF.SetLineno(33)
			if πTemp002, πE = πg.ImportModule(πF, "docutils.frontend"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßfrontend.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.nodes"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßnodes.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.utils"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßutils.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.writers"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßwriters.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.languages"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßlanguages.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 34: from docutils.readers import standalone
			πF.SetLineno(34)
			if πTemp002, πE = πg.ImportModule(πF, "docutils.readers.standalone"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[2]
			if πE = πF.Globals().SetItem(πF, ßstandalone.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 35: from docutils.transforms import references
			πF.SetLineno(35)
			if πTemp002, πE = πg.ImportModule(πF, "docutils.transforms.references"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[2]
			if πE = πF.Globals().SetItem(πF, ßreferences.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
				continue
			}
			if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßversion_info, nil); πE != nil {
				continue
			}
			πTemp006 = πg.NewTuple2(πg.NewInt(3).ToObject(), πg.NewInt(0).ToObject()).ToObject()
			if πTemp001, πE = πg.GE(πF, πTemp007, πTemp006); πE != nil {
				continue
			}
			if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
				continue
			}
			if πTemp005 {
				goto Label4
			}
			goto Label5
			// line 37: if sys.version_info >= (3, 0):
			πF.SetLineno(37)
		Label4:
			// line 38: from configparser import ConfigParser
			πF.SetLineno(38)
			if πTemp002, πE = πg.ImportModule(πF, "configparser"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßConfigParser); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßConfigParser.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 39: from io import StringIO
			πF.SetLineno(39)
			if πTemp002, πE = πg.ImportModule(πF, "io"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßStringIO); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßStringIO.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 40: from urllib.request import urlopen
			πF.SetLineno(40)
			if πTemp002, πE = πg.ImportModule(πF, "urllib.request"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßurlopen); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßurlopen.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 41: from urllib.error import HTTPError
			πF.SetLineno(41)
			if πTemp002, πE = πg.ImportModule(πF, "urllib.error"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßHTTPError); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßHTTPError.ToObject(), πTemp006); πE != nil {
				continue
			}
			goto Label6
		Label5:
			// line 43: from ConfigParser import ConfigParser
			πF.SetLineno(43)
			if πTemp002, πE = πg.ImportModule(πF, "ConfigParser"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßConfigParser); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßConfigParser.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 44: from StringIO import StringIO
			πF.SetLineno(44)
			if πTemp002, πE = πg.ImportModule(πF, "StringIO"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßStringIO); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßStringIO.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 45: from urllib2 import HTTPError
			πF.SetLineno(45)
			if πTemp002, πE = πg.ImportModule(πF, "urllib2"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßHTTPError); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßHTTPError.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 46: from urllib2 import urlopen
			πF.SetLineno(46)
			if πTemp002, πE = πg.ImportModule(πF, "urllib2"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßurlopen); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßurlopen.ToObject(), πTemp006); πE != nil {
				continue
			}
			goto Label6
		Label6:
			// line 49: VERSION = '1.0a'
			πF.SetLineno(49)
			if πE = πF.Globals().SetItem(πF, ßVERSION.ToObject(), πg.NewStr("1.0a").ToObject()); πE != nil {
				continue
			}
			// line 51: IMAGE_NAME_COUNTER = itertools.count()
			πF.SetLineno(51)
			if πTemp001, πE = πg.ResolveGlobal(πF, ßitertools); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp001, ßcount, nil); πE != nil {
				continue
			}
			if πTemp001, πE = πTemp006.Call(πF, nil, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßIMAGE_NAME_COUNTER.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 55: try:
			πF.SetLineno(55)
			πF.PushCheckpoint(8)
			// line 56: import pygments
			πF.SetLineno(56)
			if πTemp002, πE = πg.ImportModule(πF, "pygments"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßpygments.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 57: import pygments.lexers
			πF.SetLineno(57)
			if πTemp002, πE = πg.ImportModule(πF, "pygments.lexers"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßpygments.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 58: from .pygmentsformatter import (OdtPygmentsProgFormatter,
			πF.SetLineno(58)
			if πTemp002, πE = πg.ImportModule(πF, ".pygmentsformatter"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßOdtPygmentsProgFormatter); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßOdtPygmentsProgFormatter.ToObject(), πTemp006); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßOdtPygmentsLaTeXFormatter); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßOdtPygmentsLaTeXFormatter.ToObject(), πTemp006); πE != nil {
				continue
			}
			πF.PopCheckpoint()
			goto Label7
		Label8:
			if πE == nil {
				continue
			}
			πE = nil
			πTemp003, πTemp004 = πF.ExcInfo()
			if πTemp006, πE = πg.ResolveGlobal(πF, ßImportError); πE != nil {
				continue
			}
			if πTemp007, πE = πg.ResolveGlobal(πF, ßSyntaxError); πE != nil {
				continue
			}
			πTemp001 = πg.NewTuple2(πTemp006, πTemp007).ToObject()
			if πTemp005, πE = πg.IsInstance(πF, πTemp003.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp005 {
				goto Label9
			}
			πE = πF.Raise(πTemp003.ToObject(), nil, πTemp004.ToObject())
			continue
			// line 60: except (ImportError, SyntaxError):
			πF.SetLineno(60)
		Label9:
			// line 61: pygments = None
			πF.SetLineno(61)
			if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßpygments.ToObject(), πTemp001); πE != nil {
				continue
			}
			πF.RestoreExc(nil, nil)
			goto Label7
		Label7:
			// line 64: try:
			πF.SetLineno(64)
			πF.PushCheckpoint(11)
			// line 65: import PIL.Image
			πF.SetLineno(65)
			if πTemp002, πE = πg.ImportModule(πF, "PIL.Image"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßPIL.ToObject(), πTemp001); πE != nil {
				continue
			}
			πF.PopCheckpoint()
			goto Label10
		Label11:
			if πE == nil {
				continue
			}
			πE = nil
			πTemp003, πTemp004 = πF.ExcInfo()
			if πTemp001, πE = πg.ResolveGlobal(πF, ßImportError); πE != nil {
				continue
			}
			if πTemp005, πE = πg.IsInstance(πF, πTemp003.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp005 {
				goto Label12
			}
			πE = πF.Raise(πTemp003.ToObject(), nil, πTemp004.ToObject())
			continue
			// line 66: except ImportError:
			πF.SetLineno(66)
		Label12:
			// line 67: try:  # sometimes PIL modules are put in PYTHONPATH's root
			πF.SetLineno(67)
			πF.PushCheckpoint(14)
			// line 68: import Image
			πF.SetLineno(68)
			if πTemp002, πE = πg.ImportModule(πF, "Image"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßImage.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 70: class PIL(object):
			πF.SetLineno(70)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp007
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("PIL", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 71: pass  # dummy wrapper
					πF.SetLineno(71)
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("PIL").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßPIL.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 72: PIL.Image = Image
			πF.SetLineno(72)
			if πTemp001, πE = πg.ResolveGlobal(πF, ßImage); πE != nil {
				continue
			}
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp006}, πTemp001); πE != nil {
				continue
			}
			if πTemp007, πE = πg.ResolveGlobal(πF, ßPIL); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp007, ßImage, πTemp006); πE != nil {
				continue
			}
			πF.PopCheckpoint()
			goto Label13
		Label14:
			if πE == nil {
				continue
			}
			πE = nil
			πTemp009, πTemp004 = πF.ExcInfo()
			if πTemp001, πE = πg.ResolveGlobal(πF, ßImportError); πE != nil {
				continue
			}
			if πTemp005, πE = πg.IsInstance(πF, πTemp009.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp005 {
				goto Label15
			}
			πE = πF.Raise(πTemp009.ToObject(), nil, πTemp004.ToObject())
			continue
			// line 73: except ImportError:
			πF.SetLineno(73)
		Label15:
			// line 74: PIL = None
			πF.SetLineno(74)
			if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßPIL.ToObject(), πTemp001); πE != nil {
				continue
			}
			πF.RestoreExc(nil, nil)
			goto Label13
		Label13:
			πF.RestoreExc(nil, nil)
			goto Label10
		Label10:
			// line 91: _parents = weakref.WeakKeyDictionary()
			πF.SetLineno(91)
			if πTemp001, πE = πg.ResolveGlobal(πF, ßweakref); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp001, ßWeakKeyDictionary, nil); πE != nil {
				continue
			}
			if πTemp001, πE = πTemp006.Call(πF, nil, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ß_parents.ToObject(), πTemp001); πE != nil {
				continue
			}
			πTemp002 = πF.MakeArgs(2)
			if πTemp001, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp001, ßElement, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp006
			if πTemp001, πE = πg.ResolveGlobal(πF, ßtype); πE != nil {
				continue
			}
			πTemp002[1] = πTemp001
			if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
				continue
			}
			if πTemp006, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πTemp005, πE = πg.IsTrue(πF, πTemp006); πE != nil {
				continue
			}
			if πTemp005 {
				goto Label16
			}
			goto Label17
			// line 92: if isinstance(etree.Element, type):
			πF.SetLineno(92)
		Label16:
			// line 93: _ElementInterface = etree.Element
			πF.SetLineno(93)
			if πTemp001, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp001, ßElement, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ß_ElementInterface.ToObject(), πTemp006); πE != nil {
				continue
			}
			goto Label18
		Label17:
			// line 95: _ElementInterface = etree._ElementInterface
			πF.SetLineno(95)
			if πTemp001, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp001, ß_ElementInterface, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ß_ElementInterface.ToObject(), πTemp006); πE != nil {
				continue
			}
			goto Label18
		Label18:
			// line 98: class _ElementInterfaceWrapper(_ElementInterface):
			πF.SetLineno(98)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ß_ElementInterface); πE != nil {
				continue
			}
			πTemp002[0] = πTemp007
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("_ElementInterfaceWrapper", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 99: def __init__(self, tag, attrib=None):
					πF.SetLineno(99)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "tag", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "attrib", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtag *πg.Object = πArgs[1]
						_ = µtag
						var µattrib *πg.Object = πArgs[2]
						_ = µattrib
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 100: _ElementInterface.__init__(self, tag, attrib)
							πF.SetLineno(100)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
								continue
							}
							πTemp001[1] = µtag
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp001[2] = µattrib
							if πTemp002, πE = πg.ResolveGlobal(πF, ß_ElementInterface); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ß__init__, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 101: _parents[self] = None
							πF.SetLineno(101)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ß_parents); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp005 = µself
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 103: def setparent(self, parent):
					πF.SetLineno(103)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "parent", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("setparent", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µparent *πg.Object = πArgs[1]
						_ = µparent
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 104: _parents[self] = parent
							πF.SetLineno(104)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µparent); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ß_parents); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp003 = µself
							if πE = πg.SetItem(πF, πTemp002, πTemp003, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsetparent.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 106: def getparent(self):
					πF.SetLineno(106)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("getparent", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 107: return _parents[self]
							πF.SetLineno(107)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001 = µself
							if πTemp003, πE = πg.ResolveGlobal(πF, ß_parents); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp003, πTemp001); πE != nil {
								continue
							}
							πR = πTemp002
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßgetparent.ToObject(), πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("_ElementInterfaceWrapper").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ß_ElementInterfaceWrapper.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 113: SPACES_PATTERN = re.compile(r'( +)')
			πF.SetLineno(113)
			πTemp002 = πF.MakeArgs(1)
			πTemp002[0] = πg.NewStr("( +)").ToObject()
			if πTemp001, πE = πg.ResolveGlobal(πF, ßre); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp001, ßcompile, nil); πE != nil {
				continue
			}
			if πTemp001, πE = πTemp006.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßSPACES_PATTERN.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 114: TABS_PATTERN = re.compile(r'(\t+)')
			πF.SetLineno(114)
			πTemp002 = πF.MakeArgs(1)
			πTemp002[0] = πg.NewStr("(\\t+)").ToObject()
			if πTemp001, πE = πg.ResolveGlobal(πF, ßre); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp001, ßcompile, nil); πE != nil {
				continue
			}
			if πTemp001, πE = πTemp006.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßTABS_PATTERN.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 115: FILL_PAT1 = re.compile(r'^ +')
			πF.SetLineno(115)
			πTemp002 = πF.MakeArgs(1)
			πTemp002[0] = πg.NewStr("^ +").ToObject()
			if πTemp001, πE = πg.ResolveGlobal(πF, ßre); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp001, ßcompile, nil); πE != nil {
				continue
			}
			if πTemp001, πE = πTemp006.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßFILL_PAT1.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 116: FILL_PAT2 = re.compile(r' {2,}')
			πF.SetLineno(116)
			πTemp002 = πF.MakeArgs(1)
			πTemp002[0] = πg.NewStr(" {2,}").ToObject()
			if πTemp001, πE = πg.ResolveGlobal(πF, ßre); πE != nil {
				continue
			}
			if πTemp006, πE = πg.GetAttr(πF, πTemp001, ßcompile, nil); πE != nil {
				continue
			}
			if πTemp001, πE = πTemp006.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßFILL_PAT2.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 118: TABLESTYLEPREFIX = 'rststyle-table-'
			πF.SetLineno(118)
			if πE = πF.Globals().SetItem(πF, ßTABLESTYLEPREFIX.ToObject(), πg.NewStr("rststyle-table-").ToObject()); πE != nil {
				continue
			}
			// line 119: TABLENAMEDEFAULT = '%s0' % TABLESTYLEPREFIX
			πF.SetLineno(119)
			if πTemp006, πE = πg.ResolveGlobal(πF, ßTABLESTYLEPREFIX); πE != nil {
				continue
			}
			if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s0").ToObject(), πTemp006); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTABLENAMEDEFAULT.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 120: TABLEPROPERTYNAMES = (
			πF.SetLineno(120)
			πTemp001 = πg.NewTuple5(ßborder.ToObject(), πg.NewStr("border-top").ToObject(), πg.NewStr("border-left").ToObject(), πg.NewStr("border-right").ToObject(), πg.NewStr("border-bottom").ToObject()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßTABLEPROPERTYNAMES.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 124: GENERATOR_DESC = 'Docutils.org/odf_odt'
			πF.SetLineno(124)
			if πE = πF.Globals().SetItem(πF, ßGENERATOR_DESC.ToObject(), πg.NewStr("Docutils.org/odf_odt").ToObject()); πE != nil {
				continue
			}
			// line 126: NAME_SPACE_1 = 'urn:oasis:names:tc:opendocument:xmlns:office:1.0'
			πF.SetLineno(126)
			if πE = πF.Globals().SetItem(πF, ßNAME_SPACE_1.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:office:1.0").ToObject()); πE != nil {
				continue
			}
			// line 128: CONTENT_NAMESPACE_DICT = CNSD = {
			πF.SetLineno(128)
			πTemp008 = πg.NewDict()
			if πE = πTemp008.SetItem(πF, ßchart.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:chart:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßdc.ToObject(), πg.NewStr("http://purl.org/dc/elements/1.1/").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßdom.ToObject(), πg.NewStr("http://www.w3.org/2001/xml-events").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßdr3d.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßdraw.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:drawing:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßfo.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßform.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:form:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßmath.ToObject(), πg.NewStr("http://www.w3.org/1998/Math/MathML").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßmeta.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:meta:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßnumber.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0").ToObject()); πE != nil {
				continue
			}
			if πTemp001, πE = πg.ResolveGlobal(πF, ßNAME_SPACE_1); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßoffice.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßooo.ToObject(), πg.NewStr("http://openoffice.org/2004/office").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßoooc.ToObject(), πg.NewStr("http://openoffice.org/2004/calc").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßooow.ToObject(), πg.NewStr("http://openoffice.org/2004/writer").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßpresentation.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:presentation:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßscript.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:script:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßstyle.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:style:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßsvg.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßtable.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:table:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßtext.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:text:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßxforms.ToObject(), πg.NewStr("http://www.w3.org/2002/xforms").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßxlink.ToObject(), πg.NewStr("http://www.w3.org/1999/xlink").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßxsd.ToObject(), πg.NewStr("http://www.w3.org/2001/XMLSchema").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßxsi.ToObject(), πg.NewStr("http://www.w3.org/2001/XMLSchema-instance").ToObject()); πE != nil {
				continue
			}
			πTemp001 = πTemp008.ToObject()
			if πE = πF.Globals().SetItem(πF, ßCONTENT_NAMESPACE_DICT.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßCNSD.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 157: STYLES_NAMESPACE_DICT = SNSD = {
			πF.SetLineno(157)
			πTemp008 = πg.NewDict()
			if πE = πTemp008.SetItem(πF, ßchart.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:chart:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßdc.ToObject(), πg.NewStr("http://purl.org/dc/elements/1.1/").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßdom.ToObject(), πg.NewStr("http://www.w3.org/2001/xml-events").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßdr3d.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßdraw.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:drawing:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßfo.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßform.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:form:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßmath.ToObject(), πg.NewStr("http://www.w3.org/1998/Math/MathML").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßmeta.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:meta:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßnumber.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0").ToObject()); πE != nil {
				continue
			}
			if πTemp001, πE = πg.ResolveGlobal(πF, ßNAME_SPACE_1); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßoffice.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßpresentation.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:presentation:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßooo.ToObject(), πg.NewStr("http://openoffice.org/2004/office").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßoooc.ToObject(), πg.NewStr("http://openoffice.org/2004/calc").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßooow.ToObject(), πg.NewStr("http://openoffice.org/2004/writer").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßscript.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:script:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßstyle.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:style:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßsvg.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßtable.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:table:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßtext.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:text:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßxlink.ToObject(), πg.NewStr("http://www.w3.org/1999/xlink").ToObject()); πE != nil {
				continue
			}
			πTemp001 = πTemp008.ToObject()
			if πE = πF.Globals().SetItem(πF, ßSTYLES_NAMESPACE_DICT.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßSNSD.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 182: MANIFEST_NAMESPACE_DICT = MANNSD = {
			πF.SetLineno(182)
			πTemp008 = πg.NewDict()
			if πE = πTemp008.SetItem(πF, ßmanifest.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:manifest:1.0").ToObject()); πE != nil {
				continue
			}
			πTemp001 = πTemp008.ToObject()
			if πE = πF.Globals().SetItem(πF, ßMANIFEST_NAMESPACE_DICT.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßMANNSD.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 186: META_NAMESPACE_DICT = METNSD = {
			πF.SetLineno(186)
			πTemp008 = πg.NewDict()
			if πE = πTemp008.SetItem(πF, ßdc.ToObject(), πg.NewStr("http://purl.org/dc/elements/1.1/").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßmeta.ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:meta:1.0").ToObject()); πE != nil {
				continue
			}
			if πTemp001, πE = πg.ResolveGlobal(πF, ßNAME_SPACE_1); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßoffice.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßooo.ToObject(), πg.NewStr("http://openoffice.org/2004/office").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ßxlink.ToObject(), πg.NewStr("http://www.w3.org/1999/xlink").ToObject()); πE != nil {
				continue
			}
			πTemp001 = πTemp008.ToObject()
			if πE = πF.Globals().SetItem(πF, ßMETA_NAMESPACE_DICT.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßMETNSD.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 198: CONTENT_NAMESPACE_ATTRIB = {
			πF.SetLineno(198)
			πTemp008 = πg.NewDict()
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:chart").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:chart:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:dc").ToObject(), πg.NewStr("http://purl.org/dc/elements/1.1/").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:dom").ToObject(), πg.NewStr("http://www.w3.org/2001/xml-events").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:dr3d").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:draw").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:drawing:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:fo").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:form").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:form:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:math").ToObject(), πg.NewStr("http://www.w3.org/1998/Math/MathML").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:meta").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:meta:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0").ToObject()); πE != nil {
				continue
			}
			if πTemp001, πE = πg.ResolveGlobal(πF, ßNAME_SPACE_1); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:office").ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:presentation").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:presentation:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:ooo").ToObject(), πg.NewStr("http://openoffice.org/2004/office").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:oooc").ToObject(), πg.NewStr("http://openoffice.org/2004/calc").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:ooow").ToObject(), πg.NewStr("http://openoffice.org/2004/writer").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:script").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:script:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:style:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:svg").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:table").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:table:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:text").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:text:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:xforms").ToObject(), πg.NewStr("http://www.w3.org/2002/xforms").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:xlink").ToObject(), πg.NewStr("http://www.w3.org/1999/xlink").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:xsd").ToObject(), πg.NewStr("http://www.w3.org/2001/XMLSchema").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:xsi").ToObject(), πg.NewStr("http://www.w3.org/2001/XMLSchema-instance").ToObject()); πE != nil {
				continue
			}
			πTemp001 = πTemp008.ToObject()
			if πE = πF.Globals().SetItem(πF, ßCONTENT_NAMESPACE_ATTRIB.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 227: STYLES_NAMESPACE_ATTRIB = {
			πF.SetLineno(227)
			πTemp008 = πg.NewDict()
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:chart").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:chart:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:dc").ToObject(), πg.NewStr("http://purl.org/dc/elements/1.1/").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:dom").ToObject(), πg.NewStr("http://www.w3.org/2001/xml-events").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:dr3d").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:draw").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:drawing:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:fo").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:form").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:form:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:math").ToObject(), πg.NewStr("http://www.w3.org/1998/Math/MathML").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:meta").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:meta:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0").ToObject()); πE != nil {
				continue
			}
			if πTemp001, πE = πg.ResolveGlobal(πF, ßNAME_SPACE_1); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:office").ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:presentation").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:presentation:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:ooo").ToObject(), πg.NewStr("http://openoffice.org/2004/office").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:oooc").ToObject(), πg.NewStr("http://openoffice.org/2004/calc").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:ooow").ToObject(), πg.NewStr("http://openoffice.org/2004/writer").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:script").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:script:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:style:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:svg").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:table").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:table:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:text").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:text:1.0").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:xlink").ToObject(), πg.NewStr("http://www.w3.org/1999/xlink").ToObject()); πE != nil {
				continue
			}
			πTemp001 = πTemp008.ToObject()
			if πE = πF.Globals().SetItem(πF, ßSTYLES_NAMESPACE_ATTRIB.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 253: MANIFEST_NAMESPACE_ATTRIB = {
			πF.SetLineno(253)
			πTemp008 = πg.NewDict()
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:manifest").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:manifest:1.0").ToObject()); πE != nil {
				continue
			}
			πTemp001 = πTemp008.ToObject()
			if πE = πF.Globals().SetItem(πF, ßMANIFEST_NAMESPACE_ATTRIB.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 257: META_NAMESPACE_ATTRIB = {
			πF.SetLineno(257)
			πTemp008 = πg.NewDict()
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:dc").ToObject(), πg.NewStr("http://purl.org/dc/elements/1.1/").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:meta").ToObject(), πg.NewStr("urn:oasis:names:tc:opendocument:xmlns:meta:1.0").ToObject()); πE != nil {
				continue
			}
			if πTemp001, πE = πg.ResolveGlobal(πF, ßNAME_SPACE_1); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:office").ToObject(), πTemp001); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:ooo").ToObject(), πg.NewStr("http://openoffice.org/2004/office").ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, πg.NewStr("xmlns:xlink").ToObject(), πg.NewStr("http://www.w3.org/1999/xlink").ToObject()); πE != nil {
				continue
			}
			πTemp001 = πTemp008.ToObject()
			if πE = πF.Globals().SetItem(πF, ßMETA_NAMESPACE_ATTRIB.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 276: def Element(tag, attrib=None, nsmap=None, nsdict=CNSD):
			πF.SetLineno(276)
			πTemp010 = make([]πg.Param, 4)
			πTemp010[0] = πg.Param{Name: "tag", Def: nil}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
				continue
			}
			πTemp010[1] = πg.Param{Name: "attrib", Def: πTemp006}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
				continue
			}
			πTemp010[2] = πg.Param{Name: "nsmap", Def: πTemp006}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
				continue
			}
			πTemp010[3] = πg.Param{Name: "nsdict", Def: πTemp006}
			πTemp001 = πg.NewFunction(πg.NewCode("Element", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var µtag *πg.Object = πArgs[0]
				_ = µtag
				var µattrib *πg.Object = πArgs[1]
				_ = µattrib
				var µnsmap *πg.Object = πArgs[2]
				_ = µnsmap
				var µnsdict *πg.Object = πArgs[3]
				_ = µnsdict
				var µel *πg.Object = πg.UnboundLocal
				_ = µel
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 bool
				_ = πTemp003
				var πTemp004 *πg.Dict
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πR *πg.Object
				_ = πR
				var πE *πg.BaseException
				_ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
						continue
					}
					if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
						continue
					}
					πTemp001 = πg.GetBool(µattrib == πTemp002).ToObject()
					if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
						continue
					}
					if πTemp003 {
						goto Label1
					}
					goto Label2
					// line 277: if attrib is None:
					πF.SetLineno(277)
				Label1:
					// line 278: attrib = {}
					πF.SetLineno(278)
					πTemp004 = πg.NewDict()
					πTemp001 = πTemp004.ToObject()
					µattrib = πTemp001
					goto Label2
				Label2:
					// line 279: tag, attrib = fix_ns(tag, attrib, nsdict)
					πF.SetLineno(279)
					πTemp005 = πF.MakeArgs(3)
					if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
						continue
					}
					πTemp005[0] = µtag
					if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
						continue
					}
					πTemp005[1] = µattrib
					if πE = πg.CheckLocal(πF, µnsdict, "nsdict"); πE != nil {
						continue
					}
					πTemp005[2] = µnsdict
					if πTemp001, πE = πg.ResolveGlobal(πF, ßfix_ns); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp006}}}, πTemp002); πE != nil {
						continue
					}
					µtag = πTemp001
					µattrib = πTemp006
					// line 280: el = _ElementInterfaceWrapper(tag, attrib)
					πF.SetLineno(280)
					πTemp005 = πF.MakeArgs(2)
					if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
						continue
					}
					πTemp005[0] = µtag
					if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
						continue
					}
					πTemp005[1] = µattrib
					if πTemp001, πE = πg.ResolveGlobal(πF, ß_ElementInterfaceWrapper); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					µel = πTemp002
					// line 281: return el
					πF.SetLineno(281)
					if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
						continue
					}
					πR = µel
					continue
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßElement.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 284: def SubElement(parent, tag, attrib=None, nsmap=None, nsdict=CNSD):
			πF.SetLineno(284)
			πTemp010 = make([]πg.Param, 5)
			πTemp010[0] = πg.Param{Name: "parent", Def: nil}
			πTemp010[1] = πg.Param{Name: "tag", Def: nil}
			if πTemp007, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
				continue
			}
			πTemp010[2] = πg.Param{Name: "attrib", Def: πTemp007}
			if πTemp007, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
				continue
			}
			πTemp010[3] = πg.Param{Name: "nsmap", Def: πTemp007}
			if πTemp007, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
				continue
			}
			πTemp010[4] = πg.Param{Name: "nsdict", Def: πTemp007}
			πTemp006 = πg.NewFunction(πg.NewCode("SubElement", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var µparent *πg.Object = πArgs[0]
				_ = µparent
				var µtag *πg.Object = πArgs[1]
				_ = µtag
				var µattrib *πg.Object = πArgs[2]
				_ = µattrib
				var µnsmap *πg.Object = πArgs[3]
				_ = µnsmap
				var µnsdict *πg.Object = πArgs[4]
				_ = µnsdict
				var µel *πg.Object = πg.UnboundLocal
				_ = µel
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 bool
				_ = πTemp003
				var πTemp004 *πg.Dict
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πR *πg.Object
				_ = πR
				var πE *πg.BaseException
				_ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
						continue
					}
					if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
						continue
					}
					πTemp001 = πg.GetBool(µattrib == πTemp002).ToObject()
					if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
						continue
					}
					if πTemp003 {
						goto Label1
					}
					goto Label2
					// line 285: if attrib is None:
					πF.SetLineno(285)
				Label1:
					// line 286: attrib = {}
					πF.SetLineno(286)
					πTemp004 = πg.NewDict()
					πTemp001 = πTemp004.ToObject()
					µattrib = πTemp001
					goto Label2
				Label2:
					// line 287: tag, attrib = fix_ns(tag, attrib, nsdict)
					πF.SetLineno(287)
					πTemp005 = πF.MakeArgs(3)
					if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
						continue
					}
					πTemp005[0] = µtag
					if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
						continue
					}
					πTemp005[1] = µattrib
					if πE = πg.CheckLocal(πF, µnsdict, "nsdict"); πE != nil {
						continue
					}
					πTemp005[2] = µnsdict
					if πTemp001, πE = πg.ResolveGlobal(πF, ßfix_ns); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp006}}}, πTemp002); πE != nil {
						continue
					}
					µtag = πTemp001
					µattrib = πTemp006
					// line 288: el = _ElementInterfaceWrapper(tag, attrib)
					πF.SetLineno(288)
					πTemp005 = πF.MakeArgs(2)
					if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
						continue
					}
					πTemp005[0] = µtag
					if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
						continue
					}
					πTemp005[1] = µattrib
					if πTemp001, πE = πg.ResolveGlobal(πF, ß_ElementInterfaceWrapper); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					µel = πTemp002
					// line 289: parent.append(el)
					πF.SetLineno(289)
					πTemp005 = πF.MakeArgs(1)
					if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
						continue
					}
					πTemp005[0] = µel
					if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, µparent, ßappend, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					// line 290: el.setparent(parent)
					πF.SetLineno(290)
					πTemp005 = πF.MakeArgs(1)
					if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
						continue
					}
					πTemp005[0] = µparent
					if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, µel, ßsetparent, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					// line 291: return el
					πF.SetLineno(291)
					if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
						continue
					}
					πR = µel
					continue
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßSubElement.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 294: def fix_ns(tag, attrib, nsdict):
			πF.SetLineno(294)
			πTemp010 = make([]πg.Param, 3)
			πTemp010[0] = πg.Param{Name: "tag", Def: nil}
			πTemp010[1] = πg.Param{Name: "attrib", Def: nil}
			πTemp010[2] = πg.Param{Name: "nsdict", Def: nil}
			πTemp007 = πg.NewFunction(πg.NewCode("fix_ns", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var µtag *πg.Object = πArgs[0]
				_ = µtag
				var µattrib *πg.Object = πArgs[1]
				_ = µattrib
				var µnsdict *πg.Object = πArgs[2]
				_ = µnsdict
				var µnstag *πg.Object = πg.UnboundLocal
				_ = µnstag
				var µnsattrib *πg.Object = πg.UnboundLocal
				_ = µnsattrib
				var µkey *πg.Object = πg.UnboundLocal
				_ = µkey
				var µval *πg.Object = πg.UnboundLocal
				_ = µval
				var µnskey *πg.Object = πg.UnboundLocal
				_ = µnskey
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Dict
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 bool
				_ = πTemp006
				var πTemp007 bool
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πR *πg.Object
				_ = πR
				var πE *πg.BaseException
				_ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					case 1:
						goto Label1
					case 2:
						goto Label2
					default:
						panic("unexpected function state")
					}
					// line 295: nstag = add_ns(tag, nsdict)
					πF.SetLineno(295)
					πTemp001 = πF.MakeArgs(2)
					if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
						continue
					}
					πTemp001[0] = µtag
					if πE = πg.CheckLocal(πF, µnsdict, "nsdict"); πE != nil {
						continue
					}
					πTemp001[1] = µnsdict
					if πTemp002, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					µnstag = πTemp003
					// line 296: nsattrib = {}
					πF.SetLineno(296)
					πTemp004 = πg.NewDict()
					πTemp002 = πTemp004.ToObject()
					µnsattrib = πTemp002
					πTemp001 = πF.MakeArgs(1)
					if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
						continue
					}
					if πTemp003, πE = πg.GetAttr(πF, µattrib, ßitems, nil); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
						continue
					}
					πTemp001[0] = πTemp005
					if πTemp003, πE = πg.ResolveGlobal(πF, ßlist); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					if πTemp002, πE = πg.Iter(πF, πTemp005); πE != nil {
						continue
					}
					πF.PushCheckpoint(2)
					πTemp006 = false
				Label1:
					if πE != nil || πR != nil {
						continue
					}
					if πTemp006 {
						πF.PopCheckpoint()
						goto Label3
					}
					if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
						isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
						if exc != nil {
							πE = exc
						} else if isStop {
							πE = nil
							πF.RestoreExc(nil, nil)
						}
						πTemp007 = !isStop
					} else {
						πTemp007 = true
						if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp008}}}, πTemp003); πE != nil {
							continue
						}
						µkey = πTemp005
						µval = πTemp008
					}
					if πE != nil || !πTemp007 {
						continue
					}
					πF.PushCheckpoint(1)
					// line 298: nskey = add_ns(key, nsdict)
					πF.SetLineno(298)
					πTemp001 = πF.MakeArgs(2)
					if πE = πg.CheckLocal(πF, µkey, "key"); πE != nil {
						continue
					}
					πTemp001[0] = µkey
					if πE = πg.CheckLocal(πF, µnsdict, "nsdict"); πE != nil {
						continue
					}
					πTemp001[1] = µnsdict
					if πTemp003, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
						continue
					}
					if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					µnskey = πTemp005
					// line 299: nsattrib[nskey] = val
					πF.SetLineno(299)
					if πE = πg.CheckLocal(πF, µval, "val"); πE != nil {
						continue
					}
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µval); πE != nil {
						continue
					}
					if πE = πg.CheckLocal(πF, µnsattrib, "nsattrib"); πE != nil {
						continue
					}
					if πE = πg.CheckLocal(πF, µnskey, "nskey"); πE != nil {
						continue
					}
					πTemp005 = µnskey
					if πE = πg.SetItem(πF, µnsattrib, πTemp005, πTemp003); πE != nil {
						continue
					}
					continue
				Label2:
					if πE != nil || πR != nil {
						continue
					}
				Label3:
					// line 300: return nstag, nsattrib
					πF.SetLineno(300)
					if πE = πg.CheckLocal(πF, µnstag, "nstag"); πE != nil {
						continue
					}
					if πE = πg.CheckLocal(πF, µnsattrib, "nsattrib"); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(µnstag, µnsattrib).ToObject()
					πR = πTemp002
					continue
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßfix_ns.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 303: def add_ns(tag, nsdict=CNSD):
			πF.SetLineno(303)
			πTemp010 = make([]πg.Param, 2)
			πTemp010[0] = πg.Param{Name: "tag", Def: nil}
			if πTemp012, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
				continue
			}
			πTemp010[1] = πg.Param{Name: "nsdict", Def: πTemp012}
			πTemp011 = πg.NewFunction(πg.NewCode("add_ns", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var µtag *πg.Object = πArgs[0]
				_ = µtag
				var µnsdict *πg.Object = πArgs[1]
				_ = µnsdict
				var πR *πg.Object
				_ = πR
				var πE *πg.BaseException
				_ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 304: return tag
					πF.SetLineno(304)
					if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
						continue
					}
					πR = µtag
					continue
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßadd_ns.ToObject(), πTemp011); πE != nil {
				continue
			}
			// line 307: def ToString(et):
			πF.SetLineno(307)
			πTemp010 = make([]πg.Param, 1)
			πTemp010[0] = πg.Param{Name: "et", Def: nil}
			πTemp012 = πg.NewFunction(πg.NewCode("ToString", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var µet *πg.Object = πArgs[0]
				_ = µet
				var µoutstream *πg.Object = πg.UnboundLocal
				_ = µoutstream
				var µs1 *πg.Object = πg.UnboundLocal
				_ = µs1
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 bool
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 πg.KWArgs
				_ = πTemp006
				var πR *πg.Object
				_ = πR
				var πE *πg.BaseException
				_ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 308: outstream = StringIO()
					πF.SetLineno(308)
					if πTemp001, πE = πg.ResolveGlobal(πF, ßStringIO); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					µoutstream = πTemp002
					if πTemp002, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
						continue
					}
					if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßversion_info, nil); πE != nil {
						continue
					}
					πTemp002 = πg.NewTuple2(πg.NewInt(3).ToObject(), πg.NewInt(0).ToObject()).ToObject()
					if πTemp001, πE = πg.GE(πF, πTemp003, πTemp002); πE != nil {
						continue
					}
					if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
						continue
					}
					if πTemp004 {
						goto Label1
					}
					goto Label2
					// line 309: if sys.version_info >= (3, 0):
					πF.SetLineno(309)
				Label1:
					// line 310: et.write(outstream, encoding="unicode")
					πF.SetLineno(310)
					πTemp005 = πF.MakeArgs(1)
					if πE = πg.CheckLocal(πF, µoutstream, "outstream"); πE != nil {
						continue
					}
					πTemp005[0] = µoutstream
					πTemp006 = πg.KWArgs{
						{"encoding", ßunicode.ToObject()},
					}
					if πE = πg.CheckLocal(πF, µet, "et"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, µet, ßwrite, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp006); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					goto Label3
				Label2:
					// line 312: et.write(outstream)
					πF.SetLineno(312)
					πTemp005 = πF.MakeArgs(1)
					if πE = πg.CheckLocal(πF, µoutstream, "outstream"); πE != nil {
						continue
					}
					πTemp005[0] = µoutstream
					if πE = πg.CheckLocal(πF, µet, "et"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, µet, ßwrite, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					goto Label3
				Label3:
					// line 313: s1 = outstream.getvalue()
					πF.SetLineno(313)
					if πE = πg.CheckLocal(πF, µoutstream, "outstream"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, µoutstream, ßgetvalue, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					µs1 = πTemp002
					// line 314: outstream.close()
					πF.SetLineno(314)
					if πE = πg.CheckLocal(πF, µoutstream, "outstream"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, µoutstream, ßclose, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					// line 315: return s1
					πF.SetLineno(315)
					if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
						continue
					}
					πR = µs1
					continue
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßToString.ToObject(), πTemp012); πE != nil {
				continue
			}
			// line 318: def escape_cdata(text):
			πF.SetLineno(318)
			πTemp010 = make([]πg.Param, 1)
			πTemp010[0] = πg.Param{Name: "text", Def: nil}
			πTemp013 = πg.NewFunction(πg.NewCode("escape_cdata", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var µtext *πg.Object = πArgs[0]
				_ = µtext
				var µascii *πg.Object = πg.UnboundLocal
				_ = µascii
				var µchar *πg.Object = πg.UnboundLocal
				_ = µchar
				var πTemp001 []*πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 bool
				_ = πTemp004
				var πTemp005 bool
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πR *πg.Object
				_ = πR
				var πE *πg.BaseException
				_ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					case 1:
						goto Label1
					case 2:
						goto Label2
					default:
						panic("unexpected function state")
					}
					// line 319: text = text.replace("&", "&amp;")
					πF.SetLineno(319)
					πTemp001 = πF.MakeArgs(2)
					πTemp001[0] = πg.NewStr("&").ToObject()
					πTemp001[1] = πg.NewStr("&amp;").ToObject()
					if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, µtext, ßreplace, nil); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					µtext = πTemp003
					// line 320: text = text.replace("<", "&lt;")
					πF.SetLineno(320)
					πTemp001 = πF.MakeArgs(2)
					πTemp001[0] = πg.NewStr("<").ToObject()
					πTemp001[1] = πg.NewStr("&lt;").ToObject()
					if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, µtext, ßreplace, nil); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					µtext = πTemp003
					// line 321: text = text.replace(">", "&gt;")
					πF.SetLineno(321)
					πTemp001 = πF.MakeArgs(2)
					πTemp001[0] = πg.NewStr(">").ToObject()
					πTemp001[1] = πg.NewStr("&gt;").ToObject()
					if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, µtext, ßreplace, nil); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					µtext = πTemp003
					// line 322: ascii = ''
					πF.SetLineno(322)
					µascii = ß.ToObject()
					if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
						continue
					}
					if πTemp002, πE = πg.Iter(πF, µtext); πE != nil {
						continue
					}
					πF.PushCheckpoint(2)
					πTemp004 = false
				Label1:
					if πE != nil || πR != nil {
						continue
					}
					if πTemp004 {
						πF.PopCheckpoint()
						goto Label3
					}
					if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
						isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
						if exc != nil {
							πE = exc
						} else if isStop {
							πE = nil
							πF.RestoreExc(nil, nil)
						}
						πTemp005 = !isStop
					} else {
						πTemp005 = true
						µchar = πTemp003
					}
					if πE != nil || !πTemp005 {
						continue
					}
					πF.PushCheckpoint(1)
					πTemp001 = πF.MakeArgs(1)
					if πE = πg.CheckLocal(πF, µchar, "char"); πE != nil {
						continue
					}
					πTemp001[0] = µchar
					if πTemp006, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					πTemp001 = πF.MakeArgs(1)
					πTemp001[0] = πg.NewStr("\x7f").ToObject()
					if πTemp006, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp006.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					if πTemp003, πE = πg.GE(πF, πTemp007, πTemp008); πE != nil {
						continue
					}
					if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
						continue
					}
					if πTemp005 {
						goto Label4
					}
					goto Label5
					// line 324: if ord(char) >= ord("\x7f"):
					πF.SetLineno(324)
				Label4:
					// line 325: ascii += "&#x%X;" % (ord(char), )
					πF.SetLineno(325)
					if πE = πg.CheckLocal(πF, µascii, "ascii"); πE != nil {
						continue
					}
					πTemp001 = πF.MakeArgs(1)
					if πE = πg.CheckLocal(πF, µchar, "char"); πE != nil {
						continue
					}
					πTemp001[0] = µchar
					if πTemp007, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp007.Call(πF, πTemp001, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp001)
					πTemp006 = πg.NewTuple1(πTemp008).ToObject()
					if πTemp003, πE = πg.Mod(πF, πg.NewStr("&#x%X;").ToObject(), πTemp006); πE != nil {
						continue
					}
					if πTemp006, πE = πg.IAdd(πF, µascii, πTemp003); πE != nil {
						continue
					}
					µascii = πTemp006
					goto Label6
				Label5:
					// line 327: ascii += char
					πF.SetLineno(327)
					if πE = πg.CheckLocal(πF, µascii, "ascii"); πE != nil {
						continue
					}
					if πE = πg.CheckLocal(πF, µchar, "char"); πE != nil {
						continue
					}
					if πTemp003, πE = πg.IAdd(πF, µascii, µchar); πE != nil {
						continue
					}
					µascii = πTemp003
					goto Label6
				Label6:
					continue
				Label2:
					if πE != nil || πR != nil {
						continue
					}
				Label3:
					// line 328: return ascii
					πF.SetLineno(328)
					if πE = πg.CheckLocal(πF, µascii, "ascii"); πE != nil {
						continue
					}
					πR = µascii
					continue
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßescape_cdata.ToObject(), πTemp013); πE != nil {
				continue
			}
			// line 331: WORD_SPLIT_PAT1 = re.compile(r'\b(\w*)\b\W*')
			πF.SetLineno(331)
			πTemp002 = πF.MakeArgs(1)
			πTemp002[0] = πg.NewStr("\\b(\\w*)\\b\\W*").ToObject()
			if πTemp014, πE = πg.ResolveGlobal(πF, ßre); πE != nil {
				continue
			}
			if πTemp015, πE = πg.GetAttr(πF, πTemp014, ßcompile, nil); πE != nil {
				continue
			}
			if πTemp014, πE = πTemp015.Call(πF, πTemp002, nil); πE != nil {
				continue
			}
			πF.FreeArgs(πTemp002)
			if πE = πF.Globals().SetItem(πF, ßWORD_SPLIT_PAT1.ToObject(), πTemp014); πE != nil {
				continue
			}
			// line 334: def split_words(line):
			πF.SetLineno(334)
			πTemp010 = make([]πg.Param, 1)
			πTemp010[0] = πg.Param{Name: "line", Def: nil}
			πTemp014 = πg.NewFunction(πg.NewCode("split_words", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
				var µline *πg.Object = πArgs[0]
				_ = µline
				var µwords *πg.Object = πg.UnboundLocal
				_ = µwords
				var µpos1 *πg.Object = πg.UnboundLocal
				_ = µpos1
				var µmo *πg.Object = πg.UnboundLocal
				_ = µmo
				var µword *πg.Object = πg.UnboundLocal
				_ = µword
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 bool
				_ = πTemp004
				var πTemp005 bool
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πR *πg.Object
				_ = πR
				var πE *πg.BaseException
				_ = πE
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					case 1:
						goto Label1
					case 2:
						goto Label2
					default:
						panic("unexpected function state")
					}
					// line 336: line += ' '
					πF.SetLineno(336)
					if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.IAdd(πF, µline, πg.NewStr(" ").ToObject()); πE != nil {
						continue
					}
					µline = πTemp001
					// line 337: words = []
					πF.SetLineno(337)
					πTemp002 = make([]*πg.Object, 0)
					πTemp001 = πg.NewList(πTemp002...).ToObject()
					µwords = πTemp001
					// line 338: pos1 = 0
					πF.SetLineno(338)
					µpos1 = πg.NewInt(0).ToObject()
					// line 339: mo = WORD_SPLIT_PAT1.search(line, pos1)
					πF.SetLineno(339)
					πTemp002 = πF.MakeArgs(2)
					if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
						continue
					}
					πTemp002[0] = µline
					if πE = πg.CheckLocal(πF, µpos1, "pos1"); πE != nil {
						continue
					}
					πTemp002[1] = µpos1
					if πTemp001, πE = πg.ResolveGlobal(πF, ßWORD_SPLIT_PAT1); πE != nil {
						continue
					}
					if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßsearch, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					µmo = πTemp001
					// line 340: while mo is not None:
					πF.SetLineno(340)
					πF.PushCheckpoint(2)
					πTemp004 = false
				Label1:
					if πE != nil || πR != nil {
						continue
					}
					if πTemp004 {
						πF.PopCheckpoint()
						goto Label3
					}
					if πE = πg.CheckLocal(πF, µmo, "mo"); πE != nil {
						continue
					}
					if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
						continue
					}
					πTemp001 = πg.GetBool(µmo != πTemp003).ToObject()
					if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
						continue
					}
					if πE != nil || !πTemp005 {
						continue
					}
					πF.PushCheckpoint(1)
					// line 341: word = mo.groups()[0]
					πF.SetLineno(341)
					πTemp001 = πg.NewInt(0).ToObject()
					if πE = πg.CheckLocal(πF, µmo, "mo"); πE != nil {
						continue
					}
					if πTemp006, πE = πg.GetAttr(πF, µmo, ßgroups, nil); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, nil, nil); πE != nil {
						continue
					}
					if πTemp003, πE = πg.GetItem(πF, πTemp007, πTemp001); πE != nil {
						continue
					}
					µword = πTemp003
					// line 342: words.append(word)
					πF.SetLineno(342)
					πTemp002 = πF.MakeArgs(1)
					if πE = πg.CheckLocal(πF, µword, "word"); πE != nil {
						continue
					}
					πTemp002[0] = µword
					if πE = πg.CheckLocal(πF, µwords, "words"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, µwords, ßappend, nil); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					// line 343: pos1 = mo.end()
					πF.SetLineno(343)
					if πE = πg.CheckLocal(πF, µmo, "mo"); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, µmo, ßend, nil); πE != nil {
						continue
					}
					if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
						continue
					}
					µpos1 = πTemp003
					// line 344: mo = WORD_SPLIT_PAT1.search(line, pos1)
					πF.SetLineno(344)
					πTemp002 = πF.MakeArgs(2)
					if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
						continue
					}
					πTemp002[0] = µline
					if πE = πg.CheckLocal(πF, µpos1, "pos1"); πE != nil {
						continue
					}
					πTemp002[1] = µpos1
					if πTemp001, πE = πg.ResolveGlobal(πF, ßWORD_SPLIT_PAT1); πE != nil {
						continue
					}
					if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßsearch, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					µmo = πTemp001
					continue
				Label2:
					if πE != nil || πR != nil {
						continue
					}
				Label3:
					// line 345: return words
					πF.SetLineno(345)
					if πE = πg.CheckLocal(πF, µwords, "words"); πE != nil {
						continue
					}
					πR = µwords
					continue
				}
				if πE != nil {
					πR = nil
				} else if πR == nil {
					πR = πg.None
				}
				return πR, πE
			}), πF.Globals()).ToObject()
			if πE = πF.Globals().SetItem(πF, ßsplit_words.ToObject(), πTemp014); πE != nil {
				continue
			}
			// line 353: class TableStyle(object):
			πF.SetLineno(353)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp017, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp017
			πTemp008 = πg.NewDict()
			if πTemp015, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp015); πE != nil {
				continue
			}
			_, πE = πg.NewCode("TableStyle", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 354: def __init__(self, border=None, backgroundcolor=None):
					πF.SetLineno(354)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[1] = πg.Param{Name: "border", Def: πTemp003}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "backgroundcolor", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µborder *πg.Object = πArgs[1]
						_ = µborder
						var µbackgroundcolor *πg.Object = πArgs[2]
						_ = µbackgroundcolor
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 355: self.border = border
							πF.SetLineno(355)
							if πE = πg.CheckLocal(πF, µborder, "border"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µborder); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßborder, πTemp001); πE != nil {
								continue
							}
							// line 356: self.backgroundcolor = backgroundcolor
							πF.SetLineno(356)
							if πE = πg.CheckLocal(πF, µbackgroundcolor, "backgroundcolor"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µbackgroundcolor); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßbackgroundcolor, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 358: def get_border_(self):
					πF.SetLineno(358)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("get_border_", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 359: return self.border_
							πF.SetLineno(359)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßborder_, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_border_.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 361: def set_border_(self, border):
					πF.SetLineno(361)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "border", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("set_border_", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µborder *πg.Object = πArgs[1]
						_ = µborder
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 362: self.border_ = border
							πF.SetLineno(362)
							if πE = πg.CheckLocal(πF, µborder, "border"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µborder); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßborder_, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_border_.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 364: border = property(get_border_, set_border_)
					πF.SetLineno(364)
					πTemp005 = πF.MakeArgs(2)
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßget_border_); πE != nil {
						continue
					}
					πTemp005[0] = πTemp006
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßset_border_); πE != nil {
						continue
					}
					πTemp005[1] = πTemp006
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßproperty); πE != nil {
						continue
					}
					if πTemp007, πE = πTemp006.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßborder.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 366: def get_backgroundcolor_(self):
					πF.SetLineno(366)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("get_backgroundcolor_", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 367: return self.backgroundcolor_
							πF.SetLineno(367)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßbackgroundcolor_, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_backgroundcolor_.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 369: def set_backgroundcolor_(self, backgroundcolor):
					πF.SetLineno(369)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "backgroundcolor", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("set_backgroundcolor_", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µbackgroundcolor *πg.Object = πArgs[1]
						_ = µbackgroundcolor
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 370: self.backgroundcolor_ = backgroundcolor
							πF.SetLineno(370)
							if πE = πg.CheckLocal(πF, µbackgroundcolor, "backgroundcolor"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µbackgroundcolor); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßbackgroundcolor_, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_backgroundcolor_.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 371: backgroundcolor = property(get_backgroundcolor_, set_backgroundcolor_)
					πF.SetLineno(371)
					πTemp005 = πF.MakeArgs(2)
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßget_backgroundcolor_); πE != nil {
						continue
					}
					πTemp005[0] = πTemp008
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßset_backgroundcolor_); πE != nil {
						continue
					}
					πTemp005[1] = πTemp008
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßproperty); πE != nil {
						continue
					}
					if πTemp009, πE = πTemp008.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					if πE = πClass.SetItem(πF, ßbackgroundcolor.ToObject(), πTemp009); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp016, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp016 == nil {
				πTemp016 = πg.TypeType.ToObject()
			}
			if πTemp017, πE = πTemp016.Call(πF, []*πg.Object{πg.NewStr("TableStyle").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTableStyle.ToObject(), πTemp017); πE != nil {
				continue
			}
			// line 374: BUILTIN_DEFAULT_TABLE_STYLE = TableStyle(
			πF.SetLineno(374)
			πTemp018 = πg.KWArgs{
				{"border", πg.NewStr("0.0007in solid #000000").ToObject()},
			}
			if πTemp015, πE = πg.ResolveGlobal(πF, ßTableStyle); πE != nil {
				continue
			}
			if πTemp016, πE = πTemp015.Call(πF, nil, πTemp018); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßBUILTIN_DEFAULT_TABLE_STYLE.ToObject(), πTemp016); πE != nil {
				continue
			}
			// line 381: class ListLevel(object):
			πF.SetLineno(381)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp017, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp017
			πTemp008 = πg.NewDict()
			if πTemp015, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp015); πE != nil {
				continue
			}
			_, πE = πg.NewCode("ListLevel", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 382: def __init__(self, level, sibling_level=True, nested_level=True):
					πF.SetLineno(382)
					πTemp002 = make([]πg.Param, 4)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "level", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "sibling_level", Def: πTemp003}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp002[3] = πg.Param{Name: "nested_level", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µlevel *πg.Object = πArgs[1]
						_ = µlevel
						var µsibling_level *πg.Object = πArgs[2]
						_ = µsibling_level
						var µnested_level *πg.Object = πArgs[3]
						_ = µnested_level
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 383: self.level = level
							πF.SetLineno(383)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlevel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlevel, πTemp001); πE != nil {
								continue
							}
							// line 384: self.sibling_level = sibling_level
							πF.SetLineno(384)
							if πE = πg.CheckLocal(πF, µsibling_level, "sibling_level"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µsibling_level); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsibling_level, πTemp001); πE != nil {
								continue
							}
							// line 385: self.nested_level = nested_level
							πF.SetLineno(385)
							if πE = πg.CheckLocal(πF, µnested_level, "nested_level"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µnested_level); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßnested_level, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 387: def set_sibling(self, sibling_level):
					πF.SetLineno(387)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "sibling_level", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("set_sibling", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µsibling_level *πg.Object = πArgs[1]
						_ = µsibling_level
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 388: self.sibling_level = sibling_level
							πF.SetLineno(388)
							if πE = πg.CheckLocal(πF, µsibling_level, "sibling_level"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µsibling_level); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsibling_level, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_sibling.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 390: def get_sibling(self):
					πF.SetLineno(390)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("get_sibling", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 391: return self.sibling_level
							πF.SetLineno(391)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsibling_level, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_sibling.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 393: def set_nested(self, nested_level):
					πF.SetLineno(393)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "nested_level", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("set_nested", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnested_level *πg.Object = πArgs[1]
						_ = µnested_level
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 394: self.nested_level = nested_level
							πF.SetLineno(394)
							if πE = πg.CheckLocal(πF, µnested_level, "nested_level"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µnested_level); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßnested_level, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_nested.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 396: def get_nested(self):
					πF.SetLineno(396)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("get_nested", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 397: return self.nested_level
							πF.SetLineno(397)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßnested_level, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_nested.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 399: def set_level(self, level):
					πF.SetLineno(399)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "level", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("set_level", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µlevel *πg.Object = πArgs[1]
						_ = µlevel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 400: self.level = level
							πF.SetLineno(400)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlevel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlevel, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_level.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 402: def get_level(self):
					πF.SetLineno(402)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("get_level", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 403: return self.level
							πF.SetLineno(403)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlevel, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_level.ToObject(), πTemp008); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp016, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp016 == nil {
				πTemp016 = πg.TypeType.ToObject()
			}
			if πTemp017, πE = πTemp016.Call(πF, []*πg.Object{πg.NewStr("ListLevel").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßListLevel.ToObject(), πTemp017); πE != nil {
				continue
			}
			// line 406: class Writer(writers.Writer):
			πF.SetLineno(406)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp017, πE = πg.ResolveGlobal(πF, ßwriters); πE != nil {
				continue
			}
			if πTemp019, πE = πg.GetAttr(πF, πTemp017, ßWriter, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp019
			πTemp008 = πg.NewDict()
			if πTemp015, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp015); πE != nil {
				continue
			}
			_, πE = πg.NewCode("Writer", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 []*πg.Object
				_ = πTemp004
				var πTemp005 []*πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Dict
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 []πg.Param
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 *πg.Object
				_ = πTemp017
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 408: MIME_TYPE = 'application/vnd.oasis.opendocument.text'
					πF.SetLineno(408)
					// line 408: MIME_TYPE = 'application/vnd.oasis.opendocument.text'
					πF.SetLineno(408)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("application/vnd.oasis.opendocument.text").ToObject()); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßMIME_TYPE.ToObject(), πg.NewStr("application/vnd.oasis.opendocument.text").ToObject()); πE != nil {
						continue
					}
					// line 409: EXTENSION = '.odt'
					πF.SetLineno(409)
					if πE = πClass.SetItem(πF, ßEXTENSION.ToObject(), πg.NewStr(".odt").ToObject()); πE != nil {
						continue
					}
					// line 411: supported = ('odt', )
					πF.SetLineno(411)
					πTemp001 = πg.NewTuple1(ßodt.ToObject()).ToObject()
					if πE = πClass.SetItem(πF, ßsupported.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 412: """Formats this writer supports."""
					πF.SetLineno(412)
					// line 414: default_stylesheet = 'styles' + EXTENSION
					πF.SetLineno(414)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßEXTENSION); πE != nil {
						continue
					}
					if πTemp001, πE = πg.Add(πF, ßstyles.ToObject(), πTemp002); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdefault_stylesheet.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 416: default_stylesheet_path = utils.relative_path(
					πF.SetLineno(416)
					πTemp003 = πF.MakeArgs(2)
					πTemp004 = πF.MakeArgs(2)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßgetcwd, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
						continue
					}
					πTemp004[0] = πTemp001
					πTemp004[1] = ßdummy.ToObject()
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpath, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßjoin, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					πTemp003[0] = πTemp002
					πTemp004 = πF.MakeArgs(2)
					πTemp005 = πF.MakeArgs(1)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ß__file__); πE != nil {
						continue
					}
					πTemp005[0] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpath, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßdirname, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp002
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßdefault_stylesheet); πE != nil {
						continue
					}
					πTemp004[1] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpath, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßjoin, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					πTemp003[1] = πTemp002
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßutils); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßrelative_path, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					if πE = πClass.SetItem(πF, ßdefault_stylesheet_path.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 420: default_template = 'template.txt'
					πF.SetLineno(420)
					if πE = πClass.SetItem(πF, ßdefault_template.ToObject(), πg.NewStr("template.txt").ToObject()); πE != nil {
						continue
					}
					// line 422: default_template_path = utils.relative_path(
					πF.SetLineno(422)
					πTemp003 = πF.MakeArgs(2)
					πTemp004 = πF.MakeArgs(2)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßgetcwd, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
						continue
					}
					πTemp004[0] = πTemp001
					πTemp004[1] = ßdummy.ToObject()
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpath, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßjoin, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					πTemp003[0] = πTemp002
					πTemp004 = πF.MakeArgs(2)
					πTemp005 = πF.MakeArgs(1)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ß__file__); πE != nil {
						continue
					}
					πTemp005[0] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpath, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßdirname, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp005)
					πTemp004[0] = πTemp002
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßdefault_template); πE != nil {
						continue
					}
					πTemp004[1] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpath, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßjoin, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp004)
					πTemp003[1] = πTemp002
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßutils); πE != nil {
						continue
					}
					if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßrelative_path, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					if πE = πClass.SetItem(πF, ßdefault_template_path.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 426: settings_spec = (
					πF.SetLineno(426)
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003 = make([]*πg.Object, 17)
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßdefault_stylesheet_path); πE != nil {
						continue
					}
					if πTemp008, πE = πg.Mod(πF, πg.NewStr("Specify a stylesheet.  Default: \"%s\"").ToObject(), πTemp009); πE != nil {
						continue
					}
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--stylesheet").ToObject()
					πTemp009 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp011, πE = πg.ResolveClass(πF, πClass, nil, ßdefault_stylesheet_path); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp011); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßstylesheet.ToObject()); πE != nil {
						continue
					}
					πTemp011 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πTemp008, πTemp009, πTemp011).ToObject()
					πTemp003[0] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--odf-config-file").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πE = πTemp010.SetItem(πF, ßmetavar.ToObject(), πg.NewStr("<file>").ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Specify a configuration/mapping file relative to the current working directory for additional ODF options.  In particular, this file may contain a section named \"Formats\" that maps default style names to names to be used in the resulting output file allowing for adhering to external standards. For more info and the format of the configuration/mapping file, see the odtwriter doc.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[1] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--cloak-email-addresses").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßcloak_email_addresses.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Obfuscate email addresses to confuse harvesters while still keeping email links usable with standards-compliant browsers.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[2] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--no-cloak-email-addresses").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßcloak_email_addresses.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Do not obfuscate email addresses.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[3] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--table-border-thickness").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_nonnegative_int, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Specify the thickness of table borders in thousands of a cm.  Default is 35.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[4] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--add-syntax-highlighting").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßadd_syntax_highlighting.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Add syntax highlighting in literal code blocks.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[5] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--no-syntax-highlighting").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßadd_syntax_highlighting.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Do not add syntax highlighting in literal code blocks. (default)").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[6] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--create-sections").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßcreate_sections.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Create sections for headers.  (default)").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[7] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--no-sections").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßcreate_sections.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Do not create sections for headers.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[8] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--create-links").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßcreate_links.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Create links.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[9] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--no-links").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßcreate_links.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Do not create links.  (default)").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[10] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--endnotes-end-doc").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßendnotes_end_doc.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Generate endnotes at end of document, not footnotes at bottom of page.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[11] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--no-endnotes-end-doc").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßendnotes_end_doc.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Generate footnotes at bottom of page, not endnotes at end of document. (default)").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[12] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--generate-list-toc").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßgenerate_oowriter_toc.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Generate a bullet list table of contents, not an ODF/oowriter table of contents.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[13] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--generate-oowriter-toc").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßgenerate_oowriter_toc.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßvalidator.ToObject(), πTemp011); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Generate an ODF/oowriter table of contents, not a bullet list. (default)").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[14] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--custom-odt-header").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßcustom_header.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Specify the contents of an custom header line.  See odf_odt writer documentation for details about special field character sequences.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[15] = πTemp007
					πTemp004 = make([]*πg.Object, 1)
					πTemp004[0] = πg.NewStr("--custom-odt-footer").ToObject()
					πTemp008 = πg.NewList(πTemp004...).ToObject()
					πTemp010 = πg.NewDict()
					if πE = πTemp010.SetItem(πF, ßdefault.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp010.SetItem(πF, ßdest.ToObject(), ßcustom_footer.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp010.ToObject()
					πTemp007 = πg.NewTuple3(πg.NewStr("Specify the contents of an custom footer line.  See odf_odt writer documentation for details about special field character sequences.").ToObject(), πTemp008, πTemp009).ToObject()
					πTemp003[16] = πTemp007
					πTemp006 = πg.NewTuple(πTemp003...).ToObject()
					πTemp001 = πg.NewTuple3(πg.NewStr("ODF-Specific Options").ToObject(), πTemp002, πTemp006).ToObject()
					if πE = πClass.SetItem(πF, ßsettings_spec.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 548: settings_defaults = {
					πF.SetLineno(548)
					πTemp010 = πg.NewDict()
					if πE = πTemp010.SetItem(πF, ßoutput_encoding_error_handler.ToObject(), ßxmlcharrefreplace.ToObject()); πE != nil {
						continue
					}
					πTemp001 = πTemp010.ToObject()
					if πE = πClass.SetItem(πF, ßsettings_defaults.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 552: relative_path_settings = (
					πF.SetLineno(552)
					πTemp001 = πg.NewTuple1(ßstylesheet_path.ToObject()).ToObject()
					if πE = πClass.SetItem(πF, ßrelative_path_settings.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 556: config_section = 'odf_odt writer'
					πF.SetLineno(556)
					if πE = πClass.SetItem(πF, ßconfig_section.ToObject(), πg.NewStr("odf_odt writer").ToObject()); πE != nil {
						continue
					}
					// line 557: config_section_dependencies = ('writers',)
					πF.SetLineno(557)
					πTemp001 = πg.NewTuple1(ßwriters.ToObject()).ToObject()
					if πE = πClass.SetItem(πF, ßconfig_section_dependencies.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 559: def __init__(self):
					πF.SetLineno(559)
					πTemp012 = make([]πg.Param, 1)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 560: writers.Writer.__init__(self)
							πF.SetLineno(560)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßwriters); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßWriter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ß__init__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 561: self.translator_class = ODFTranslator
							πF.SetLineno(561)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßODFTranslator); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtranslator_class, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 563: def translate(self):
					πF.SetLineno(563)
					πTemp012 = make([]πg.Param, 1)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp002 = πg.NewFunction(πg.NewCode("translate", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 564: self.settings = self.document.settings
							πF.SetLineno(564)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßsettings, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsettings, πTemp001); πE != nil {
								continue
							}
							// line 565: self.visitor = self.translator_class(self.document)
							πF.SetLineno(565)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtranslator_class, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßvisitor, πTemp001); πE != nil {
								continue
							}
							// line 566: self.visitor.retrieve_styles(self.EXTENSION)
							πF.SetLineno(566)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßEXTENSION, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßretrieve_styles, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 567: self.document.walkabout(self.visitor)
							πF.SetLineno(567)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßwalkabout, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 568: self.visitor.add_doc_title()
							πF.SetLineno(568)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßadd_doc_title, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 569: self.assemble_my_parts()
							πF.SetLineno(569)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßassemble_my_parts, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 570: self.output = self.parts['whole']
							πF.SetLineno(570)
							πTemp001 = ßwhole.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßparts, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßoutput, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtranslate.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 572: def assemble_my_parts(self):
					πF.SetLineno(572)
					πTemp012 = make([]πg.Param, 1)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("assemble_my_parts", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µf *πg.Object = πg.UnboundLocal
						_ = µf
						var µzfile *πg.Object = πg.UnboundLocal
						_ = µzfile
						var µcontent *πg.Object = πg.UnboundLocal
						_ = µcontent
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var µlanguage_code *πg.Object = πg.UnboundLocal
						_ = µlanguage_code
						var µregion_code *πg.Object = πg.UnboundLocal
						_ = µregion_code
						var µlanguage_ids *πg.Object = πg.UnboundLocal
						_ = µlanguage_ids
						var µsubtag *πg.Object = πg.UnboundLocal
						_ = µsubtag
						var µrcode *πg.Object = πg.UnboundLocal
						_ = µrcode
						var µupdated *πg.Object = πg.UnboundLocal
						_ = µupdated
						var µnew_dom_styles *πg.Object = πg.UnboundLocal
						_ = µnew_dom_styles
						var µupdated_node *πg.Object = πg.UnboundLocal
						_ = µupdated_node
						var µwhole *πg.Object = πg.UnboundLocal
						_ = µwhole
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 *πg.BaseException
						_ = πTemp010
						var πTemp011 *πg.Traceback
						_ = πTemp011
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 3:
								goto Label3
							case 4:
								goto Label4
							case 13:
								goto Label13
							default:
								panic("unexpected function state")
							}
							// line 573: """Assemble the `self.parts` dictionary.  Extend in subclasses.
							πF.SetLineno(573)
							// line 575: writers.Writer.assemble_parts(self)
							πF.SetLineno(575)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßwriters); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßWriter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßassemble_parts, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 576: f = tempfile.NamedTemporaryFile()
							πF.SetLineno(576)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtempfile); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßNamedTemporaryFile, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µf = πTemp002
							// line 577: zfile = zipfile.ZipFile(f, 'w', zipfile.ZIP_DEFLATED)
							πF.SetLineno(577)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µf, "f"); πE != nil {
								continue
							}
							πTemp001[0] = µf
							πTemp001[1] = ßw.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßzipfile); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßZIP_DEFLATED, nil); πE != nil {
								continue
							}
							πTemp001[2] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßzipfile); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßZipFile, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µzfile = πTemp002
							// line 578: self.write_zip_str(
							πF.SetLineno(578)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							πTemp001[0] = µzfile
							πTemp001[1] = ßmimetype.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßMIME_TYPE, nil); πE != nil {
								continue
							}
							πTemp001[2] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßzipfile); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßZIP_STORED, nil); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"compress_type", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwrite_zip_str, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 581: content = self.visitor.content_astext()
							πF.SetLineno(581)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcontent_astext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µcontent = πTemp002
							// line 582: self.write_zip_str(zfile, 'content.xml', content)
							πF.SetLineno(582)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							πTemp001[0] = µzfile
							πTemp001[1] = πg.NewStr("content.xml").ToObject()
							if πE = πg.CheckLocal(πF, µcontent, "content"); πE != nil {
								continue
							}
							πTemp001[2] = µcontent
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwrite_zip_str, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 583: s1 = self.create_manifest()
							πF.SetLineno(583)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcreate_manifest, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µs1 = πTemp003
							// line 584: self.write_zip_str(zfile, 'META-INF/manifest.xml', s1)
							πF.SetLineno(584)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							πTemp001[0] = µzfile
							πTemp001[1] = πg.NewStr("META-INF/manifest.xml").ToObject()
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πTemp001[2] = µs1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwrite_zip_str, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 585: s1 = self.create_meta()
							πF.SetLineno(585)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcreate_meta, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µs1 = πTemp003
							// line 586: self.write_zip_str(zfile, 'meta.xml', s1)
							πF.SetLineno(586)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							πTemp001[0] = µzfile
							πTemp001[1] = πg.NewStr("meta.xml").ToObject()
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πTemp001[2] = µs1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwrite_zip_str, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 587: s1 = self.get_stylesheet()
							πF.SetLineno(587)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßget_stylesheet, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µs1 = πTemp003
							// line 592: language_code = None
							πF.SetLineno(592)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µlanguage_code = πTemp002
							// line 593: region_code = None
							πF.SetLineno(593)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µregion_code = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßlanguage_code, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 594: if self.visitor.language_code:
							πF.SetLineno(594)
						Label1:
							// line 595: language_ids = self.visitor.language_code.replace('_', '-')
							πF.SetLineno(595)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ß_.ToObject()
							πTemp001[1] = πg.NewStr("-").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßlanguage_code, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µlanguage_ids = πTemp003
							// line 596: language_ids = language_ids.split('-')
							πF.SetLineno(596)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("-").ToObject()
							if πE = πg.CheckLocal(πF, µlanguage_ids, "language_ids"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µlanguage_ids, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µlanguage_ids = πTemp003
							// line 598: language_code = language_ids[0].lower()
							πF.SetLineno(598)
							πTemp002 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µlanguage_ids, "language_ids"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µlanguage_ids, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßlower, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µlanguage_code = πTemp003
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(1).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µlanguage_ids, "language_ids"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, µlanguage_ids, πTemp003); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, πTemp006); πE != nil {
								continue
							}
							πF.PushCheckpoint(4)
							πTemp005 = false
						Label3:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label5
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µsubtag = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(3)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsubtag, "subtag"); πE != nil {
								continue
							}
							πTemp001[0] = µsubtag
							if πTemp008, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp008.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp006, πE = πg.Eq(πF, πTemp009, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp006
							if πTemp007, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if !πTemp007 {
								goto Label6
							}
							if πE = πg.CheckLocal(πF, µsubtag, "subtag"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µsubtag, ßisalpha, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πTemp008
						Label6:
							if πTemp007, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label7
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsubtag, "subtag"); πE != nil {
								continue
							}
							πTemp001[0] = µsubtag
							if πTemp006, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp003, πE = πg.Eq(πF, πTemp008, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label8
							}
							goto Label9
							// line 601: if len(subtag) == 2 and subtag.isalpha():
							πF.SetLineno(601)
						Label7:
							// line 602: region_code = subtag.upper()
							πF.SetLineno(602)
							if πE = πg.CheckLocal(πF, µsubtag, "subtag"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µsubtag, ßupper, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µregion_code = πTemp006
							// line 603: break
							πF.SetLineno(603)
							πTemp005 = true
							continue
							goto Label9
							// line 604: elif len(subtag) == 1:
							πF.SetLineno(604)
						Label8:
							// line 605: break   # 1-letter tag is never before valid region tag
							πF.SetLineno(605)
							πTemp005 = true
							continue
							goto Label9
						Label9:
							continue
						Label4:
							if πE != nil || πR != nil {
								continue
							}
						Label5:
							if πE = πg.CheckLocal(πF, µregion_code, "region_code"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µregion_code == πTemp003).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label10
							}
							goto Label11
							// line 606: if region_code is None:
							πF.SetLineno(606)
						Label10:
							// line 607: try:
							πF.SetLineno(607)
							πF.PushCheckpoint(13)
							// line 608: rcode = locale.normalize(language_code)
							πF.SetLineno(608)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							πTemp001[0] = µlanguage_code
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlocale); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßnormalize, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µrcode = πTemp002
							πF.PopCheckpoint()
							goto Label12
						Label13:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp010, πTemp011 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNameError); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsInstance(πF, πTemp010.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label14
							}
							πE = πF.Raise(πTemp010.ToObject(), nil, πTemp011.ToObject())
							continue
							// line 609: except NameError:
							πF.SetLineno(609)
						Label14:
							// line 610: rcode = language_code
							πF.SetLineno(610)
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							µrcode = µlanguage_code
							πF.RestoreExc(nil, nil)
							goto Label12
						Label12:
							// line 611: rcode = rcode.split('_')
							πF.SetLineno(611)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ß_.ToObject()
							if πE = πg.CheckLocal(πF, µrcode, "rcode"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µrcode, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µrcode = πTemp003
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µrcode, "rcode"); πE != nil {
								continue
							}
							πTemp001[0] = µrcode
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.GT(πF, πTemp006, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label15
							}
							goto Label16
							// line 612: if len(rcode) > 1:
							πF.SetLineno(612)
						Label15:
							// line 613: rcode = rcode[1].split('.')
							πF.SetLineno(613)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr(".").ToObject()
							πTemp002 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µrcode, "rcode"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µrcode, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µrcode = πTemp003
							// line 614: region_code = rcode[0]
							πF.SetLineno(614)
							πTemp002 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µrcode, "rcode"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µrcode, πTemp002); πE != nil {
								continue
							}
							µregion_code = πTemp003
							goto Label16
						Label16:
							if πE = πg.CheckLocal(πF, µregion_code, "region_code"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µregion_code == πTemp003).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label17
							}
							goto Label18
							// line 615: if region_code is None:
							πF.SetLineno(615)
						Label17:
							// line 616: self.document.reporter.warning(
							πF.SetLineno(616)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("invalid language-region.\n  Could not find region with locale.normalize().\n  Please specify both language and region (ll-RR).\n  Examples: es-MX (Spanish, Mexico),\n  en-AU (English, Australia).").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label18
						Label18:
							goto Label11
						Label11:
							goto Label2
						Label2:
							// line 626: updated, new_dom_styles, updated_node = self.update_stylesheet(
							πF.SetLineno(626)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget_dom_stylesheet, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							πTemp001[1] = µlanguage_code
							if πE = πg.CheckLocal(πF, µregion_code, "region_code"); πE != nil {
								continue
							}
							πTemp001[2] = µregion_code
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßupdate_stylesheet, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp008}}}, πTemp003); πE != nil {
								continue
							}
							µupdated = πTemp002
							µnew_dom_styles = πTemp006
							µupdated_node = πTemp008
							if πE = πg.CheckLocal(πF, µupdated, "updated"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, µupdated); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label19
							}
							goto Label20
							// line 628: if updated:
							πF.SetLineno(628)
						Label19:
							// line 629: s1 = etree.tostring(new_dom_styles)
							πF.SetLineno(629)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnew_dom_styles, "new_dom_styles"); πE != nil {
								continue
							}
							πTemp001[0] = µnew_dom_styles
							if πTemp002, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßtostring, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µs1 = πTemp002
							goto Label20
						Label20:
							// line 630: self.write_zip_str(zfile, 'styles.xml', s1)
							πF.SetLineno(630)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							πTemp001[0] = µzfile
							πTemp001[1] = πg.NewStr("styles.xml").ToObject()
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πTemp001[2] = µs1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwrite_zip_str, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 631: self.store_embedded_files(zfile)
							πF.SetLineno(631)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							πTemp001[0] = µzfile
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßstore_embedded_files, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 632: self.copy_from_stylesheet(zfile)
							πF.SetLineno(632)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							πTemp001[0] = µzfile
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcopy_from_stylesheet, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 633: zfile.close()
							πF.SetLineno(633)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µzfile, ßclose, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 634: f.seek(0)
							πF.SetLineno(634)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µf, "f"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µf, ßseek, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 635: whole = f.read()
							πF.SetLineno(635)
							if πE = πg.CheckLocal(πF, µf, "f"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µf, ßread, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µwhole = πTemp003
							// line 636: f.close()
							πF.SetLineno(636)
							if πE = πg.CheckLocal(πF, µf, "f"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µf, ßclose, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 637: self.parts['whole'] = whole
							πF.SetLineno(637)
							if πE = πg.CheckLocal(πF, µwhole, "whole"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µwhole); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparts, nil); πE != nil {
								continue
							}
							πTemp006 = ßwhole.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp006, πTemp002); πE != nil {
								continue
							}
							// line 638: self.parts['encoding'] = self.document.settings.output_encoding
							πF.SetLineno(638)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßoutput_encoding, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßparts, nil); πE != nil {
								continue
							}
							πTemp008 = ßencoding.ToObject()
							if πE = πg.SetItem(πF, πTemp006, πTemp008, πTemp003); πE != nil {
								continue
							}
							// line 639: self.parts['version'] = docutils.__version__
							πF.SetLineno(639)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ß__version__, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßparts, nil); πE != nil {
								continue
							}
							πTemp008 = ßversion.ToObject()
							if πE = πg.SetItem(πF, πTemp006, πTemp008, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassemble_my_parts.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 573: """Assemble the `self.parts` dictionary.  Extend in subclasses.
					πF.SetLineno(573)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp007}, πg.NewStr("Assemble the `self.parts` dictionary.  Extend in subclasses.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßassemble_my_parts); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp008, ß__doc__, πTemp007); πE != nil {
						continue
					}
					// line 641: def update_stylesheet(self, stylesheet_root, language_code, region_code):
					πF.SetLineno(641)
					πTemp012 = make([]πg.Param, 4)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp012[1] = πg.Param{Name: "stylesheet_root", Def: nil}
					πTemp012[2] = πg.Param{Name: "language_code", Def: nil}
					πTemp012[3] = πg.Param{Name: "region_code", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("update_stylesheet", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µstylesheet_root *πg.Object = πArgs[1]
						_ = µstylesheet_root
						var µlanguage_code *πg.Object = πArgs[2]
						_ = µlanguage_code
						var µregion_code *πg.Object = πArgs[3]
						_ = µregion_code
						var µupdated *πg.Object = πg.UnboundLocal
						_ = µupdated
						var µmodified_nodes *πg.Object = πg.UnboundLocal
						_ = µmodified_nodes
						var µn1 *πg.Object = πg.UnboundLocal
						_ = µn1
						var µn2_nodes *πg.Object = πg.UnboundLocal
						_ = µn2_nodes
						var µnode *πg.Object = πg.UnboundLocal
						_ = µnode
						var µfamily *πg.Object = πg.UnboundLocal
						_ = µfamily
						var µn3 *πg.Object = πg.UnboundLocal
						_ = µn3
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 8:
								goto Label8
							case 9:
								goto Label9
							default:
								panic("unexpected function state")
							}
							// line 642: """Update xml style sheet element with language and region/country."""
							πF.SetLineno(642)
							// line 643: updated = False
							πF.SetLineno(643)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							µupdated = πTemp001
							// line 644: modified_nodes = set()
							πF.SetLineno(644)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßset); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µmodified_nodes = πTemp002
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µlanguage_code != πTemp004).ToObject()
							πTemp001 = πTemp002
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µregion_code, "region_code"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µregion_code != πTemp004).ToObject()
							πTemp001 = πTemp002
						Label1:
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label2
							}
							goto Label3
							// line 645: if language_code is not None or region_code is not None:
							πF.SetLineno(645)
						Label2:
							// line 646: n1 = stylesheet_root.find(
							πF.SetLineno(646)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:office:1.0}styles").ToObject()
							if πE = πg.CheckLocal(πF, µstylesheet_root, "stylesheet_root"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µstylesheet_root, ßfind, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µn1 = πTemp002
							if πE = πg.CheckLocal(πF, µn1, "n1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µn1 == πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label4
							}
							goto Label5
							// line 649: if n1 is None:
							πF.SetLineno(649)
						Label4:
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("Cannot find 'styles' element in styles.odt/styles.xml").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßRuntimeError); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 650: raise RuntimeError(
							πF.SetLineno(650)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
							goto Label5
						Label5:
							// line 652: n2_nodes = n1.findall(
							πF.SetLineno(652)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:style:1.0}default-style").ToObject()
							if πE = πg.CheckLocal(πF, µn1, "n1"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µn1, ßfindall, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µn2_nodes = πTemp002
							if πE = πg.CheckLocal(πF, µn2_nodes, "n2_nodes"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, µn2_nodes); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label6
							}
							goto Label7
							// line 655: if not n2_nodes:
							πF.SetLineno(655)
						Label6:
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("Cannot find 'default-style' element in styles.xml").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßRuntimeError); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 656: raise RuntimeError(
							πF.SetLineno(656)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
							goto Label7
						Label7:
							if πE = πg.CheckLocal(πF, µn2_nodes, "n2_nodes"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µn2_nodes); πE != nil {
								continue
							}
							πF.PushCheckpoint(9)
							πTemp003 = false
						Label8:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp003 {
								πF.PopCheckpoint()
								goto Label10
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µnode = πTemp002
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(8)
							// line 660: family = node.attrib.get(
							πF.SetLineno(660)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:style:1.0}family").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattrib, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µfamily = πTemp002
							if πE = πg.CheckLocal(πF, µfamily, "family"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Eq(πF, µfamily, ßparagraph.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp004
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label11
							}
							if πE = πg.CheckLocal(πF, µfamily, "family"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Eq(πF, µfamily, ßgraphic.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp004
						Label11:
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label12
							}
							goto Label13
							// line 663: if family == 'paragraph' or family == 'graphic':
							πF.SetLineno(663)
						Label12:
							// line 664: n3 = node.find(
							πF.SetLineno(664)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:style:1.0}text-properties").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßfind, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µn3 = πTemp004
							if πE = πg.CheckLocal(πF, µn3, "n3"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µn3 == πTemp004).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label14
							}
							goto Label15
							// line 667: if n3 is None:
							πF.SetLineno(667)
						Label14:
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("Cannot find 'text-properties' element in styles.xml").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßRuntimeError); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 668: raise RuntimeError(
							πF.SetLineno(668)
							πE = πF.Raise(πTemp004, nil, nil)
							continue
							goto Label15
						Label15:
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µlanguage_code != πTemp004).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label16
							}
							goto Label17
							// line 671: if language_code is not None:
							πF.SetLineno(671)
						Label16:
							// line 672: n3.attrib[
							πF.SetLineno(672)
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µlanguage_code); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µn3, "n3"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µn3, ßattrib, nil); πE != nil {
								continue
							}
							πTemp007 = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0}language").ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp007, πTemp002); πE != nil {
								continue
							}
							// line 675: n3.attrib[
							πF.SetLineno(675)
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µlanguage_code); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µn3, "n3"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µn3, ßattrib, nil); πE != nil {
								continue
							}
							πTemp007 = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:style:1.0}language-complex").ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp007, πTemp002); πE != nil {
								continue
							}
							// line 678: updated = True
							πF.SetLineno(678)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							µupdated = πTemp002
							// line 679: modified_nodes.add(n3)
							πF.SetLineno(679)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µn3, "n3"); πE != nil {
								continue
							}
							πTemp005[0] = µn3
							if πE = πg.CheckLocal(πF, µmodified_nodes, "modified_nodes"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmodified_nodes, ßadd, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label17
						Label17:
							if πE = πg.CheckLocal(πF, µregion_code, "region_code"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µregion_code != πTemp004).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label18
							}
							goto Label19
							// line 680: if region_code is not None:
							πF.SetLineno(680)
						Label18:
							// line 681: n3.attrib[
							πF.SetLineno(681)
							if πE = πg.CheckLocal(πF, µregion_code, "region_code"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µregion_code); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µn3, "n3"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µn3, ßattrib, nil); πE != nil {
								continue
							}
							πTemp007 = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0}country").ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp007, πTemp002); πE != nil {
								continue
							}
							// line 684: n3.attrib[
							πF.SetLineno(684)
							if πE = πg.CheckLocal(πF, µregion_code, "region_code"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µregion_code); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µn3, "n3"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µn3, ßattrib, nil); πE != nil {
								continue
							}
							πTemp007 = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:style:1.0}country-complex").ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp007, πTemp002); πE != nil {
								continue
							}
							// line 687: updated = True
							πF.SetLineno(687)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							µupdated = πTemp002
							// line 688: modified_nodes.add(n3)
							πF.SetLineno(688)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µn3, "n3"); πE != nil {
								continue
							}
							πTemp005[0] = µn3
							if πE = πg.CheckLocal(πF, µmodified_nodes, "modified_nodes"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmodified_nodes, ßadd, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label19
						Label19:
							goto Label13
						Label13:
							continue
						Label9:
							if πE != nil || πR != nil {
								continue
							}
						Label10:
							goto Label3
						Label3:
							// line 689: return updated, stylesheet_root, modified_nodes
							πF.SetLineno(689)
							if πE = πg.CheckLocal(πF, µupdated, "updated"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µstylesheet_root, "stylesheet_root"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmodified_nodes, "modified_nodes"); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple3(µupdated, µstylesheet_root, µmodified_nodes).ToObject()
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßupdate_stylesheet.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 642: """Update xml style sheet element with language and region/country."""
					πF.SetLineno(642)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp008}, πg.NewStr("Update xml style sheet element with language and region/country.").ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßupdate_stylesheet); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp009, ß__doc__, πTemp008); πE != nil {
						continue
					}
					// line 691: def write_zip_str(
					πF.SetLineno(691)
					πTemp012 = make([]πg.Param, 5)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp012[1] = πg.Param{Name: "zfile", Def: nil}
					πTemp012[2] = πg.Param{Name: "name", Def: nil}
					πTemp012[3] = πg.Param{Name: "bytes", Def: nil}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßzipfile); πE != nil {
						continue
					}
					if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßZIP_DEFLATED, nil); πE != nil {
						continue
					}
					πTemp012[4] = πg.Param{Name: "compress_type", Def: πTemp011}
					πTemp008 = πg.NewFunction(πg.NewCode("write_zip_str", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µzfile *πg.Object = πArgs[1]
						_ = µzfile
						var µname *πg.Object = πArgs[2]
						_ = µname
						var µbytes *πg.Object = πArgs[3]
						_ = µbytes
						var µcompress_type *πg.Object = πArgs[4]
						_ = µcompress_type
						var µlocaltime *πg.Object = πg.UnboundLocal
						_ = µlocaltime
						var µzinfo *πg.Object = πg.UnboundLocal
						_ = µzinfo
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 693: localtime = time.localtime(time.time())
							πF.SetLineno(693)
							πTemp001 = πF.MakeArgs(1)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßtime, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßlocaltime, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µlocaltime = πTemp002
							// line 694: zinfo = zipfile.ZipInfo(name, localtime)
							πF.SetLineno(694)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							πTemp001[0] = µname
							if πE = πg.CheckLocal(πF, µlocaltime, "localtime"); πE != nil {
								continue
							}
							πTemp001[1] = µlocaltime
							if πTemp002, πE = πg.ResolveGlobal(πF, ßzipfile); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßZipInfo, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µzinfo = πTemp002
							// line 696: zinfo.external_attr = (0x81a4 & 0xFFFF) << 16
							πF.SetLineno(696)
							if πTemp003, πE = πg.And(πF, πg.NewInt(33188).ToObject(), πg.NewInt(65535).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LShift(πF, πTemp003, πg.NewInt(16).ToObject()); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µzinfo, "zinfo"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µzinfo, ßexternal_attr, πTemp003); πE != nil {
								continue
							}
							// line 697: zinfo.compress_type = compress_type
							πF.SetLineno(697)
							if πE = πg.CheckLocal(πF, µcompress_type, "compress_type"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µcompress_type); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µzinfo, "zinfo"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µzinfo, ßcompress_type, πTemp002); πE != nil {
								continue
							}
							// line 698: zfile.writestr(zinfo, bytes)
							πF.SetLineno(698)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µzinfo, "zinfo"); πE != nil {
								continue
							}
							πTemp001[0] = µzinfo
							if πE = πg.CheckLocal(πF, µbytes, "bytes"); πE != nil {
								continue
							}
							πTemp001[1] = µbytes
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µzfile, ßwritestr, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßwrite_zip_str.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 700: def store_embedded_files(self, zfile):
					πF.SetLineno(700)
					πTemp012 = make([]πg.Param, 2)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp012[1] = πg.Param{Name: "zfile", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("store_embedded_files", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µzfile *πg.Object = πArgs[1]
						_ = µzfile
						var µembedded_files *πg.Object = πg.UnboundLocal
						_ = µembedded_files
						var µsource *πg.Object = πg.UnboundLocal
						_ = µsource
						var µdestination *πg.Object = πg.UnboundLocal
						_ = µdestination
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.BaseException
						_ = πTemp008
						var πTemp009 *πg.Traceback
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							case 7:
								goto Label7
							default:
								panic("unexpected function state")
							}
							// line 701: embedded_files = self.visitor.get_embedded_file_list()
							πF.SetLineno(701)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßget_embedded_file_list, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µembedded_files = πTemp001
							if πE = πg.CheckLocal(πF, µembedded_files, "embedded_files"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µembedded_files); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp003 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp003 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp004 = !isStop
							} else {
								πTemp004 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}}}, πTemp002); πE != nil {
									continue
								}
								µsource = πTemp005
								µdestination = πTemp006
							}
							if πE != nil || !πTemp004 {
								continue
							}
							πF.PushCheckpoint(1)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µsource == πTemp005).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 703: if source is None:
							πF.SetLineno(703)
						Label4:
							// line 704: continue
							πF.SetLineno(704)
							continue
							goto Label5
						Label5:
							// line 705: try:
							πF.SetLineno(705)
							πF.PushCheckpoint(7)
							// line 706: zfile.write(source, destination)
							πF.SetLineno(706)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp007[0] = µsource
							if πE = πg.CheckLocal(πF, µdestination, "destination"); πE != nil {
								continue
							}
							πTemp007[1] = µdestination
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µzfile, ßwrite, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πF.PopCheckpoint()
							goto Label6
						Label7:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp008, πTemp009 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßOSError); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsInstance(πF, πTemp008.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label8
							}
							πE = πF.Raise(πTemp008.ToObject(), nil, πTemp009.ToObject())
							continue
							// line 707: except OSError:
							πF.SetLineno(707)
						Label8:
							// line 708: self.document.reporter.warning(
							πF.SetLineno(708)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple1(µsource).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("Can't open file %s.").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp007[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp005, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πF.RestoreExc(nil, nil)
							goto Label6
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßstore_embedded_files.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 711: def get_settings(self):
					πF.SetLineno(711)
					πTemp012 = make([]πg.Param, 1)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp011 = πg.NewFunction(πg.NewCode("get_settings", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µstylespath *πg.Object = πg.UnboundLocal
						_ = µstylespath
						var µzfile *πg.Object = πg.UnboundLocal
						_ = µzfile
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 712: """
							πF.SetLineno(712)
							// line 715: stylespath = self.settings.stylesheet
							πF.SetLineno(715)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßstylesheet, nil); πE != nil {
								continue
							}
							µstylespath = πTemp002
							// line 716: zfile = zipfile.ZipFile(stylespath, 'r')
							πF.SetLineno(716)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µstylespath, "stylespath"); πE != nil {
								continue
							}
							πTemp003[0] = µstylespath
							πTemp003[1] = ßr.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßzipfile); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßZipFile, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µzfile = πTemp001
							// line 717: s1 = zfile.read('settings.xml')
							πF.SetLineno(717)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("settings.xml").ToObject()
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µzfile, ßread, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µs1 = πTemp002
							// line 718: zfile.close()
							πF.SetLineno(718)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µzfile, ßclose, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 719: return s1
							πF.SetLineno(719)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πR = µs1
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_settings.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 712: """
					πF.SetLineno(712)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp013}, πg.NewStr("\n        modeled after get_stylesheet\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp014, πE = πg.ResolveClass(πF, πClass, nil, ßget_settings); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp014, ß__doc__, πTemp013); πE != nil {
						continue
					}
					// line 721: def get_stylesheet(self):
					πF.SetLineno(721)
					πTemp012 = make([]πg.Param, 1)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("get_stylesheet", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 722: """Get the stylesheet from the visitor.
							πF.SetLineno(722)
							// line 725: s1 = self.visitor.setup_page()
							πF.SetLineno(725)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßsetup_page, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µs1 = πTemp001
							// line 726: return s1
							πF.SetLineno(726)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πR = µs1
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_stylesheet.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 722: """Get the stylesheet from the visitor.
					πF.SetLineno(722)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp014}, πg.NewStr("Get the stylesheet from the visitor.\n        Ask the visitor to setup the page.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp015, πE = πg.ResolveClass(πF, πClass, nil, ßget_stylesheet); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp015, ß__doc__, πTemp014); πE != nil {
						continue
					}
					// line 728: def copy_from_stylesheet(self, outzipfile):
					πF.SetLineno(728)
					πTemp012 = make([]πg.Param, 2)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp012[1] = πg.Param{Name: "outzipfile", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("copy_from_stylesheet", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µoutzipfile *πg.Object = πArgs[1]
						_ = µoutzipfile
						var µstylespath *πg.Object = πg.UnboundLocal
						_ = µstylespath
						var µinzipfile *πg.Object = πg.UnboundLocal
						_ = µinzipfile
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var µnamelist *πg.Object = πg.UnboundLocal
						_ = µnamelist
						var µname *πg.Object = πg.UnboundLocal
						_ = µname
						var µimageobj *πg.Object = πg.UnboundLocal
						_ = µimageobj
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 729: """Copy images, settings, etc from the stylesheet doc into target doc.
							πF.SetLineno(729)
							// line 731: stylespath = self.settings.stylesheet
							πF.SetLineno(731)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßstylesheet, nil); πE != nil {
								continue
							}
							µstylespath = πTemp002
							// line 732: inzipfile = zipfile.ZipFile(stylespath, 'r')
							πF.SetLineno(732)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µstylespath, "stylespath"); πE != nil {
								continue
							}
							πTemp003[0] = µstylespath
							πTemp003[1] = ßr.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßzipfile); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßZipFile, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µinzipfile = πTemp001
							// line 734: s1 = inzipfile.read('settings.xml')
							πF.SetLineno(734)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("settings.xml").ToObject()
							if πE = πg.CheckLocal(πF, µinzipfile, "inzipfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µinzipfile, ßread, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µs1 = πTemp002
							// line 735: self.write_zip_str(outzipfile, 'settings.xml', s1)
							πF.SetLineno(735)
							πTemp003 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µoutzipfile, "outzipfile"); πE != nil {
								continue
							}
							πTemp003[0] = µoutzipfile
							πTemp003[1] = πg.NewStr("settings.xml").ToObject()
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πTemp003[2] = µs1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßwrite_zip_str, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 737: namelist = inzipfile.namelist()
							πF.SetLineno(737)
							if πE = πg.CheckLocal(πF, µinzipfile, "inzipfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µinzipfile, ßnamelist, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µnamelist = πTemp002
							if πE = πg.CheckLocal(πF, µnamelist, "namelist"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µnamelist); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µname = πTemp002
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("Pictures/").ToObject()
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µname, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp005, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							goto Label5
							// line 739: if name.startswith('Pictures/'):
							πF.SetLineno(739)
						Label4:
							// line 740: imageobj = inzipfile.read(name)
							πF.SetLineno(740)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							πTemp003[0] = µname
							if πE = πg.CheckLocal(πF, µinzipfile, "inzipfile"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µinzipfile, ßread, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µimageobj = πTemp006
							// line 741: outzipfile.writestr(name, imageobj)
							πF.SetLineno(741)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							πTemp003[0] = µname
							if πE = πg.CheckLocal(πF, µimageobj, "imageobj"); πE != nil {
								continue
							}
							πTemp003[1] = µimageobj
							if πE = πg.CheckLocal(πF, µoutzipfile, "outzipfile"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µoutzipfile, ßwritestr, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 742: inzipfile.close()
							πF.SetLineno(742)
							if πE = πg.CheckLocal(πF, µinzipfile, "inzipfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µinzipfile, ßclose, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßcopy_from_stylesheet.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 729: """Copy images, settings, etc from the stylesheet doc into target doc.
					πF.SetLineno(729)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp015}, πg.NewStr("Copy images, settings, etc from the stylesheet doc into target doc.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp016, πE = πg.ResolveClass(πF, πClass, nil, ßcopy_from_stylesheet); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp016, ß__doc__, πTemp015); πE != nil {
						continue
					}
					// line 744: def assemble_parts(self):
					πF.SetLineno(744)
					πTemp012 = make([]πg.Param, 1)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("assemble_parts", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 745: pass
							πF.SetLineno(745)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassemble_parts.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 747: def create_manifest(self):
					πF.SetLineno(747)
					πTemp012 = make([]πg.Param, 1)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("create_manifest", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µroot *πg.Object = πg.UnboundLocal
						_ = µroot
						var µdoc *πg.Object = πg.UnboundLocal
						_ = µdoc
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 748: root = Element(
							πF.SetLineno(748)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("manifest:manifest").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMANIFEST_NAMESPACE_ATTRIB); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMANIFEST_NAMESPACE_DICT); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µroot = πTemp003
							// line 753: doc = etree.ElementTree(root)
							πF.SetLineno(753)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							if πTemp002, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßElementTree, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdoc = πTemp002
							// line 754: SubElement(root, 'manifest:file-entry', attrib={
							πF.SetLineno(754)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("manifest:file-entry").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßMIME_TYPE, nil); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:media-type").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:full-path").ToObject(), πg.NewStr("/").ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMANNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 758: SubElement(root, 'manifest:file-entry', attrib={
							πF.SetLineno(758)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("manifest:file-entry").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:media-type").ToObject(), πg.NewStr("text/xml").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:full-path").ToObject(), πg.NewStr("content.xml").ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMANNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 762: SubElement(root, 'manifest:file-entry', attrib={
							πF.SetLineno(762)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("manifest:file-entry").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:media-type").ToObject(), πg.NewStr("text/xml").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:full-path").ToObject(), πg.NewStr("styles.xml").ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMANNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 766: SubElement(root, 'manifest:file-entry', attrib={
							πF.SetLineno(766)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("manifest:file-entry").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:media-type").ToObject(), πg.NewStr("text/xml").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:full-path").ToObject(), πg.NewStr("settings.xml").ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMANNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 770: SubElement(root, 'manifest:file-entry', attrib={
							πF.SetLineno(770)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("manifest:file-entry").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:media-type").ToObject(), πg.NewStr("text/xml").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("manifest:full-path").ToObject(), πg.NewStr("meta.xml").ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMANNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 774: s1 = ToString(doc)
							πF.SetLineno(774)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdoc, "doc"); πE != nil {
								continue
							}
							πTemp001[0] = µdoc
							if πTemp002, πE = πg.ResolveGlobal(πF, ßToString); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µs1 = πTemp003
							// line 775: doc = minidom.parseString(s1)
							πF.SetLineno(775)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πTemp001[0] = µs1
							if πTemp002, πE = πg.ResolveGlobal(πF, ßminidom); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßparseString, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdoc = πTemp002
							// line 776: s1 = doc.toprettyxml('  ')
							πF.SetLineno(776)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("  ").ToObject()
							if πE = πg.CheckLocal(πF, µdoc, "doc"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdoc, ßtoprettyxml, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µs1 = πTemp003
							// line 777: return s1
							πF.SetLineno(777)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πR = µs1
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßcreate_manifest.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 779: def create_meta(self):
					πF.SetLineno(779)
					πTemp012 = make([]πg.Param, 1)
					πTemp012[0] = πg.Param{Name: "self", Def: nil}
					πTemp017 = πg.NewFunction(πg.NewCode("create_meta", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µroot *πg.Object = πg.UnboundLocal
						_ = µroot
						var µdoc *πg.Object = πg.UnboundLocal
						_ = µdoc
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var µs2 *πg.Object = πg.UnboundLocal
						_ = µs2
						var µtitle *πg.Object = πg.UnboundLocal
						_ = µtitle
						var µmeta_dict *πg.Object = πg.UnboundLocal
						_ = µmeta_dict
						var µkeywordstr *πg.Object = πg.UnboundLocal
						_ = µkeywordstr
						var µkeywords *πg.Object = πg.UnboundLocal
						_ = µkeywords
						var µkeyword *πg.Object = πg.UnboundLocal
						_ = µkeyword
						var µdescription *πg.Object = πg.UnboundLocal
						_ = µdescription
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 6:
								goto Label6
							case 7:
								goto Label7
							default:
								panic("unexpected function state")
							}
							// line 780: root = Element(
							πF.SetLineno(780)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("office:document-meta").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETA_NAMESPACE_ATTRIB); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMETA_NAMESPACE_DICT); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µroot = πTemp003
							// line 785: doc = etree.ElementTree(root)
							πF.SetLineno(785)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							if πTemp002, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßElementTree, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdoc = πTemp002
							// line 786: root = SubElement(root, 'office:meta', nsdict=METNSD)
							πF.SetLineno(786)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("office:meta").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µroot = πTemp003
							// line 787: el1 = SubElement(root, 'meta:generator', nsdict=METNSD)
							πF.SetLineno(787)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("meta:generator").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 788: el1.text = 'Docutils/rst2odf.py/%s' % (VERSION, )
							πF.SetLineno(788)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßVERSION); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp005).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("Docutils/rst2odf.py/%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp003); πE != nil {
								continue
							}
							// line 789: s1 = os.environ.get('USER', '')
							πF.SetLineno(789)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ßUSER.ToObject()
							πTemp001[1] = ß.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßenviron, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µs1 = πTemp003
							// line 790: el1 = SubElement(root, 'meta:initial-creator', nsdict=METNSD)
							πF.SetLineno(790)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("meta:initial-creator").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 791: el1.text = s1
							πF.SetLineno(791)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µs1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 792: s2 = time.strftime('%Y-%m-%dT%H:%M:%S', time.localtime())
							πF.SetLineno(792)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("%Y-%m-%dT%H:%M:%S").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßlocaltime, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßtime); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßstrftime, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µs2 = πTemp002
							// line 793: el1 = SubElement(root, 'meta:creation-date', nsdict=METNSD)
							πF.SetLineno(793)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("meta:creation-date").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 794: el1.text = s2
							πF.SetLineno(794)
							if πE = πg.CheckLocal(πF, µs2, "s2"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µs2); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 795: el1 = SubElement(root, 'dc:creator', nsdict=METNSD)
							πF.SetLineno(795)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("dc:creator").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 796: el1.text = s1
							πF.SetLineno(796)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µs1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 797: el1 = SubElement(root, 'dc:date', nsdict=METNSD)
							πF.SetLineno(797)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("dc:date").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 798: el1.text = s2
							πF.SetLineno(798)
							if πE = πg.CheckLocal(πF, µs2, "s2"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µs2); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 799: el1 = SubElement(root, 'dc:language', nsdict=METNSD)
							πF.SetLineno(799)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("dc:language").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 800: el1.text = 'en-US'
							πF.SetLineno(800)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("en-US").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 801: el1 = SubElement(root, 'meta:editing-cycles', nsdict=METNSD)
							πF.SetLineno(801)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("meta:editing-cycles").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 802: el1.text = '1'
							πF.SetLineno(802)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ß1.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 803: el1 = SubElement(root, 'meta:editing-duration', nsdict=METNSD)
							πF.SetLineno(803)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("meta:editing-duration").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 804: el1.text = 'PT00M01S'
							πF.SetLineno(804)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ßPT00M01S.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 805: title = self.visitor.get_title()
							πF.SetLineno(805)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget_title, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtitle = πTemp002
							// line 806: el1 = SubElement(root, 'dc:title', nsdict=METNSD)
							πF.SetLineno(806)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("dc:title").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, µtitle); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 807: if title:
							πF.SetLineno(807)
						Label1:
							// line 808: el1.text = title
							πF.SetLineno(808)
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µtitle); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							goto Label3
						Label2:
							// line 810: el1.text = '[no title]'
							πF.SetLineno(810)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("[no title]").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							goto Label3
						Label3:
							// line 811: meta_dict = self.visitor.get_meta_dict()
							πF.SetLineno(811)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisitor, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget_meta_dict, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µmeta_dict = πTemp002
							// line 812: keywordstr = meta_dict.get('keywords')
							πF.SetLineno(812)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßkeywords.ToObject()
							if πE = πg.CheckLocal(πF, µmeta_dict, "meta_dict"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmeta_dict, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µkeywordstr = πTemp003
							if πE = πg.CheckLocal(πF, µkeywordstr, "keywordstr"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µkeywordstr != πTemp003).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label4
							}
							goto Label5
							// line 813: if keywordstr is not None:
							πF.SetLineno(813)
						Label4:
							// line 814: keywords = split_words(keywordstr)
							πF.SetLineno(814)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µkeywordstr, "keywordstr"); πE != nil {
								continue
							}
							πTemp001[0] = µkeywordstr
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsplit_words); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µkeywords = πTemp003
							if πE = πg.CheckLocal(πF, µkeywords, "keywords"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, µkeywords); πE != nil {
								continue
							}
							πF.PushCheckpoint(7)
							πTemp006 = false
						Label6:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label8
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µkeyword = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(6)
							// line 816: el1 = SubElement(root, 'meta:keyword', nsdict=METNSD)
							πF.SetLineno(816)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("meta:keyword").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp003},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp005
							// line 817: el1.text = keyword
							πF.SetLineno(817)
							if πE = πg.CheckLocal(πF, µkeyword, "keyword"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µkeyword); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp003); πE != nil {
								continue
							}
							continue
						Label7:
							if πE != nil || πR != nil {
								continue
							}
						Label8:
							goto Label5
						Label5:
							// line 818: description = meta_dict.get('description')
							πF.SetLineno(818)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßdescription.ToObject()
							if πE = πg.CheckLocal(πF, µmeta_dict, "meta_dict"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmeta_dict, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdescription = πTemp003
							if πE = πg.CheckLocal(πF, µdescription, "description"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µdescription != πTemp003).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label9
							}
							goto Label10
							// line 819: if description is not None:
							πF.SetLineno(819)
						Label9:
							// line 820: el1 = SubElement(root, 'dc:description', nsdict=METNSD)
							πF.SetLineno(820)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("dc:description").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßMETNSD); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 821: el1.text = description
							πF.SetLineno(821)
							if πE = πg.CheckLocal(πF, µdescription, "description"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µdescription); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							goto Label10
						Label10:
							// line 822: s1 = ToString(doc)
							πF.SetLineno(822)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdoc, "doc"); πE != nil {
								continue
							}
							πTemp001[0] = µdoc
							if πTemp002, πE = πg.ResolveGlobal(πF, ßToString); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µs1 = πTemp003
							// line 825: return s1
							πF.SetLineno(825)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πR = µs1
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßcreate_meta.ToObject(), πTemp017); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp016, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp016 == nil {
				πTemp016 = πg.TypeType.ToObject()
			}
			if πTemp017, πE = πTemp016.Call(πF, []*πg.Object{πg.NewStr("Writer").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßWriter.ToObject(), πTemp017); πE != nil {
				continue
			}
			// line 829: class ODFTranslator(nodes.GenericNodeVisitor):
			πF.SetLineno(829)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp017, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
				continue
			}
			if πTemp019, πE = πg.GetAttr(πF, πTemp017, ßGenericNodeVisitor, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp019
			πTemp008 = πg.NewDict()
			if πTemp015, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp015); πE != nil {
				continue
			}
			_, πE = πg.NewCode("ODFTranslator", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 []πg.Param
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 []*πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				var πTemp020 *πg.Object
				_ = πTemp020
				var πTemp021 *πg.Object
				_ = πTemp021
				var πTemp022 *πg.Object
				_ = πTemp022
				var πTemp023 *πg.Object
				_ = πTemp023
				var πTemp024 *πg.Object
				_ = πTemp024
				var πTemp025 *πg.Object
				_ = πTemp025
				var πTemp026 *πg.Object
				_ = πTemp026
				var πTemp027 *πg.Object
				_ = πTemp027
				var πTemp028 *πg.Object
				_ = πTemp028
				var πTemp029 *πg.Object
				_ = πTemp029
				var πTemp030 *πg.Object
				_ = πTemp030
				var πTemp031 *πg.Object
				_ = πTemp031
				var πTemp032 *πg.Object
				_ = πTemp032
				var πTemp033 *πg.Object
				_ = πTemp033
				var πTemp034 *πg.Object
				_ = πTemp034
				var πTemp035 *πg.Object
				_ = πTemp035
				var πTemp036 *πg.Object
				_ = πTemp036
				var πTemp037 *πg.Object
				_ = πTemp037
				var πTemp038 *πg.Object
				_ = πTemp038
				var πTemp039 *πg.Object
				_ = πTemp039
				var πTemp040 *πg.Object
				_ = πTemp040
				var πTemp041 *πg.Object
				_ = πTemp041
				var πTemp042 *πg.Object
				_ = πTemp042
				var πTemp043 *πg.Object
				_ = πTemp043
				var πTemp044 *πg.Object
				_ = πTemp044
				var πTemp045 *πg.Object
				_ = πTemp045
				var πTemp046 *πg.Object
				_ = πTemp046
				var πTemp047 *πg.Object
				_ = πTemp047
				var πTemp048 *πg.Object
				_ = πTemp048
				var πTemp049 *πg.Object
				_ = πTemp049
				var πTemp050 *πg.Object
				_ = πTemp050
				var πTemp051 *πg.Object
				_ = πTemp051
				var πTemp052 *πg.Object
				_ = πTemp052
				var πTemp053 *πg.Object
				_ = πTemp053
				var πTemp054 *πg.Object
				_ = πTemp054
				var πTemp055 *πg.Object
				_ = πTemp055
				var πTemp056 *πg.Object
				_ = πTemp056
				var πTemp057 *πg.Object
				_ = πTemp057
				var πTemp058 *πg.Object
				_ = πTemp058
				var πTemp059 *πg.Object
				_ = πTemp059
				var πTemp060 *πg.Object
				_ = πTemp060
				var πTemp061 *πg.Object
				_ = πTemp061
				var πTemp062 *πg.Object
				_ = πTemp062
				var πTemp063 *πg.Object
				_ = πTemp063
				var πTemp064 *πg.Object
				_ = πTemp064
				var πTemp065 *πg.Object
				_ = πTemp065
				var πTemp066 *πg.Object
				_ = πTemp066
				var πTemp067 *πg.Object
				_ = πTemp067
				var πTemp068 *πg.Object
				_ = πTemp068
				var πTemp069 *πg.Object
				_ = πTemp069
				var πTemp070 *πg.Object
				_ = πTemp070
				var πTemp071 *πg.Object
				_ = πTemp071
				var πTemp072 *πg.Object
				_ = πTemp072
				var πTemp073 *πg.Object
				_ = πTemp073
				var πTemp074 *πg.Object
				_ = πTemp074
				var πTemp075 *πg.Object
				_ = πTemp075
				var πTemp076 *πg.Object
				_ = πTemp076
				var πTemp077 *πg.Object
				_ = πTemp077
				var πTemp078 *πg.Object
				_ = πTemp078
				var πTemp079 *πg.Object
				_ = πTemp079
				var πTemp080 *πg.Object
				_ = πTemp080
				var πTemp081 *πg.Object
				_ = πTemp081
				var πTemp082 *πg.Object
				_ = πTemp082
				var πTemp083 *πg.Object
				_ = πTemp083
				var πTemp084 *πg.Object
				_ = πTemp084
				var πTemp085 *πg.Object
				_ = πTemp085
				var πTemp086 *πg.Object
				_ = πTemp086
				var πTemp087 *πg.Object
				_ = πTemp087
				var πTemp088 *πg.Object
				_ = πTemp088
				var πTemp089 *πg.Object
				_ = πTemp089
				var πTemp090 *πg.Object
				_ = πTemp090
				var πTemp091 *πg.Object
				_ = πTemp091
				var πTemp092 *πg.Object
				_ = πTemp092
				var πTemp093 *πg.Object
				_ = πTemp093
				var πTemp094 *πg.Object
				_ = πTemp094
				var πTemp095 *πg.Object
				_ = πTemp095
				var πTemp096 *πg.Object
				_ = πTemp096
				var πTemp097 *πg.Object
				_ = πTemp097
				var πTemp098 *πg.Object
				_ = πTemp098
				var πTemp099 *πg.Object
				_ = πTemp099
				var πTemp100 *πg.Object
				_ = πTemp100
				var πTemp101 *πg.Object
				_ = πTemp101
				var πTemp102 *πg.Object
				_ = πTemp102
				var πTemp103 *πg.Object
				_ = πTemp103
				var πTemp104 *πg.Object
				_ = πTemp104
				var πTemp105 *πg.Object
				_ = πTemp105
				var πTemp106 *πg.Object
				_ = πTemp106
				var πTemp107 *πg.Object
				_ = πTemp107
				var πTemp108 *πg.Object
				_ = πTemp108
				var πTemp109 *πg.Object
				_ = πTemp109
				var πTemp110 *πg.Object
				_ = πTemp110
				var πTemp111 *πg.Object
				_ = πTemp111
				var πTemp112 *πg.Object
				_ = πTemp112
				var πTemp113 *πg.Object
				_ = πTemp113
				var πTemp114 *πg.Object
				_ = πTemp114
				var πTemp115 *πg.Object
				_ = πTemp115
				var πTemp116 *πg.Object
				_ = πTemp116
				var πTemp117 *πg.Object
				_ = πTemp117
				var πTemp118 *πg.Object
				_ = πTemp118
				var πTemp119 *πg.Object
				_ = πTemp119
				var πTemp120 *πg.Object
				_ = πTemp120
				var πTemp121 *πg.Object
				_ = πTemp121
				var πTemp122 *πg.Object
				_ = πTemp122
				var πTemp123 *πg.Object
				_ = πTemp123
				var πTemp124 *πg.Object
				_ = πTemp124
				var πTemp125 *πg.Object
				_ = πTemp125
				var πTemp126 *πg.Object
				_ = πTemp126
				var πTemp127 *πg.Object
				_ = πTemp127
				var πTemp128 *πg.Object
				_ = πTemp128
				var πTemp129 *πg.Object
				_ = πTemp129
				var πTemp130 *πg.Object
				_ = πTemp130
				var πTemp131 *πg.Object
				_ = πTemp131
				var πTemp132 *πg.Object
				_ = πTemp132
				var πTemp133 *πg.Object
				_ = πTemp133
				var πTemp134 *πg.Object
				_ = πTemp134
				var πTemp135 *πg.Object
				_ = πTemp135
				var πTemp136 *πg.Object
				_ = πTemp136
				var πTemp137 *πg.Object
				_ = πTemp137
				var πTemp138 *πg.Object
				_ = πTemp138
				var πTemp139 *πg.Object
				_ = πTemp139
				var πTemp140 *πg.Object
				_ = πTemp140
				var πTemp141 *πg.Object
				_ = πTemp141
				var πTemp142 *πg.Object
				_ = πTemp142
				var πTemp143 *πg.Object
				_ = πTemp143
				var πTemp144 *πg.Object
				_ = πTemp144
				var πTemp145 *πg.Object
				_ = πTemp145
				var πTemp146 *πg.Object
				_ = πTemp146
				var πTemp147 *πg.Object
				_ = πTemp147
				var πTemp148 *πg.Object
				_ = πTemp148
				var πTemp149 *πg.Object
				_ = πTemp149
				var πTemp150 *πg.Object
				_ = πTemp150
				var πTemp151 *πg.Object
				_ = πTemp151
				var πTemp152 *πg.Object
				_ = πTemp152
				var πTemp153 *πg.Object
				_ = πTemp153
				var πTemp154 *πg.Object
				_ = πTemp154
				var πTemp155 *πg.Object
				_ = πTemp155
				var πTemp156 *πg.Object
				_ = πTemp156
				var πTemp157 *πg.Object
				_ = πTemp157
				var πTemp158 *πg.Object
				_ = πTemp158
				var πTemp159 *πg.Object
				_ = πTemp159
				var πTemp160 *πg.Object
				_ = πTemp160
				var πTemp161 *πg.Object
				_ = πTemp161
				var πTemp162 *πg.Object
				_ = πTemp162
				var πTemp163 *πg.Object
				_ = πTemp163
				var πTemp164 *πg.Object
				_ = πTemp164
				var πTemp165 *πg.Object
				_ = πTemp165
				var πTemp166 *πg.Object
				_ = πTemp166
				var πTemp167 *πg.Object
				_ = πTemp167
				var πTemp168 *πg.Object
				_ = πTemp168
				var πTemp169 *πg.Object
				_ = πTemp169
				var πTemp170 *πg.Object
				_ = πTemp170
				var πTemp171 *πg.Object
				_ = πTemp171
				var πTemp172 *πg.Object
				_ = πTemp172
				var πTemp173 *πg.Object
				_ = πTemp173
				var πTemp174 *πg.Object
				_ = πTemp174
				var πTemp175 *πg.Object
				_ = πTemp175
				var πTemp176 *πg.Object
				_ = πTemp176
				var πTemp177 *πg.Object
				_ = πTemp177
				var πTemp178 *πg.Object
				_ = πTemp178
				var πTemp179 *πg.Object
				_ = πTemp179
				var πTemp180 *πg.Object
				_ = πTemp180
				var πTemp181 *πg.Object
				_ = πTemp181
				var πTemp182 *πg.Object
				_ = πTemp182
				var πTemp183 *πg.Object
				_ = πTemp183
				var πTemp184 *πg.Object
				_ = πTemp184
				var πTemp185 *πg.Object
				_ = πTemp185
				var πTemp186 *πg.Object
				_ = πTemp186
				var πTemp187 *πg.Object
				_ = πTemp187
				var πTemp188 *πg.Object
				_ = πTemp188
				var πTemp189 *πg.Object
				_ = πTemp189
				var πTemp190 *πg.Object
				_ = πTemp190
				var πTemp191 *πg.Object
				_ = πTemp191
				var πTemp192 *πg.Object
				_ = πTemp192
				var πTemp193 *πg.Object
				_ = πTemp193
				var πTemp194 *πg.Object
				_ = πTemp194
				var πTemp195 *πg.Object
				_ = πTemp195
				var πTemp196 *πg.Object
				_ = πTemp196
				var πTemp197 *πg.Object
				_ = πTemp197
				var πTemp198 *πg.Object
				_ = πTemp198
				var πTemp199 *πg.Object
				_ = πTemp199
				var πTemp200 *πg.Object
				_ = πTemp200
				var πTemp201 *πg.Object
				_ = πTemp201
				var πTemp202 *πg.Object
				_ = πTemp202
				var πTemp203 *πg.Object
				_ = πTemp203
				var πTemp204 *πg.Object
				_ = πTemp204
				var πTemp205 *πg.Object
				_ = πTemp205
				var πTemp206 *πg.Object
				_ = πTemp206
				var πTemp207 *πg.Object
				_ = πTemp207
				var πTemp208 *πg.Object
				_ = πTemp208
				var πTemp209 *πg.Object
				_ = πTemp209
				var πTemp210 *πg.Object
				_ = πTemp210
				var πTemp211 *πg.Object
				_ = πTemp211
				var πTemp212 *πg.Object
				_ = πTemp212
				var πTemp213 *πg.Object
				_ = πTemp213
				var πTemp214 *πg.Object
				_ = πTemp214
				var πTemp215 *πg.Object
				_ = πTemp215
				var πTemp216 *πg.Object
				_ = πTemp216
				var πTemp217 *πg.Object
				_ = πTemp217
				var πTemp218 *πg.Object
				_ = πTemp218
				var πTemp219 *πg.Object
				_ = πTemp219
				var πTemp220 *πg.Object
				_ = πTemp220
				var πTemp221 *πg.Object
				_ = πTemp221
				var πTemp222 *πg.Object
				_ = πTemp222
				var πTemp223 *πg.Object
				_ = πTemp223
				var πTemp224 *πg.Object
				_ = πTemp224
				var πTemp225 *πg.Object
				_ = πTemp225
				var πTemp226 *πg.Object
				_ = πTemp226
				var πTemp227 *πg.Object
				_ = πTemp227
				var πTemp228 *πg.Object
				_ = πTemp228
				var πTemp229 *πg.Object
				_ = πTemp229
				var πTemp230 *πg.Object
				_ = πTemp230
				var πTemp231 *πg.Object
				_ = πTemp231
				var πTemp232 *πg.Object
				_ = πTemp232
				var πTemp233 *πg.Object
				_ = πTemp233
				var πTemp234 *πg.Object
				_ = πTemp234
				var πTemp235 *πg.Object
				_ = πTemp235
				var πTemp236 *πg.Object
				_ = πTemp236
				var πTemp237 *πg.Object
				_ = πTemp237
				var πTemp238 *πg.Object
				_ = πTemp238
				var πTemp239 *πg.Object
				_ = πTemp239
				var πTemp240 *πg.Object
				_ = πTemp240
				var πTemp241 *πg.Object
				_ = πTemp241
				var πTemp242 *πg.Object
				_ = πTemp242
				var πTemp243 *πg.Object
				_ = πTemp243
				var πTemp244 *πg.Object
				_ = πTemp244
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 831: used_styles = (
					πF.SetLineno(831)
					πTemp002 = make([]*πg.Object, 91)
					πTemp002[0] = ßattribution.ToObject()
					πTemp002[1] = ßblockindent.ToObject()
					πTemp002[2] = ßblockquote.ToObject()
					πTemp002[3] = πg.NewStr("blockquote-bulletitem").ToObject()
					πTemp002[4] = πg.NewStr("blockquote-bulletlist").ToObject()
					πTemp002[5] = πg.NewStr("blockquote-enumitem").ToObject()
					πTemp002[6] = πg.NewStr("blockquote-enumlist").ToObject()
					πTemp002[7] = ßbulletitem.ToObject()
					πTemp002[8] = ßbulletlist.ToObject()
					πTemp002[9] = ßcaption.ToObject()
					πTemp002[10] = ßlegend.ToObject()
					πTemp002[11] = ßcenteredtextbody.ToObject()
					πTemp002[12] = ßcodeblock.ToObject()
					πTemp002[13] = πg.NewStr("codeblock-indented").ToObject()
					πTemp002[14] = πg.NewStr("codeblock-classname").ToObject()
					πTemp002[15] = πg.NewStr("codeblock-comment").ToObject()
					πTemp002[16] = πg.NewStr("codeblock-functionname").ToObject()
					πTemp002[17] = πg.NewStr("codeblock-keyword").ToObject()
					πTemp002[18] = πg.NewStr("codeblock-name").ToObject()
					πTemp002[19] = πg.NewStr("codeblock-number").ToObject()
					πTemp002[20] = πg.NewStr("codeblock-operator").ToObject()
					πTemp002[21] = πg.NewStr("codeblock-string").ToObject()
					πTemp002[22] = ßemphasis.ToObject()
					πTemp002[23] = ßenumitem.ToObject()
					πTemp002[24] = ßenumlist.ToObject()
					πTemp002[25] = ßepigraph.ToObject()
					πTemp002[26] = πg.NewStr("epigraph-bulletitem").ToObject()
					πTemp002[27] = πg.NewStr("epigraph-bulletlist").ToObject()
					πTemp002[28] = πg.NewStr("epigraph-enumitem").ToObject()
					πTemp002[29] = πg.NewStr("epigraph-enumlist").ToObject()
					πTemp002[30] = ßfooter.ToObject()
					πTemp002[31] = ßfootnote.ToObject()
					πTemp002[32] = ßcitation.ToObject()
					πTemp002[33] = ßheader.ToObject()
					πTemp002[34] = ßhighlights.ToObject()
					πTemp002[35] = πg.NewStr("highlights-bulletitem").ToObject()
					πTemp002[36] = πg.NewStr("highlights-bulletlist").ToObject()
					πTemp002[37] = πg.NewStr("highlights-enumitem").ToObject()
					πTemp002[38] = πg.NewStr("highlights-enumlist").ToObject()
					πTemp002[39] = ßhorizontalline.ToObject()
					πTemp002[40] = ßinlineliteral.ToObject()
					πTemp002[41] = ßquotation.ToObject()
					πTemp002[42] = ßrubric.ToObject()
					πTemp002[43] = ßstrong.ToObject()
					πTemp002[44] = πg.NewStr("table-title").ToObject()
					πTemp002[45] = ßtextbody.ToObject()
					πTemp002[46] = ßtocbulletlist.ToObject()
					πTemp002[47] = ßtocenumlist.ToObject()
					πTemp002[48] = ßtitle.ToObject()
					πTemp002[49] = ßsubtitle.ToObject()
					πTemp002[50] = ßheading1.ToObject()
					πTemp002[51] = ßheading2.ToObject()
					πTemp002[52] = ßheading3.ToObject()
					πTemp002[53] = ßheading4.ToObject()
					πTemp002[54] = ßheading5.ToObject()
					πTemp002[55] = ßheading6.ToObject()
					πTemp002[56] = ßheading7.ToObject()
					πTemp002[57] = πg.NewStr("admon-attention-hdr").ToObject()
					πTemp002[58] = πg.NewStr("admon-attention-body").ToObject()
					πTemp002[59] = πg.NewStr("admon-caution-hdr").ToObject()
					πTemp002[60] = πg.NewStr("admon-caution-body").ToObject()
					πTemp002[61] = πg.NewStr("admon-danger-hdr").ToObject()
					πTemp002[62] = πg.NewStr("admon-danger-body").ToObject()
					πTemp002[63] = πg.NewStr("admon-error-hdr").ToObject()
					πTemp002[64] = πg.NewStr("admon-error-body").ToObject()
					πTemp002[65] = πg.NewStr("admon-generic-hdr").ToObject()
					πTemp002[66] = πg.NewStr("admon-generic-body").ToObject()
					πTemp002[67] = πg.NewStr("admon-hint-hdr").ToObject()
					πTemp002[68] = πg.NewStr("admon-hint-body").ToObject()
					πTemp002[69] = πg.NewStr("admon-important-hdr").ToObject()
					πTemp002[70] = πg.NewStr("admon-important-body").ToObject()
					πTemp002[71] = πg.NewStr("admon-note-hdr").ToObject()
					πTemp002[72] = πg.NewStr("admon-note-body").ToObject()
					πTemp002[73] = πg.NewStr("admon-tip-hdr").ToObject()
					πTemp002[74] = πg.NewStr("admon-tip-body").ToObject()
					πTemp002[75] = πg.NewStr("admon-warning-hdr").ToObject()
					πTemp002[76] = πg.NewStr("admon-warning-body").ToObject()
					πTemp002[77] = ßtableoption.ToObject()
					πTemp002[78] = πg.NewStr("tableoption.%c").ToObject()
					πTemp002[79] = πg.NewStr("tableoption.%c%d").ToObject()
					πTemp002[80] = πg.NewStr("Table%d").ToObject()
					πTemp002[81] = πg.NewStr("Table%d.%c").ToObject()
					πTemp002[82] = πg.NewStr("Table%d.%c%d").ToObject()
					πTemp002[83] = ßlineblock1.ToObject()
					πTemp002[84] = ßlineblock2.ToObject()
					πTemp002[85] = ßlineblock3.ToObject()
					πTemp002[86] = ßlineblock4.ToObject()
					πTemp002[87] = ßlineblock5.ToObject()
					πTemp002[88] = ßlineblock6.ToObject()
					πTemp002[89] = ßimage.ToObject()
					πTemp002[90] = ßfigureframe.ToObject()
					πTemp001 = πg.NewTuple(πTemp002...).ToObject()
					if πE = πClass.SetItem(πF, ßused_styles.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 888: def __init__(self, document):
					πF.SetLineno(888)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "document", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µdocument *πg.Object = πArgs[1]
						_ = µdocument
						var µparser *πg.Object = πg.UnboundLocal
						_ = µparser
						var µrststyle *πg.Object = πg.UnboundLocal
						_ = µrststyle
						var µformat *πg.Object = πg.UnboundLocal
						_ = µformat
						var µroot *πg.Object = πg.UnboundLocal
						_ = µroot
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 πg.KWArgs
						_ = πTemp010
						var πTemp011 []*πg.Object
						_ = πTemp011
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 3:
								goto Label3
							case 4:
								goto Label4
							default:
								panic("unexpected function state")
							}
							// line 890: nodes.GenericNodeVisitor.__init__(self, document)
							πF.SetLineno(890)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πE = πg.CheckLocal(πF, µdocument, "document"); πE != nil {
								continue
							}
							πTemp001[1] = µdocument
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßGenericNodeVisitor, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ß__init__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 891: self.settings = document.settings
							πF.SetLineno(891)
							if πE = πg.CheckLocal(πF, µdocument, "document"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdocument, ßsettings, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsettings, πTemp003); πE != nil {
								continue
							}
							// line 892: self.language_code = self.settings.language_code
							πF.SetLineno(892)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßlanguage_code, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlanguage_code, πTemp002); πE != nil {
								continue
							}
							// line 893: self.language = languages.get_language(
							πF.SetLineno(893)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßlanguage_code, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdocument, "document"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdocument, ßreporter, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlanguages); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget_language, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlanguage, πTemp003); πE != nil {
								continue
							}
							// line 896: self.format_map = {}
							πF.SetLineno(896)
							πTemp004 = πg.NewDict()
							πTemp002 = πTemp004.ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßformat_map, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßodf_config_file, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 897: if self.settings.odf_config_file:
							πF.SetLineno(897)
						Label1:
							// line 898: parser = ConfigParser()
							πF.SetLineno(898)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßConfigParser); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µparser = πTemp003
							// line 899: parser.read(self.settings.odf_config_file)
							πF.SetLineno(899)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßodf_config_file, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µparser, ßread, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßFormats.ToObject()
							if πE = πg.CheckLocal(πF, µparser, "parser"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µparser, ßitems, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Iter(πF, πTemp006); πE != nil {
								continue
							}
							πF.PushCheckpoint(4)
							πTemp005 = false
						Label3:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label5
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp008}}}, πTemp003); πE != nil {
									continue
								}
								µrststyle = πTemp006
								µformat = πTemp008
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(3)
							if πE = πg.CheckLocal(πF, µrststyle, "rststyle"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßused_styles, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Contains(πF, πTemp006, µrststyle); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label6
							}
							goto Label7
							// line 901: if rststyle not in self.used_styles:
							πF.SetLineno(901)
						Label6:
							// line 902: self.document.reporter.warning(
							πF.SetLineno(902)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µrststyle, "rststyle"); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple1(µrststyle).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("Style \"%s\" is not a style used by odtwriter.").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp003, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp006, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label7
						Label7:
							if πTemp006, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp006, ßversion_info, nil); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple2(πg.NewInt(3).ToObject(), πg.NewInt(0).ToObject()).ToObject()
							if πTemp003, πE = πg.GE(πF, πTemp008, πTemp006); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label8
							}
							goto Label9
							// line 905: if sys.version_info >= (3, 0):
							πF.SetLineno(905)
						Label8:
							// line 906: self.format_map[rststyle] = format
							πF.SetLineno(906)
							if πE = πg.CheckLocal(πF, µformat, "format"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µformat); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßformat_map, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µrststyle, "rststyle"); πE != nil {
								continue
							}
							πTemp008 = µrststyle
							if πE = πg.SetItem(πF, πTemp006, πTemp008, πTemp003); πE != nil {
								continue
							}
							goto Label10
						Label9:
							// line 908: self.format_map[rststyle] = format.decode('utf-8')
							πF.SetLineno(908)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("utf-8").ToObject()
							if πE = πg.CheckLocal(πF, µformat, "format"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µformat, ßdecode, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µself, ßformat_map, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µrststyle, "rststyle"); πE != nil {
								continue
							}
							πTemp009 = µrststyle
							if πE = πg.SetItem(πF, πTemp008, πTemp009, πTemp003); πE != nil {
								continue
							}
							goto Label10
						Label10:
							continue
						Label4:
							if πE != nil || πR != nil {
								continue
							}
						Label5:
							goto Label2
						Label2:
							// line 909: self.section_level = 0
							πF.SetLineno(909)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_level, πTemp002); πE != nil {
								continue
							}
							// line 910: self.section_count = 0
							πF.SetLineno(910)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_count, πTemp002); πE != nil {
								continue
							}
							// line 912: root = Element(
							πF.SetLineno(912)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("office:document-content").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßCONTENT_NAMESPACE_ATTRIB); πE != nil {
								continue
							}
							πTemp010 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp010); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µroot = πTemp003
							// line 916: self.content_tree = etree.ElementTree(element=root)
							πF.SetLineno(916)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp010 = πg.KWArgs{
								{"element", µroot},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßElementTree, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp010); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcontent_tree, πTemp003); πE != nil {
								continue
							}
							// line 917: self.current_element = root
							πF.SetLineno(917)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µroot); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcurrent_element, πTemp002); πE != nil {
								continue
							}
							// line 918: SubElement(root, 'office:scripts')
							πF.SetLineno(918)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("office:scripts").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 919: SubElement(root, 'office:font-face-decls')
							πF.SetLineno(919)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("office:font-face-decls").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 920: el = SubElement(root, 'office:automatic-styles')
							πF.SetLineno(920)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("office:automatic-styles").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 921: self.automatic_styles = el
							πF.SetLineno(921)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßautomatic_styles, πTemp002); πE != nil {
								continue
							}
							// line 922: el = SubElement(root, 'office:body')
							πF.SetLineno(922)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("office:body").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 923: el = self.generate_content_element(el)
							πF.SetLineno(923)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_content_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 924: self.current_element = el
							πF.SetLineno(924)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcurrent_element, πTemp002); πE != nil {
								continue
							}
							// line 925: self.body_text_element = el
							πF.SetLineno(925)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßbody_text_element, πTemp002); πE != nil {
								continue
							}
							// line 926: self.paragraph_style_stack = [self.rststyle('textbody'), ]
							πF.SetLineno(926)
							πTemp001 = make([]*πg.Object, 1)
							πTemp011 = πF.MakeArgs(1)
							πTemp011[0] = ßtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp011, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp011)
							πTemp001[0] = πTemp003
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßparagraph_style_stack, πTemp003); πE != nil {
								continue
							}
							// line 927: self.list_style_stack = []
							πF.SetLineno(927)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlist_style_stack, πTemp003); πE != nil {
								continue
							}
							// line 928: self.table_count = 0
							πF.SetLineno(928)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtable_count, πTemp002); πE != nil {
								continue
							}
							// line 929: self.column_count = ord('A') - 1
							πF.SetLineno(929)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßA.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Sub(πF, πTemp006, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcolumn_count, πTemp003); πE != nil {
								continue
							}
							// line 930: self.trace_level = -1
							πF.SetLineno(930)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtrace_level, πTemp003); πE != nil {
								continue
							}
							// line 931: self.optiontablestyles_generated = False
							πF.SetLineno(931)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßoptiontablestyles_generated, πTemp003); πE != nil {
								continue
							}
							// line 932: self.field_name = None
							πF.SetLineno(932)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfield_name, πTemp003); πE != nil {
								continue
							}
							// line 933: self.field_element = None
							πF.SetLineno(933)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfield_element, πTemp003); πE != nil {
								continue
							}
							// line 934: self.title = None
							πF.SetLineno(934)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtitle, πTemp003); πE != nil {
								continue
							}
							// line 935: self.image_count = 0
							πF.SetLineno(935)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßimage_count, πTemp002); πE != nil {
								continue
							}
							// line 936: self.image_style_count = 0
							πF.SetLineno(936)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßimage_style_count, πTemp002); πE != nil {
								continue
							}
							// line 937: self.image_dict = {}
							πF.SetLineno(937)
							πTemp004 = πg.NewDict()
							πTemp002 = πTemp004.ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßimage_dict, πTemp003); πE != nil {
								continue
							}
							// line 938: self.embedded_file_list = []
							πF.SetLineno(938)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßembedded_file_list, πTemp003); πE != nil {
								continue
							}
							// line 939: self.syntaxhighlighting = 1
							πF.SetLineno(939)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsyntaxhighlighting, πTemp002); πE != nil {
								continue
							}
							// line 940: self.syntaxhighlight_lexer = 'python'
							πF.SetLineno(940)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ßpython.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsyntaxhighlight_lexer, πTemp002); πE != nil {
								continue
							}
							// line 941: self.header_content = []
							πF.SetLineno(941)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßheader_content, πTemp003); πE != nil {
								continue
							}
							// line 942: self.footer_content = []
							πF.SetLineno(942)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfooter_content, πTemp003); πE != nil {
								continue
							}
							// line 943: self.in_header = False
							πF.SetLineno(943)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_header, πTemp003); πE != nil {
								continue
							}
							// line 944: self.in_footer = False
							πF.SetLineno(944)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_footer, πTemp003); πE != nil {
								continue
							}
							// line 945: self.blockstyle = ''
							πF.SetLineno(945)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ß.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßblockstyle, πTemp002); πE != nil {
								continue
							}
							// line 946: self.in_table_of_contents = False
							πF.SetLineno(946)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_table_of_contents, πTemp003); πE != nil {
								continue
							}
							// line 947: self.table_of_content_index_body = None
							πF.SetLineno(947)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtable_of_content_index_body, πTemp003); πE != nil {
								continue
							}
							// line 948: self.list_level = 0
							πF.SetLineno(948)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlist_level, πTemp002); πE != nil {
								continue
							}
							// line 949: self.def_list_level = 0
							πF.SetLineno(949)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdef_list_level, πTemp002); πE != nil {
								continue
							}
							// line 950: self.footnote_ref_dict = {}
							πF.SetLineno(950)
							πTemp004 = πg.NewDict()
							πTemp002 = πTemp004.ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfootnote_ref_dict, πTemp003); πE != nil {
								continue
							}
							// line 951: self.footnote_list = []
							πF.SetLineno(951)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfootnote_list, πTemp003); πE != nil {
								continue
							}
							// line 952: self.footnote_chars_idx = 0
							πF.SetLineno(952)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfootnote_chars_idx, πTemp002); πE != nil {
								continue
							}
							// line 953: self.footnote_level = 0
							πF.SetLineno(953)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfootnote_level, πTemp002); πE != nil {
								continue
							}
							// line 954: self.pending_ids = []
							πF.SetLineno(954)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßpending_ids, πTemp003); πE != nil {
								continue
							}
							// line 955: self.in_paragraph = False
							πF.SetLineno(955)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_paragraph, πTemp003); πE != nil {
								continue
							}
							// line 956: self.found_doc_title = False
							πF.SetLineno(956)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfound_doc_title, πTemp003); πE != nil {
								continue
							}
							// line 957: self.bumped_list_level_stack = []
							πF.SetLineno(957)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßbumped_list_level_stack, πTemp003); πE != nil {
								continue
							}
							// line 958: self.meta_dict = {}
							πF.SetLineno(958)
							πTemp004 = πg.NewDict()
							πTemp002 = πTemp004.ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßmeta_dict, πTemp003); πE != nil {
								continue
							}
							// line 959: self.line_block_level = 0
							πF.SetLineno(959)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßline_block_level, πTemp002); πE != nil {
								continue
							}
							// line 960: self.line_indent_level = 0
							πF.SetLineno(960)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßline_indent_level, πTemp002); πE != nil {
								continue
							}
							// line 961: self.citation_id = None
							πF.SetLineno(961)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcitation_id, πTemp003); πE != nil {
								continue
							}
							// line 962: self.style_index = 0        # use to form unique style names
							πF.SetLineno(962)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp002); πE != nil {
								continue
							}
							// line 963: self.str_stylesheet = ''
							πF.SetLineno(963)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ß.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstr_stylesheet, πTemp002); πE != nil {
								continue
							}
							// line 964: self.str_stylesheetcontent = ''
							πF.SetLineno(964)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ß.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstr_stylesheetcontent, πTemp002); πE != nil {
								continue
							}
							// line 965: self.dom_stylesheet = None
							πF.SetLineno(965)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdom_stylesheet, πTemp003); πE != nil {
								continue
							}
							// line 966: self.table_styles = None
							πF.SetLineno(966)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtable_styles, πTemp003); πE != nil {
								continue
							}
							// line 967: self.in_citation = False
							πF.SetLineno(967)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_citation, πTemp003); πE != nil {
								continue
							}
							// line 970: self.inline_style_count_stack = []
							πF.SetLineno(970)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinline_style_count_stack, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 972: def get_str_stylesheet(self):
					πF.SetLineno(972)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("get_str_stylesheet", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 973: return self.str_stylesheet
							πF.SetLineno(973)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstr_stylesheet, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_str_stylesheet.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 975: def retrieve_styles(self, extension):
					πF.SetLineno(975)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "extension", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("retrieve_styles", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µextension *πg.Object = πArgs[1]
						_ = µextension
						var µs2 *πg.Object = πg.UnboundLocal
						_ = µs2
						var µstylespath *πg.Object = πg.UnboundLocal
						_ = µstylespath
						var µext *πg.Object = πg.UnboundLocal
						_ = µext
						var µstylesfile *πg.Object = πg.UnboundLocal
						_ = µstylesfile
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var µzfile *πg.Object = πg.UnboundLocal
						_ = µzfile
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 976: """Retrieve the stylesheet from either a .xml file or from
							πF.SetLineno(976)
							// line 979: s2 = None
							πF.SetLineno(979)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µs2 = πTemp001
							// line 980: stylespath = self.settings.stylesheet
							πF.SetLineno(980)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßstylesheet, nil); πE != nil {
								continue
							}
							µstylespath = πTemp002
							// line 981: ext = os.path.splitext(stylespath)[1]
							πF.SetLineno(981)
							πTemp001 = πg.NewInt(1).ToObject()
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstylespath, "stylespath"); πE != nil {
								continue
							}
							πTemp003[0] = µstylespath
							if πTemp004, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßpath, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp005, ßsplitext, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp002, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							µext = πTemp002
							if πE = πg.CheckLocal(πF, µext, "ext"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µext, πg.NewStr(".xml").ToObject()); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µext, "ext"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µextension, "extension"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µext, µextension); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label2
							}
							goto Label3
							// line 982: if ext == '.xml':
							πF.SetLineno(982)
						Label1:
							// line 983: stylesfile = open(stylespath, 'r')
							πF.SetLineno(983)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µstylespath, "stylespath"); πE != nil {
								continue
							}
							πTemp003[0] = µstylespath
							πTemp003[1] = ßr.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßopen); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µstylesfile = πTemp002
							// line 984: s1 = stylesfile.read()
							πF.SetLineno(984)
							if πE = πg.CheckLocal(πF, µstylesfile, "stylesfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µstylesfile, ßread, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µs1 = πTemp002
							// line 985: stylesfile.close()
							πF.SetLineno(985)
							if πE = πg.CheckLocal(πF, µstylesfile, "stylesfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µstylesfile, ßclose, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label4
							// line 986: elif ext == extension:
							πF.SetLineno(986)
						Label2:
							// line 987: zfile = zipfile.ZipFile(stylespath, 'r')
							πF.SetLineno(987)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µstylespath, "stylespath"); πE != nil {
								continue
							}
							πTemp003[0] = µstylespath
							πTemp003[1] = ßr.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßzipfile); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßZipFile, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µzfile = πTemp001
							// line 988: s1 = zfile.read('styles.xml')
							πF.SetLineno(988)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("styles.xml").ToObject()
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µzfile, ßread, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µs1 = πTemp002
							// line 989: s2 = zfile.read('content.xml')
							πF.SetLineno(989)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("content.xml").ToObject()
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µzfile, ßread, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µs2 = πTemp002
							// line 990: zfile.close()
							πF.SetLineno(990)
							if πE = πg.CheckLocal(πF, µzfile, "zfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µzfile, ßclose, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label4
						Label3:
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstylespath, "stylespath"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µextension, "extension"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(µstylespath, µextension).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("stylesheet path (%s) must be %s or .xml file").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßRuntimeError); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 992: raise RuntimeError('stylesheet path (%s) must be %s or '
							πF.SetLineno(992)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
							goto Label4
						Label4:
							// line 994: self.str_stylesheet = s1
							πF.SetLineno(994)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µs1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstr_stylesheet, πTemp001); πE != nil {
								continue
							}
							// line 995: self.str_stylesheetcontent = s2
							πF.SetLineno(995)
							if πE = πg.CheckLocal(πF, µs2, "s2"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µs2); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstr_stylesheetcontent, πTemp001); πE != nil {
								continue
							}
							// line 996: self.dom_stylesheet = etree.fromstring(self.str_stylesheet)
							πF.SetLineno(996)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstr_stylesheet, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßfromstring, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdom_stylesheet, πTemp002); πE != nil {
								continue
							}
							// line 997: self.dom_stylesheetcontent = etree.fromstring(
							πF.SetLineno(997)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstr_stylesheetcontent, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßfromstring, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdom_stylesheetcontent, πTemp002); πE != nil {
								continue
							}
							// line 999: self.table_styles = self.extract_table_styles(s2)
							πF.SetLineno(999)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µs2, "s2"); πE != nil {
								continue
							}
							πTemp003[0] = µs2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßextract_table_styles, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtable_styles, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßretrieve_styles.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 976: """Retrieve the stylesheet from either a .xml file or from
					πF.SetLineno(976)
					// line 976: """Retrieve the stylesheet from either a .xml file or from
					πF.SetLineno(976)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("Retrieve the stylesheet from either a .xml file or from\n        a .odt (zip) file.  Return the content as a string.\n        ").ToObject()); πE != nil {
						continue
					}
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp006}, πg.NewStr("Retrieve the stylesheet from either a .xml file or from\n        a .odt (zip) file.  Return the content as a string.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp007, πE = πg.ResolveClass(πF, πClass, nil, ßretrieve_styles); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp007, ß__doc__, πTemp006); πE != nil {
						continue
					}
					// line 1001: def extract_table_styles(self, styles_str):
					πF.SetLineno(1001)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "styles_str", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("extract_table_styles", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µstyles_str *πg.Object = πArgs[1]
						_ = µstyles_str
						var µroot *πg.Object = πg.UnboundLocal
						_ = µroot
						var µtable_styles *πg.Object = πg.UnboundLocal
						_ = µtable_styles
						var µauto_styles *πg.Object = πg.UnboundLocal
						_ = µauto_styles
						var µstylenode *πg.Object = πg.UnboundLocal
						_ = µstylenode
						var µname *πg.Object = πg.UnboundLocal
						_ = µname
						var µtablename *πg.Object = πg.UnboundLocal
						_ = µtablename
						var µfamily *πg.Object = πg.UnboundLocal
						_ = µfamily
						var µtablestyle *πg.Object = πg.UnboundLocal
						_ = µtablestyle
						var µproperties *πg.Object = πg.UnboundLocal
						_ = µproperties
						var µproperty *πg.Object = πg.UnboundLocal
						_ = µproperty
						var µborder *πg.Object = πg.UnboundLocal
						_ = µborder
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 1002: root = etree.fromstring(styles_str)
							πF.SetLineno(1002)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyles_str, "styles_str"); πE != nil {
								continue
							}
							πTemp001[0] = µstyles_str
							if πTemp002, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfromstring, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µroot = πTemp002
							// line 1003: table_styles = {}
							πF.SetLineno(1003)
							πTemp004 = πg.NewDict()
							πTemp002 = πTemp004.ToObject()
							µtable_styles = πTemp002
							// line 1004: auto_styles = root.find(
							πF.SetLineno(1004)
							πTemp001 = πF.MakeArgs(1)
							πTemp005 = ßoffice.ToObject()
							if πTemp007, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp007, πTemp005); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp006).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("{%s}automatic-styles").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µroot, ßfind, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µauto_styles = πTemp003
							if πE = πg.CheckLocal(πF, µauto_styles, "auto_styles"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, µauto_styles); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp008 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µstylenode = πTemp003
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 1007: name = stylenode.get('{%s}name' % (CNSD['style'], ))
							πF.SetLineno(1007)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = ßstyle.ToObject()
							if πTemp010, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, πTemp010, πTemp006); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple1(πTemp007).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("{%s}name").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µstylenode, "stylenode"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µstylenode, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µname = πTemp005
							// line 1008: tablename = name.split('.')[0]
							πF.SetLineno(1008)
							πTemp003 = πg.NewInt(0).ToObject()
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr(".").ToObject()
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µname, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp005, πE = πg.GetItem(πF, πTemp007, πTemp003); πE != nil {
								continue
							}
							µtablename = πTemp005
							// line 1009: family = stylenode.get('{%s}family' % (CNSD['style'], ))
							πF.SetLineno(1009)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = ßstyle.ToObject()
							if πTemp010, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, πTemp010, πTemp006); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple1(πTemp007).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("{%s}family").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µstylenode, "stylenode"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µstylenode, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µfamily = πTemp005
							πTemp001 = πF.MakeArgs(1)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTABLESTYLEPREFIX); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µname, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label4
							}
							goto Label5
							// line 1010: if name.startswith(TABLESTYLEPREFIX):
							πF.SetLineno(1010)
						Label4:
							// line 1011: tablestyle = table_styles.get(tablename)
							πF.SetLineno(1011)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtablename, "tablename"); πE != nil {
								continue
							}
							πTemp001[0] = µtablename
							if πE = πg.CheckLocal(πF, µtable_styles, "table_styles"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µtable_styles, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtablestyle = πTemp005
							if πE = πg.CheckLocal(πF, µtablestyle, "tablestyle"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(µtablestyle == πTemp005).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label6
							}
							goto Label7
							// line 1012: if tablestyle is None:
							πF.SetLineno(1012)
						Label6:
							// line 1013: tablestyle = TableStyle()
							πF.SetLineno(1013)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTableStyle); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtablestyle = πTemp005
							// line 1014: table_styles[tablename] = tablestyle
							πF.SetLineno(1014)
							if πE = πg.CheckLocal(πF, µtablestyle, "tablestyle"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µtablestyle); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtable_styles, "table_styles"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtablename, "tablename"); πE != nil {
								continue
							}
							πTemp005 = µtablename
							if πE = πg.SetItem(πF, µtable_styles, πTemp005, πTemp003); πE != nil {
								continue
							}
							goto Label7
						Label7:
							if πE = πg.CheckLocal(πF, µfamily, "family"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µfamily, ßtable.ToObject()); πE != nil {
								continue
							}
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label8
							}
							if πE = πg.CheckLocal(πF, µfamily, "family"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µfamily, πg.NewStr("table-cell").ToObject()); πE != nil {
								continue
							}
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label9
							}
							goto Label10
							// line 1015: if family == 'table':
							πF.SetLineno(1015)
						Label8:
							// line 1016: properties = stylenode.find(
							πF.SetLineno(1016)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = ßstyle.ToObject()
							if πTemp010, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, πTemp010, πTemp006); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple1(πTemp007).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("{%s}table-properties").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µstylenode, "stylenode"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µstylenode, ßfind, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µproperties = πTemp005
							// line 1018: property = properties.get(
							πF.SetLineno(1018)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = ßfo.ToObject()
							if πTemp010, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, πTemp010, πTemp006); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(πTemp007, πg.NewStr("background-color").ToObject()).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("{%s}%s").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µproperties, "properties"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µproperties, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µproperty = πTemp005
							if πE = πg.CheckLocal(πF, µproperty, "property"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µproperty != πTemp006).ToObject()
							πTemp003 = πTemp005
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if !πTemp009 {
								goto Label11
							}
							if πE = πg.CheckLocal(πF, µproperty, "property"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.NE(πF, µproperty, ßnone.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp005
						Label11:
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label12
							}
							goto Label13
							// line 1020: if property is not None and property != 'none':
							πF.SetLineno(1020)
						Label12:
							// line 1021: tablestyle.backgroundcolor = property
							πF.SetLineno(1021)
							if πE = πg.CheckLocal(πF, µproperty, "property"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µproperty); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtablestyle, "tablestyle"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µtablestyle, ßbackgroundcolor, πTemp003); πE != nil {
								continue
							}
							goto Label13
						Label13:
							goto Label10
							// line 1022: elif family == 'table-cell':
							πF.SetLineno(1022)
						Label9:
							// line 1023: properties = stylenode.find(
							πF.SetLineno(1023)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = ßstyle.ToObject()
							if πTemp010, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, πTemp010, πTemp006); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple1(πTemp007).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("{%s}table-cell-properties").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µstylenode, "stylenode"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µstylenode, ßfind, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µproperties = πTemp005
							if πE = πg.CheckLocal(πF, µproperties, "properties"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(µproperties != πTemp005).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label14
							}
							goto Label15
							// line 1025: if properties is not None:
							πF.SetLineno(1025)
						Label14:
							// line 1026: border = self.get_property(properties)
							πF.SetLineno(1026)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µproperties, "properties"); πE != nil {
								continue
							}
							πTemp001[0] = µproperties
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßget_property, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µborder = πTemp005
							if πE = πg.CheckLocal(πF, µborder, "border"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(µborder != πTemp005).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label16
							}
							goto Label17
							// line 1027: if border is not None:
							πF.SetLineno(1027)
						Label16:
							// line 1028: tablestyle.border = border
							πF.SetLineno(1028)
							if πE = πg.CheckLocal(πF, µborder, "border"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, µborder); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtablestyle, "tablestyle"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µtablestyle, ßborder, πTemp003); πE != nil {
								continue
							}
							goto Label17
						Label17:
							goto Label15
						Label15:
							goto Label10
						Label10:
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 1029: return table_styles
							πF.SetLineno(1029)
							if πE = πg.CheckLocal(πF, µtable_styles, "table_styles"); πE != nil {
								continue
							}
							πR = µtable_styles
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßextract_table_styles.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 1031: def get_property(self, stylenode):
					πF.SetLineno(1031)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "stylenode", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("get_property", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µstylenode *πg.Object = πArgs[1]
						_ = µstylenode
						var µborder *πg.Object = πg.UnboundLocal
						_ = µborder
						var µpropertyname *πg.Object = πg.UnboundLocal
						_ = µpropertyname
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 1032: border = None
							πF.SetLineno(1032)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µborder = πTemp001
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTABLEPROPERTYNAMES); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp003 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp003 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp004 = !isStop
							} else {
								πTemp004 = true
								µpropertyname = πTemp002
							}
							if πE != nil || !πTemp004 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 1034: border = stylenode.get('{%s}%s' % (CNSD['fo'], propertyname, ))
							πF.SetLineno(1034)
							πTemp005 = πF.MakeArgs(1)
							πTemp007 = ßfo.ToObject()
							if πTemp009, πE = πg.ResolveGlobal(πF, ßCNSD); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetItem(πF, πTemp009, πTemp007); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µpropertyname, "propertyname"); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple2(πTemp008, µpropertyname).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("{%s}%s").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µstylenode, "stylenode"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µstylenode, ßget, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µborder = πTemp006
							if πE = πg.CheckLocal(πF, µborder, "border"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp006 = πg.GetBool(µborder != πTemp007).ToObject()
							πTemp002 = πTemp006
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µborder, "border"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.NE(πF, µborder, ßnone.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp006
						Label4:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label5
							}
							goto Label6
							// line 1035: if border is not None and border != 'none':
							πF.SetLineno(1035)
						Label5:
							// line 1036: return border
							πF.SetLineno(1036)
							if πE = πg.CheckLocal(πF, µborder, "border"); πE != nil {
								continue
							}
							πR = µborder
							continue
							goto Label6
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 1037: return border
							πF.SetLineno(1037)
							if πE = πg.CheckLocal(πF, µborder, "border"); πE != nil {
								continue
							}
							πR = µborder
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_property.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 1039: def add_doc_title(self):
					πF.SetLineno(1039)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("add_doc_title", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtext *πg.Object = πg.UnboundLocal
						_ = µtext
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1040: text = self.settings.title
							πF.SetLineno(1040)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtitle, nil); πE != nil {
								continue
							}
							µtext = πTemp002
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, µtext); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1041: if text:
							πF.SetLineno(1041)
						Label1:
							// line 1042: self.title = text
							πF.SetLineno(1042)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µtext); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtitle, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfound_doc_title, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 1043: if not self.found_doc_title:
							πF.SetLineno(1043)
						Label3:
							// line 1044: el = Element('text:p', attrib={
							πF.SetLineno(1044)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("text:p").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßtitle.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 1047: el.text = text
							πF.SetLineno(1047)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µtext); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1048: self.body_text_element.insert(0, el)
							πF.SetLineno(1048)
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[1] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßbody_text_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label4
						Label4:
							goto Label2
						Label2:
							// line 1049: el = self.find_first_text_p(self.body_text_element)
							πF.SetLineno(1049)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßbody_text_element, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfind_first_text_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µel != πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							goto Label6
							// line 1050: if el is not None:
							πF.SetLineno(1050)
						Label5:
							// line 1051: self.attach_page_style(el)
							πF.SetLineno(1051)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßattach_page_style, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label6
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßadd_doc_title.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 1053: def find_first_text_p(self, el):
					πF.SetLineno(1053)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "el", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("find_first_text_p", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µel *πg.Object = πArgs[1]
						_ = µel
						var µchild *πg.Object = πg.UnboundLocal
						_ = µchild
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 5:
								goto Label5
							case 6:
								goto Label6
							default:
								panic("unexpected function state")
							}
							// line 1054: """Search the generated doc and return the first <text:p> element.
							πF.SetLineno(1054)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µel, ßtag, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp004, πg.NewStr("text:p").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µel, ßtag, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp004, πg.NewStr("text:h").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
						Label1:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							goto Label3
							// line 1056: if (
							πF.SetLineno(1056)
						Label2:
							// line 1059: return el
							πF.SetLineno(1059)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πR = µel
							continue
							goto Label4
						Label3:
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µel); πE != nil {
								continue
							}
							πF.PushCheckpoint(6)
							πTemp002 = false
						Label5:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label7
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µchild = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(5)
							// line 1062: el1 = self.find_first_text_p(child)
							πF.SetLineno(1062)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µchild, "child"); πE != nil {
								continue
							}
							πTemp006[0] = µchild
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfind_first_text_p, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel1 = πTemp004
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(µel1 != πTemp004).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label8
							}
							goto Label9
							// line 1063: if el1 is not None:
							πF.SetLineno(1063)
						Label8:
							// line 1064: return el1
							πF.SetLineno(1064)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πR = µel1
							continue
							goto Label9
						Label9:
							continue
						Label6:
							if πE != nil || πR != nil {
								continue
							}
						Label7:
							// line 1065: return None
							πF.SetLineno(1065)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßfind_first_text_p.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 1054: """Search the generated doc and return the first <text:p> element.
					πF.SetLineno(1054)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp010}, πg.NewStr("Search the generated doc and return the first <text:p> element.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp011, πE = πg.ResolveClass(πF, πClass, nil, ßfind_first_text_p); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp011, ß__doc__, πTemp010); πE != nil {
						continue
					}
					// line 1067: def attach_page_style(self, el):
					πF.SetLineno(1067)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "el", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("attach_page_style", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µel *πg.Object = πArgs[1]
						_ = µel
						var µcurrent_style *πg.Object = πg.UnboundLocal
						_ = µcurrent_style
						var µstyle_name *πg.Object = πg.UnboundLocal
						_ = µstyle_name
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1068: """Attach the default page style.
							πF.SetLineno(1068)
							// line 1073: current_style = el.get('text:style-name')
							πF.SetLineno(1073)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:style-name").ToObject()
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µel, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µcurrent_style = πTemp003
							// line 1074: style_name = 'P1003'
							πF.SetLineno(1074)
							µstyle_name = ßP1003.ToObject()
							// line 1075: el1 = SubElement(
							πF.SetLineno(1075)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("style:style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), µstyle_name); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:master-page-name").ToObject(), πg.NewStr("rststyle-pagedefault").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:family").ToObject(), ßparagraph.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp004.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							if πE = πg.CheckLocal(πF, µcurrent_style, "current_style"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, µcurrent_style); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 1081: if current_style:
							πF.SetLineno(1081)
						Label1:
							// line 1082: el1.set('style:parent-style-name', current_style)
							πF.SetLineno(1082)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("style:parent-style-name").ToObject()
							if πE = πg.CheckLocal(πF, µcurrent_style, "current_style"); πE != nil {
								continue
							}
							πTemp001[1] = µcurrent_style
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µel1, ßset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
							// line 1083: el.set('text:style-name', style_name)
							πF.SetLineno(1083)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("text:style-name").ToObject()
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp001[1] = µstyle_name
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µel, ßset, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßattach_page_style.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 1068: """Attach the default page style.
					πF.SetLineno(1068)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp011}, πg.NewStr("Attach the default page style.\n\n        Create an automatic-style that refers to the current style\n        of this element and that refers to the default page style.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp012, πE = πg.ResolveClass(πF, πClass, nil, ßattach_page_style); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp012, ß__doc__, πTemp011); πE != nil {
						continue
					}
					// line 1085: def rststyle(self, name, parameters=()):
					πF.SetLineno(1085)
					πTemp003 = make([]πg.Param, 3)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "name", Def: nil}
					πTemp012 = πg.NewTuple0().ToObject()
					πTemp003[2] = πg.Param{Name: "parameters", Def: πTemp012}
					πTemp011 = πg.NewFunction(πg.NewCode("rststyle", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µname *πg.Object = πArgs[1]
						_ = µname
						var µparameters *πg.Object = πArgs[2]
						_ = µparameters
						var µname1 *πg.Object = πg.UnboundLocal
						_ = µname1
						var µstylename *πg.Object = πg.UnboundLocal
						_ = µstylename
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1086: """
							πF.SetLineno(1086)
							// line 1093: name1 = name % parameters
							πF.SetLineno(1093)
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µparameters, "parameters"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, µname, µparameters); πE != nil {
								continue
							}
							µname1 = πTemp001
							// line 1094: stylename = self.format_map.get(name1, 'rststyle-%s' % name1)
							πF.SetLineno(1094)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µname1, "name1"); πE != nil {
								continue
							}
							πTemp002[0] = µname1
							if πE = πg.CheckLocal(πF, µname1, "name1"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rststyle-%s").ToObject(), µname1); πE != nil {
								continue
							}
							πTemp002[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßformat_map, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßget, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µstylename = πTemp001
							// line 1095: return stylename
							πF.SetLineno(1095)
							if πE = πg.CheckLocal(πF, µstylename, "stylename"); πE != nil {
								continue
							}
							πR = µstylename
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßrststyle.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 1086: """
					πF.SetLineno(1086)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp012}, πg.NewStr("\n        Returns the style name to use for the given style.\n\n        If `parameters` is given `name` must contain a matching number of\n        ``%`` and is used as a format expression with `parameters` as\n        the value.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp013, πE = πg.ResolveClass(πF, πClass, nil, ßrststyle); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp013, ß__doc__, πTemp012); πE != nil {
						continue
					}
					// line 1097: def generate_content_element(self, root):
					πF.SetLineno(1097)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "root", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("generate_content_element", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µroot *πg.Object = πArgs[1]
						_ = µroot
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1098: return SubElement(root, 'office:text')
							πF.SetLineno(1098)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp001[0] = µroot
							πTemp001[1] = πg.NewStr("office:text").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πR = πTemp003
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßgenerate_content_element.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 1100: def setup_page(self):
					πF.SetLineno(1100)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("setup_page", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnew_content *πg.Object = πg.UnboundLocal
						_ = µnew_content
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1101: self.setup_paper(self.dom_stylesheet)
							πF.SetLineno(1101)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdom_stylesheet, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsetup_paper, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßheader_content, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp003, πE = πg.GT(πF, πTemp006, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßfooter_content, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp003, πE = πg.GT(πF, πTemp006, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßcustom_header, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp005
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßcustom_footer, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp005
						Label1:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							goto Label3
							// line 1102: if (len(self.header_content) > 0 or
							πF.SetLineno(1102)
						Label2:
							// line 1106: self.add_header_footer(self.dom_stylesheet)
							πF.SetLineno(1106)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdom_stylesheet, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßadd_header_footer, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label3
						Label3:
							// line 1107: new_content = etree.tostring(self.dom_stylesheet)
							πF.SetLineno(1107)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdom_stylesheet, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßtostring, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µnew_content = πTemp002
							// line 1108: return new_content
							πF.SetLineno(1108)
							if πE = πg.CheckLocal(πF, µnew_content, "new_content"); πE != nil {
								continue
							}
							πR = µnew_content
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsetup_page.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 1110: def get_dom_stylesheet(self):
					πF.SetLineno(1110)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("get_dom_stylesheet", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1111: return self.dom_stylesheet
							πF.SetLineno(1111)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdom_stylesheet, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_dom_stylesheet.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 1113: def setup_paper(self, root_el):
					πF.SetLineno(1113)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "root_el", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("setup_paper", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µroot_el *πg.Object = πArgs[1]
						_ = µroot_el
						var µfin *πg.Object = πg.UnboundLocal
						_ = µfin
						var µdimensions *πg.Object = πg.UnboundLocal
						_ = µdimensions
						var µw *πg.Object = πg.UnboundLocal
						_ = µw
						var µh *πg.Object = πg.UnboundLocal
						_ = µh
						var µwalk *πg.Object = πg.UnboundLocal
						_ = µwalk
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []πg.Param
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.BaseException
						_ = πTemp007
						var πTemp008 *πg.Traceback
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 1114: try:
							πF.SetLineno(1114)
							πF.PushCheckpoint(1)
							πF.PushCheckpoint(2)
							// line 1115: fin = os.popen("paperconf -s 2> /dev/null")
							πF.SetLineno(1115)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("paperconf -s 2> /dev/null").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpopen, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µfin = πTemp002
							// line 1116: dimensions = fin.read().split()
							πF.SetLineno(1116)
							if πE = πg.CheckLocal(πF, µfin, "fin"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µfin, ßread, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µdimensions = πTemp003
							// line 1117: w, h = (float(s) for s in dimensions)
							πF.SetLineno(1117)
							πTemp004 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µs *πg.Object = πg.UnboundLocal
								_ = µs
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 bool
								_ = πTemp002
								var πTemp003 bool
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 []*πg.Object
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										if πE = πg.CheckLocal(πF, µdimensions, "dimensions"); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, µdimensions); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp002 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp002 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp003 = !isStop
										} else {
											πTemp003 = true
											µs = πTemp004
										}
										if πE != nil || !πTemp003 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 1117: w, h = (float(s) for s in dimensions)
										πF.SetLineno(1117)
										πTemp005 = πF.MakeArgs(1)
										if πE = πg.CheckLocal(πF, µs, "s"); πE != nil {
											continue
										}
										πTemp005[0] = µs
										if πTemp004, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
											continue
										}
										if πTemp006, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp005)
										πF.PushCheckpoint(4)
										return πTemp006, nil
									Label4:
										πTemp004 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}}}, πTemp003); πE != nil {
								continue
							}
							µw = πTemp005
							µh = πTemp006
							πF.PopCheckpoint()
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp007, πTemp008 = πF.ExcInfo()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßIOError); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(πTemp005, πTemp006).ToObject()
							if πTemp009, πE = πg.IsInstance(πF, πTemp007.ToObject(), πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label3
							}
							πE = πF.Raise(πTemp007.ToObject(), nil, πTemp008.ToObject())
							continue
							// line 1118: except (IOError, ValueError):
							πF.SetLineno(1118)
						Label3:
							// line 1119: w, h = 612, 792     # default to Letter
							πF.SetLineno(1119)
							πTemp003 = πg.NewTuple2(πg.NewInt(612).ToObject(), πg.NewInt(792).ToObject()).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}}}, πTemp003); πE != nil {
								continue
							}
							µw = πTemp005
							µh = πTemp006
							πF.RestoreExc(nil, nil)
							πF.PopCheckpoint()
							goto Label1
						Label1:
							πTemp007, πTemp008 = πF.RestoreExc(nil, nil)
							// line 1121: fin.close()
							πF.SetLineno(1121)
							if πE = πg.CheckLocal(πF, µfin, "fin"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µfin, ßclose, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp007 != nil {
								πE = πF.Raise(πTemp007.ToObject(), nil, πTemp008.ToObject())
								continue
							}
							if πR != nil {
								continue
							}
							// line 1123: def walk(el):
							πF.SetLineno(1123)
							πTemp004 = make([]πg.Param, 1)
							πTemp004[0] = πg.Param{Name: "el", Def: nil}
							πTemp003 = πg.NewFunction(πg.NewCode("walk", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µel *πg.Object = πArgs[0]
								_ = µel
								var µsubel *πg.Object = πg.UnboundLocal
								_ = µsubel
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 bool
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πTemp007 *πg.Object
								_ = πTemp007
								var πTemp008 *πg.Object
								_ = πTemp008
								var πTemp009 bool
								_ = πTemp009
								var πTemp010 *πg.Object
								_ = πTemp010
								var πTemp011 []*πg.Object
								_ = πTemp011
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									case 5:
										goto Label5
									case 6:
										goto Label6
									default:
										panic("unexpected function state")
									}
									if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µel, ßtag, nil); πE != nil {
										continue
									}
									πTemp006 = ßstyle.ToObject()
									if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
										continue
									}
									if πTemp007, πE = πg.GetItem(πF, πTemp008, πTemp006); πE != nil {
										continue
									}
									if πTemp005, πE = πg.Mod(πF, πg.NewStr("{%s}page-layout-properties").ToObject(), πTemp007); πE != nil {
										continue
									}
									if πTemp003, πE = πg.Eq(πF, πTemp004, πTemp005); πE != nil {
										continue
									}
									πTemp001 = πTemp003
									if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
										continue
									}
									if !πTemp002 {
										goto Label1
									}
									πTemp005 = ßfo.ToObject()
									if πTemp007, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
										continue
									}
									if πTemp006, πE = πg.GetItem(πF, πTemp007, πTemp005); πE != nil {
										continue
									}
									if πTemp004, πE = πg.Mod(πF, πg.NewStr("{%s}page-width").ToObject(), πTemp006); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
										continue
									}
									if πTemp005, πE = πg.GetAttr(πF, µel, ßattrib, nil); πE != nil {
										continue
									}
									if πTemp009, πE = πg.Contains(πF, πTemp005, πTemp004); πE != nil {
										continue
									}
									πTemp003 = πg.GetBool(!πTemp009).ToObject()
									πTemp001 = πTemp003
								Label1:
									if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
										continue
									}
									if πTemp002 {
										goto Label2
									}
									goto Label3
									// line 1124: if el.tag == "{%s}page-layout-properties" % SNSD["style"] and \
									πF.SetLineno(1124)
								Label2:
									// line 1126: el.attrib["{%s}page-width" % SNSD["fo"]] = "%.3fpt" % w
									πF.SetLineno(1126)
									if πE = πg.CheckLocal(πF, µw, "w"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("%.3fpt").ToObject(), µw); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µel, ßattrib, nil); πE != nil {
										continue
									}
									πTemp007 = ßfo.ToObject()
									if πTemp010, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
										continue
									}
									if πTemp008, πE = πg.GetItem(πF, πTemp010, πTemp007); πE != nil {
										continue
									}
									if πTemp006, πE = πg.Mod(πF, πg.NewStr("{%s}page-width").ToObject(), πTemp008); πE != nil {
										continue
									}
									πTemp005 = πTemp006
									if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp003); πE != nil {
										continue
									}
									// line 1127: el.attrib["{%s}page-height" % SNSD["fo"]] = "%.3fpt" % h
									πF.SetLineno(1127)
									if πE = πg.CheckLocal(πF, µh, "h"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("%.3fpt").ToObject(), µh); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µel, ßattrib, nil); πE != nil {
										continue
									}
									πTemp007 = ßfo.ToObject()
									if πTemp010, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
										continue
									}
									if πTemp008, πE = πg.GetItem(πF, πTemp010, πTemp007); πE != nil {
										continue
									}
									if πTemp006, πE = πg.Mod(πF, πg.NewStr("{%s}page-height").ToObject(), πTemp008); πE != nil {
										continue
									}
									πTemp005 = πTemp006
									if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp003); πE != nil {
										continue
									}
									// line 1128: el.attrib["{%s}margin-left" % SNSD["fo"]] = \
									πF.SetLineno(1128)
									if πE = πg.CheckLocal(πF, µw, "w"); πE != nil {
										continue
									}
									if πTemp003, πE = πg.Mul(πF, πg.NewFloat(0.1).ToObject(), µw); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("%.3fpt").ToObject(), πTemp003); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µel, ßattrib, nil); πE != nil {
										continue
									}
									πTemp007 = ßfo.ToObject()
									if πTemp010, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
										continue
									}
									if πTemp008, πE = πg.GetItem(πF, πTemp010, πTemp007); πE != nil {
										continue
									}
									if πTemp006, πE = πg.Mod(πF, πg.NewStr("{%s}margin-left").ToObject(), πTemp008); πE != nil {
										continue
									}
									πTemp005 = πTemp006
									if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp003); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µel, ßattrib, nil); πE != nil {
										continue
									}
									πTemp007 = ßfo.ToObject()
									if πTemp010, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
										continue
									}
									if πTemp008, πE = πg.GetItem(πF, πTemp010, πTemp007); πE != nil {
										continue
									}
									if πTemp006, πE = πg.Mod(πF, πg.NewStr("{%s}margin-right").ToObject(), πTemp008); πE != nil {
										continue
									}
									πTemp005 = πTemp006
									if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp003); πE != nil {
										continue
									}
									// line 1131: el.attrib["{%s}margin-top" % SNSD["fo"]] = \
									πF.SetLineno(1131)
									if πE = πg.CheckLocal(πF, µh, "h"); πE != nil {
										continue
									}
									if πTemp003, πE = πg.Mul(πF, πg.NewFloat(0.1).ToObject(), µh); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Mod(πF, πg.NewStr("%.3fpt").ToObject(), πTemp003); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µel, ßattrib, nil); πE != nil {
										continue
									}
									πTemp007 = ßfo.ToObject()
									if πTemp010, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
										continue
									}
									if πTemp008, πE = πg.GetItem(πF, πTemp010, πTemp007); πE != nil {
										continue
									}
									if πTemp006, πE = πg.Mod(πF, πg.NewStr("{%s}margin-top").ToObject(), πTemp008); πE != nil {
										continue
									}
									πTemp005 = πTemp006
									if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp003); πE != nil {
										continue
									}
									if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
										continue
									}
									if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
										continue
									}
									if πTemp004, πE = πg.GetAttr(πF, µel, ßattrib, nil); πE != nil {
										continue
									}
									πTemp007 = ßfo.ToObject()
									if πTemp010, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
										continue
									}
									if πTemp008, πE = πg.GetItem(πF, πTemp010, πTemp007); πE != nil {
										continue
									}
									if πTemp006, πE = πg.Mod(πF, πg.NewStr("{%s}margin-bottom").ToObject(), πTemp008); πE != nil {
										continue
									}
									πTemp005 = πTemp006
									if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp003); πE != nil {
										continue
									}
									goto Label4
								Label3:
									if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
										continue
									}
									if πTemp001, πE = πg.Iter(πF, µel); πE != nil {
										continue
									}
									πF.PushCheckpoint(6)
									πTemp002 = false
								Label5:
									if πE != nil || πR != nil {
										continue
									}
									if πTemp002 {
										πF.PopCheckpoint()
										goto Label7
									}
									if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
										isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
										if exc != nil {
											πE = exc
										} else if isStop {
											πE = nil
											πF.RestoreExc(nil, nil)
										}
										πTemp009 = !isStop
									} else {
										πTemp009 = true
										µsubel = πTemp003
									}
									if πE != nil || !πTemp009 {
										continue
									}
									πF.PushCheckpoint(5)
									// line 1136: walk(subel)
									πF.SetLineno(1136)
									πTemp011 = πF.MakeArgs(1)
									if πE = πg.CheckLocal(πF, µsubel, "subel"); πE != nil {
										continue
									}
									πTemp011[0] = µsubel
									if πE = πg.CheckLocal(πF, µwalk, "walk"); πE != nil {
										continue
									}
									if πTemp003, πE = µwalk.Call(πF, πTemp011, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp011)
									continue
								Label6:
									if πE != nil || πR != nil {
										continue
									}
								Label7:
									goto Label4
								Label4:
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							µwalk = πTemp003
							// line 1137: walk(root_el)
							πF.SetLineno(1137)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µroot_el, "root_el"); πE != nil {
								continue
							}
							πTemp001[0] = µroot_el
							if πE = πg.CheckLocal(πF, µwalk, "walk"); πE != nil {
								continue
							}
							if πTemp005, πE = µwalk.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsetup_paper.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 1139: def add_header_footer(self, root_el):
					πF.SetLineno(1139)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "root_el", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("add_header_footer", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µroot_el *πg.Object = πArgs[1]
						_ = µroot_el
						var µautomatic_styles *πg.Object = πg.UnboundLocal
						_ = µautomatic_styles
						var µpath *πg.Object = πg.UnboundLocal
						_ = µpath
						var µmaster_el *πg.Object = πg.UnboundLocal
						_ = µmaster_el
						var µmaster_el_container *πg.Object = πg.UnboundLocal
						_ = µmaster_el_container
						var µtarget_attrib *πg.Object = πg.UnboundLocal
						_ = µtarget_attrib
						var µtarget_name *πg.Object = πg.UnboundLocal
						_ = µtarget_name
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µattrkey *πg.Object = πg.UnboundLocal
						_ = µattrkey
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 3:
								goto Label3
							case 4:
								goto Label4
							case 13:
								goto Label13
							case 14:
								goto Label14
							case 21:
								goto Label21
							case 22:
								goto Label22
							default:
								panic("unexpected function state")
							}
							// line 1140: automatic_styles = root_el.find(
							πF.SetLineno(1140)
							πTemp001 = πF.MakeArgs(1)
							πTemp003 = ßoffice.ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp005, πTemp003); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("{%s}automatic-styles").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µroot_el, "root_el"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µroot_el, ßfind, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µautomatic_styles = πTemp003
							// line 1142: path = '{%s}master-styles' % (NAME_SPACE_1, )
							πF.SetLineno(1142)
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNAME_SPACE_1); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp004).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("{%s}master-styles").ToObject(), πTemp003); πE != nil {
								continue
							}
							µpath = πTemp002
							// line 1143: master_el = root_el.find(path)
							πF.SetLineno(1143)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							πTemp001[0] = µpath
							if πE = πg.CheckLocal(πF, µroot_el, "root_el"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µroot_el, ßfind, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmaster_el = πTemp003
							if πE = πg.CheckLocal(πF, µmaster_el, "master_el"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µmaster_el == πTemp003).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 1144: if master_el is None:
							πF.SetLineno(1144)
						Label1:
							// line 1145: return
							πF.SetLineno(1145)
							πR = πg.None
							continue
							goto Label2
						Label2:
							// line 1146: path = '{%s}master-page' % (SNSD['style'], )
							πF.SetLineno(1146)
							πTemp004 = ßstyle.ToObject()
							if πTemp007, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp007, πTemp004); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp005).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("{%s}master-page").ToObject(), πTemp003); πE != nil {
								continue
							}
							µpath = πTemp002
							// line 1147: master_el_container = master_el.findall(path)
							πF.SetLineno(1147)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							πTemp001[0] = µpath
							if πE = πg.CheckLocal(πF, µmaster_el, "master_el"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmaster_el, ßfindall, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmaster_el_container = πTemp003
							// line 1148: master_el = None
							πF.SetLineno(1148)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µmaster_el = πTemp002
							// line 1149: target_attrib = '{%s}name' % (SNSD['style'], )
							πF.SetLineno(1149)
							πTemp004 = ßstyle.ToObject()
							if πTemp007, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp007, πTemp004); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp005).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("{%s}name").ToObject(), πTemp003); πE != nil {
								continue
							}
							µtarget_attrib = πTemp002
							// line 1150: target_name = self.rststyle('pagedefault')
							πF.SetLineno(1150)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßpagedefault.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtarget_name = πTemp003
							if πE = πg.CheckLocal(πF, µmaster_el_container, "master_el_container"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, µmaster_el_container); πE != nil {
								continue
							}
							πF.PushCheckpoint(4)
							πTemp006 = false
						Label3:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label5
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µel = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(3)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtarget_attrib, "target_attrib"); πE != nil {
								continue
							}
							πTemp001[0] = µtarget_attrib
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µel, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.CheckLocal(πF, µtarget_name, "target_name"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp005, µtarget_name); πE != nil {
								continue
							}
							if πTemp008, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label6
							}
							goto Label7
							// line 1152: if el.get(target_attrib) == target_name:
							πF.SetLineno(1152)
						Label6:
							// line 1153: master_el = el
							πF.SetLineno(1153)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							µmaster_el = µel
							// line 1154: break
							πF.SetLineno(1154)
							πTemp006 = true
							continue
							goto Label7
						Label7:
							continue
						Label4:
							if πE != nil || πR != nil {
								continue
							}
						Label5:
							if πE = πg.CheckLocal(πF, µmaster_el, "master_el"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µmaster_el == πTemp003).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label8
							}
							goto Label9
							// line 1155: if master_el is None:
							πF.SetLineno(1155)
						Label8:
							// line 1156: return
							πF.SetLineno(1156)
							πR = πg.None
							continue
							goto Label9
						Label9:
							// line 1157: el1 = master_el
							πF.SetLineno(1157)
							if πE = πg.CheckLocal(πF, µmaster_el, "master_el"); πE != nil {
								continue
							}
							µel1 = µmaster_el
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßheader_content, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label10
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßcustom_header, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp004
						Label10:
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label11
							}
							goto Label12
							// line 1158: if self.header_content or self.settings.custom_header:
							πF.SetLineno(1158)
						Label11:
							// line 1159: el2 = SubElement(
							πF.SetLineno(1159)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							πTemp001[1] = πg.NewStr("style:header").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSTYLES_NAMESPACE_ATTRIB); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSTYLES_NAMESPACE_DICT); πE != nil {
								continue
							}
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel2 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßheader_content, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(14)
							πTemp006 = false
						Label13:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label15
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µel = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(13)
							// line 1165: attrkey = add_ns('text:style-name', nsdict=SNSD)
							πF.SetLineno(1165)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:style-name").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp009 = πg.KWArgs{
								{"nsdict", πTemp003},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µattrkey = πTemp004
							// line 1166: el.attrib[attrkey] = self.rststyle('header')
							πF.SetLineno(1166)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßheader.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µel, ßattrib, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrkey, "attrkey"); πE != nil {
								continue
							}
							πTemp007 = µattrkey
							if πE = πg.SetItem(πF, πTemp005, πTemp007, πTemp003); πE != nil {
								continue
							}
							// line 1167: el2.append(el)
							πF.SetLineno(1167)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µel2, ßappend, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label14:
							if πE != nil || πR != nil {
								continue
							}
						Label15:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcustom_header, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label16
							}
							goto Label17
							// line 1168: if self.settings.custom_header:
							πF.SetLineno(1168)
						Label16:
							// line 1169: self.create_custom_headfoot(
							πF.SetLineno(1169)
							πTemp001 = πF.MakeArgs(4)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp001[0] = µel2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcustom_header, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							πTemp001[2] = ßheader.ToObject()
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp001[3] = µautomatic_styles
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcreate_custom_headfoot, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label17
						Label17:
							goto Label12
						Label12:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfooter_content, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label18
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßcustom_footer, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp004
						Label18:
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label19
							}
							goto Label20
							// line 1172: if self.footer_content or self.settings.custom_footer:
							πF.SetLineno(1172)
						Label19:
							// line 1173: el2 = SubElement(
							πF.SetLineno(1173)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							πTemp001[1] = πg.NewStr("style:footer").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSTYLES_NAMESPACE_ATTRIB); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSTYLES_NAMESPACE_DICT); πE != nil {
								continue
							}
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp002},
								{"nsdict", πTemp003},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel2 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfooter_content, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(22)
							πTemp006 = false
						Label21:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label23
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µel = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(21)
							// line 1179: attrkey = add_ns('text:style-name', nsdict=SNSD)
							πF.SetLineno(1179)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:style-name").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp009 = πg.KWArgs{
								{"nsdict", πTemp003},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µattrkey = πTemp004
							// line 1180: el.attrib[attrkey] = self.rststyle('footer')
							πF.SetLineno(1180)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßfooter.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µel, ßattrib, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrkey, "attrkey"); πE != nil {
								continue
							}
							πTemp007 = µattrkey
							if πE = πg.SetItem(πF, πTemp005, πTemp007, πTemp003); πE != nil {
								continue
							}
							// line 1181: el2.append(el)
							πF.SetLineno(1181)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µel2, ßappend, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label22:
							if πE != nil || πR != nil {
								continue
							}
						Label23:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcustom_footer, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label24
							}
							goto Label25
							// line 1182: if self.settings.custom_footer:
							πF.SetLineno(1182)
						Label24:
							// line 1183: self.create_custom_headfoot(
							πF.SetLineno(1183)
							πTemp001 = πF.MakeArgs(4)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp001[0] = µel2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcustom_footer, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							πTemp001[2] = ßfooter.ToObject()
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp001[3] = µautomatic_styles
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcreate_custom_headfoot, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label25
						Label25:
							goto Label20
						Label20:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßadd_header_footer.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 1187: code_none, code_field, code_text = list(range(3))
					πF.SetLineno(1187)
					πTemp002 = πF.MakeArgs(1)
					πTemp017 = πF.MakeArgs(1)
					πTemp017[0] = πg.NewInt(3).ToObject()
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßrange); πE != nil {
						continue
					}
					if πTemp019, πE = πTemp018.Call(πF, πTemp017, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp017)
					πTemp002[0] = πTemp019
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßlist); πE != nil {
						continue
					}
					if πTemp019, πE = πTemp018.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp018}, πg.TieTarget{Target: &πTemp020}, πg.TieTarget{Target: &πTemp021}}}, πTemp019); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßcode_none.ToObject(), πTemp018); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßcode_field.ToObject(), πTemp020); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßcode_text.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 1188: field_pat = re.compile(r'%(..?)%')
					πF.SetLineno(1188)
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("%(..?)%").ToObject()
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßre); πE != nil {
						continue
					}
					if πTemp019, πE = πg.GetAttr(πF, πTemp018, ßcompile, nil); πE != nil {
						continue
					}
					if πTemp018, πE = πTemp019.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πClass.SetItem(πF, ßfield_pat.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 1190: def create_custom_headfoot(
					πF.SetLineno(1190)
					πTemp003 = make([]πg.Param, 5)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "parent", Def: nil}
					πTemp003[2] = πg.Param{Name: "text", Def: nil}
					πTemp003[3] = πg.Param{Name: "style_name", Def: nil}
					πTemp003[4] = πg.Param{Name: "automatic_styles", Def: nil}
					πTemp018 = πg.NewFunction(πg.NewCode("create_custom_headfoot", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µparent *πg.Object = πArgs[1]
						_ = µparent
						var µtext *πg.Object = πArgs[2]
						_ = µtext
						var µstyle_name *πg.Object = πArgs[3]
						_ = µstyle_name
						var µautomatic_styles *πg.Object = πArgs[4]
						_ = µautomatic_styles
						var µcurrent_element *πg.Object = πg.UnboundLocal
						_ = µcurrent_element
						var µfield_iter *πg.Object = πg.UnboundLocal
						_ = µfield_iter
						var µitem *πg.Object = πg.UnboundLocal
						_ = µitem
						var µmsg *πg.Object = πg.UnboundLocal
						_ = µmsg
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 1192: parent = SubElement(parent, 'text:p', attrib={
							πF.SetLineno(1192)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp001[0] = µparent
							πTemp001[1] = πg.NewStr("text:p").ToObject()
							πTemp002 = πg.NewDict()
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp003[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πTemp002.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp004 = πTemp002.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp004},
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µparent = πTemp005
							// line 1195: current_element = None
							πF.SetLineno(1195)
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µcurrent_element = πTemp004
							// line 1196: field_iter = self.split_field_specifiers_iter(text)
							πF.SetLineno(1196)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πTemp001[0] = µtext
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßsplit_field_specifiers_iter, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µfield_iter = πTemp005
							if πE = πg.CheckLocal(πF, µfield_iter, "field_iter"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Iter(πF, µfield_iter); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp007 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp005, πE = πg.Next(πF, πTemp004); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µitem = πTemp005
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(1)
							πTemp009 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µitem, "item"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.GetItem(πF, µitem, πTemp009); πE != nil {
								continue
							}
							if πTemp009, πE = πg.ResolveGlobal(πF, ßODFTranslator); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetAttr(πF, πTemp009, ßcode_field, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Eq(πF, πTemp010, πTemp011); πE != nil {
								continue
							}
							if πTemp008, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µcurrent_element, "current_element"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µcurrent_element == πTemp009).ToObject()
							if πTemp008, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label5
							}
							goto Label6
							// line 1198: if item[0] == ODFTranslator.code_field:
							πF.SetLineno(1198)
						Label4:
							πTemp009 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µitem, "item"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.GetItem(πF, µitem, πTemp009); πE != nil {
								continue
							}
							πTemp001 = make([]*πg.Object, 14)
							πTemp001[0] = ßp.ToObject()
							πTemp001[1] = ßP.ToObject()
							πTemp001[2] = ßt1.ToObject()
							πTemp001[3] = ßt2.ToObject()
							πTemp001[4] = ßt3.ToObject()
							πTemp001[5] = ßt4.ToObject()
							πTemp001[6] = ßd1.ToObject()
							πTemp001[7] = ßd2.ToObject()
							πTemp001[8] = ßd3.ToObject()
							πTemp001[9] = ßd4.ToObject()
							πTemp001[10] = ßd5.ToObject()
							πTemp001[11] = ßs.ToObject()
							πTemp001[12] = ßt.ToObject()
							πTemp001[13] = ßa.ToObject()
							πTemp009 = πg.NewTuple(πTemp001...).ToObject()
							if πTemp008, πE = πg.Contains(πF, πTemp009, πTemp010); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(!πTemp008).ToObject()
							if πTemp008, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label8
							}
							goto Label9
							// line 1199: if item[1] not in (
							πF.SetLineno(1199)
						Label8:
							// line 1204: msg = 'bad field spec: %%%s%%' % (item[1], )
							πF.SetLineno(1204)
							πTemp010 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µitem, "item"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetItem(πF, µitem, πTemp010); πE != nil {
								continue
							}
							πTemp009 = πg.NewTuple1(πTemp011).ToObject()
							if πTemp005, πE = πg.Mod(πF, πg.NewStr("bad field spec: %%%s%%").ToObject(), πTemp009); πE != nil {
								continue
							}
							µmsg = πTemp005
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp001[0] = µmsg
							if πTemp005, πE = πg.ResolveGlobal(πF, ßRuntimeError); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1205: raise RuntimeError(msg)
							πF.SetLineno(1205)
							πE = πF.Raise(πTemp009, nil, nil)
							continue
							goto Label9
						Label9:
							// line 1206: el1 = self.make_field_element(
							πF.SetLineno(1206)
							πTemp001 = πF.MakeArgs(4)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp001[0] = µparent
							πTemp005 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µitem, "item"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetItem(πF, µitem, πTemp005); πE != nil {
								continue
							}
							πTemp001[1] = πTemp009
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp001[2] = µstyle_name
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp001[3] = µautomatic_styles
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßmake_field_element, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp009
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µel1 == πTemp009).ToObject()
							if πTemp008, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label10
							}
							goto Label11
							// line 1209: if el1 is None:
							πF.SetLineno(1209)
						Label10:
							// line 1210: msg = 'bad field spec: %%%s%%' % (item[1], )
							πF.SetLineno(1210)
							πTemp010 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µitem, "item"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetItem(πF, µitem, πTemp010); πE != nil {
								continue
							}
							πTemp009 = πg.NewTuple1(πTemp011).ToObject()
							if πTemp005, πE = πg.Mod(πF, πg.NewStr("bad field spec: %%%s%%").ToObject(), πTemp009); πE != nil {
								continue
							}
							µmsg = πTemp005
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp001[0] = µmsg
							if πTemp005, πE = πg.ResolveGlobal(πF, ßRuntimeError); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1211: raise RuntimeError(msg)
							πF.SetLineno(1211)
							πE = πF.Raise(πTemp009, nil, nil)
							continue
							goto Label12
						Label11:
							// line 1213: current_element = el1
							πF.SetLineno(1213)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							µcurrent_element = µel1
							goto Label12
						Label12:
							goto Label7
							// line 1215: if current_element is None:
							πF.SetLineno(1215)
						Label5:
							// line 1216: parent.text = item[1]
							πF.SetLineno(1216)
							πTemp005 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µitem, "item"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetItem(πF, µitem, πTemp005); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp009); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µparent, ßtext, πTemp005); πE != nil {
								continue
							}
							goto Label7
						Label6:
							// line 1218: current_element.tail = item[1]
							πF.SetLineno(1218)
							πTemp005 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µitem, "item"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetItem(πF, µitem, πTemp005); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp009); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcurrent_element, "current_element"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µcurrent_element, ßtail, πTemp005); πE != nil {
								continue
							}
							goto Label7
						Label7:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßcreate_custom_headfoot.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 1220: def make_field_element(self, parent, text, style_name, automatic_styles):
					πF.SetLineno(1220)
					πTemp003 = make([]πg.Param, 5)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "parent", Def: nil}
					πTemp003[2] = πg.Param{Name: "text", Def: nil}
					πTemp003[3] = πg.Param{Name: "style_name", Def: nil}
					πTemp003[4] = πg.Param{Name: "automatic_styles", Def: nil}
					πTemp019 = πg.NewFunction(πg.NewCode("make_field_element", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µparent *πg.Object = πArgs[1]
						_ = µparent
						var µtext *πg.Object = πArgs[2]
						_ = µtext
						var µstyle_name *πg.Object = πArgs[3]
						_ = µstyle_name
						var µautomatic_styles *πg.Object = πArgs[4]
						_ = µautomatic_styles
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µel3 *πg.Object = πg.UnboundLocal
						_ = µel3
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßp.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßP.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßt1.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label3
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßt2.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßt3.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label5
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßt4.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label6
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßd1.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label7
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßd2.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label8
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßd3.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label9
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßd4.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label10
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßd5.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label11
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßs.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label12
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßt.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label13
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µtext, ßa.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label14
							}
							goto Label15
							// line 1221: if text == 'p':
							πF.SetLineno(1221)
						Label1:
							// line 1222: el1 = SubElement(parent, 'text:page-number', attrib={
							πF.SetLineno(1222)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:page-number").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:select-page").ToObject(), ßcurrent.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							goto Label16
							// line 1226: elif text == 'P':
							πF.SetLineno(1226)
						Label2:
							// line 1227: el1 = SubElement(parent, 'text:page-count', attrib={
							πF.SetLineno(1227)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:page-count").ToObject()
							πTemp004 = πg.NewDict()
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							goto Label16
							// line 1230: elif text == 't1':
							πF.SetLineno(1230)
						Label3:
							// line 1231: self.style_index += 1
							πF.SetLineno(1231)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp006); πE != nil {
								continue
							}
							// line 1232: el1 = SubElement(parent, 'text:time', attrib={
							πF.SetLineno(1232)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:time").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:fixed").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-time-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:data-style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							// line 1238: el2 = SubElement(automatic_styles, 'number:time-style', attrib={
							πF.SetLineno(1238)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp003[0] = µautomatic_styles
							πTemp003[1] = πg.NewStr("number:time-style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-time-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = ßnumber.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = ßstyle.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp006
							// line 1243: el3 = SubElement(el2, 'number:hours', attrib={
							πF.SetLineno(1243)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:hours").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1246: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1246)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1247: el3.text = ':'
							πF.SetLineno(1247)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(":").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1248: el3 = SubElement(el2, 'number:minutes', attrib={
							πF.SetLineno(1248)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:minutes").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							goto Label16
							// line 1251: elif text == 't2':
							πF.SetLineno(1251)
						Label4:
							// line 1252: self.style_index += 1
							πF.SetLineno(1252)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp006); πE != nil {
								continue
							}
							// line 1253: el1 = SubElement(parent, 'text:time', attrib={
							πF.SetLineno(1253)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:time").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:fixed").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-time-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:data-style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							// line 1259: el2 = SubElement(automatic_styles, 'number:time-style', attrib={
							πF.SetLineno(1259)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp003[0] = µautomatic_styles
							πTemp003[1] = πg.NewStr("number:time-style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-time-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = ßnumber.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = ßstyle.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp006
							// line 1264: el3 = SubElement(el2, 'number:hours', attrib={
							πF.SetLineno(1264)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:hours").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1267: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1267)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1268: el3.text = ':'
							πF.SetLineno(1268)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(":").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1269: el3 = SubElement(el2, 'number:minutes', attrib={
							πF.SetLineno(1269)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:minutes").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1272: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1272)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1273: el3.text = ':'
							πF.SetLineno(1273)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(":").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1274: el3 = SubElement(el2, 'number:seconds', attrib={
							πF.SetLineno(1274)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:seconds").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							goto Label16
							// line 1277: elif text == 't3':
							πF.SetLineno(1277)
						Label5:
							// line 1278: self.style_index += 1
							πF.SetLineno(1278)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp006); πE != nil {
								continue
							}
							// line 1279: el1 = SubElement(parent, 'text:time', attrib={
							πF.SetLineno(1279)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:time").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:fixed").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-time-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:data-style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							// line 1285: el2 = SubElement(automatic_styles, 'number:time-style', attrib={
							πF.SetLineno(1285)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp003[0] = µautomatic_styles
							πTemp003[1] = πg.NewStr("number:time-style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-time-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = ßnumber.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = ßstyle.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp006
							// line 1290: el3 = SubElement(el2, 'number:hours', attrib={
							πF.SetLineno(1290)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:hours").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1293: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1293)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1294: el3.text = ':'
							πF.SetLineno(1294)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(":").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1295: el3 = SubElement(el2, 'number:minutes', attrib={
							πF.SetLineno(1295)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:minutes").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1298: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1298)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1299: el3.text = ' '
							πF.SetLineno(1299)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(" ").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1300: el3 = SubElement(el2, 'number:am-pm')
							πF.SetLineno(1300)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:am-pm").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							goto Label16
							// line 1301: elif text == 't4':
							πF.SetLineno(1301)
						Label6:
							// line 1302: self.style_index += 1
							πF.SetLineno(1302)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp006); πE != nil {
								continue
							}
							// line 1303: el1 = SubElement(parent, 'text:time', attrib={
							πF.SetLineno(1303)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:time").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:fixed").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-time-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:data-style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							// line 1309: el2 = SubElement(automatic_styles, 'number:time-style', attrib={
							πF.SetLineno(1309)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp003[0] = µautomatic_styles
							πTemp003[1] = πg.NewStr("number:time-style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-time-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = ßnumber.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = ßstyle.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp006
							// line 1314: el3 = SubElement(el2, 'number:hours', attrib={
							πF.SetLineno(1314)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:hours").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1317: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1317)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1318: el3.text = ':'
							πF.SetLineno(1318)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(":").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1319: el3 = SubElement(el2, 'number:minutes', attrib={
							πF.SetLineno(1319)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:minutes").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1322: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1322)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1323: el3.text = ':'
							πF.SetLineno(1323)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(":").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1324: el3 = SubElement(el2, 'number:seconds', attrib={
							πF.SetLineno(1324)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:seconds").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1327: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1327)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1328: el3.text = ' '
							πF.SetLineno(1328)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(" ").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1329: el3 = SubElement(el2, 'number:am-pm')
							πF.SetLineno(1329)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:am-pm").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							goto Label16
							// line 1330: elif text == 'd1':
							πF.SetLineno(1330)
						Label7:
							// line 1331: self.style_index += 1
							πF.SetLineno(1331)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp006); πE != nil {
								continue
							}
							// line 1332: el1 = SubElement(parent, 'text:date', attrib={
							πF.SetLineno(1332)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:date").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:data-style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							// line 1337: el2 = SubElement(automatic_styles, 'number:date-style', attrib={
							πF.SetLineno(1337)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp003[0] = µautomatic_styles
							πTemp003[1] = πg.NewStr("number:date-style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:automatic-order").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							πTemp001 = ßnumber.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = ßstyle.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp006
							// line 1343: el3 = SubElement(el2, 'number:month', attrib={
							πF.SetLineno(1343)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:month").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1346: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1346)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1347: el3.text = '/'
							πF.SetLineno(1347)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("/").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1348: el3 = SubElement(el2, 'number:day', attrib={
							πF.SetLineno(1348)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:day").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1351: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1351)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1352: el3.text = '/'
							πF.SetLineno(1352)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("/").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1353: el3 = SubElement(el2, 'number:year')
							πF.SetLineno(1353)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:year").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							goto Label16
							// line 1354: elif text == 'd2':
							πF.SetLineno(1354)
						Label8:
							// line 1355: self.style_index += 1
							πF.SetLineno(1355)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp006); πE != nil {
								continue
							}
							// line 1356: el1 = SubElement(parent, 'text:date', attrib={
							πF.SetLineno(1356)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:date").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:data-style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							// line 1361: el2 = SubElement(automatic_styles, 'number:date-style', attrib={
							πF.SetLineno(1361)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp003[0] = µautomatic_styles
							πTemp003[1] = πg.NewStr("number:date-style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:automatic-order").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							πTemp001 = ßnumber.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = ßstyle.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp006
							// line 1367: el3 = SubElement(el2, 'number:month', attrib={
							πF.SetLineno(1367)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:month").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1370: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1370)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1371: el3.text = '/'
							πF.SetLineno(1371)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("/").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1372: el3 = SubElement(el2, 'number:day', attrib={
							πF.SetLineno(1372)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:day").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1375: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1375)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1376: el3.text = '/'
							πF.SetLineno(1376)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("/").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1377: el3 = SubElement(el2, 'number:year', attrib={
							πF.SetLineno(1377)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:year").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							goto Label16
							// line 1380: elif text == 'd3':
							πF.SetLineno(1380)
						Label9:
							// line 1381: self.style_index += 1
							πF.SetLineno(1381)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp006); πE != nil {
								continue
							}
							// line 1382: el1 = SubElement(parent, 'text:date', attrib={
							πF.SetLineno(1382)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:date").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:data-style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							// line 1387: el2 = SubElement(automatic_styles, 'number:date-style', attrib={
							πF.SetLineno(1387)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp003[0] = µautomatic_styles
							πTemp003[1] = πg.NewStr("number:date-style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:automatic-order").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							πTemp001 = ßnumber.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = ßstyle.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp006
							// line 1393: el3 = SubElement(el2, 'number:month', attrib={
							πF.SetLineno(1393)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:month").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:textual").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1396: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1396)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1397: el3.text = ' '
							πF.SetLineno(1397)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(" ").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1398: el3 = SubElement(el2, 'number:day', attrib={})
							πF.SetLineno(1398)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:day").ToObject()
							πTemp004 = πg.NewDict()
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1399: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1399)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1400: el3.text = ', '
							πF.SetLineno(1400)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(", ").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1401: el3 = SubElement(el2, 'number:year', attrib={
							πF.SetLineno(1401)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:year").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							goto Label16
							// line 1404: elif text == 'd4':
							πF.SetLineno(1404)
						Label10:
							// line 1405: self.style_index += 1
							πF.SetLineno(1405)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp006); πE != nil {
								continue
							}
							// line 1406: el1 = SubElement(parent, 'text:date', attrib={
							πF.SetLineno(1406)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:date").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:data-style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							// line 1411: el2 = SubElement(automatic_styles, 'number:date-style', attrib={
							πF.SetLineno(1411)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp003[0] = µautomatic_styles
							πTemp003[1] = πg.NewStr("number:date-style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:automatic-order").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							πTemp001 = ßnumber.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = ßstyle.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp006
							// line 1417: el3 = SubElement(el2, 'number:month', attrib={
							πF.SetLineno(1417)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:month").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:textual").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1421: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1421)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1422: el3.text = ' '
							πF.SetLineno(1422)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(" ").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1423: el3 = SubElement(el2, 'number:day', attrib={})
							πF.SetLineno(1423)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:day").ToObject()
							πTemp004 = πg.NewDict()
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1424: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1424)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1425: el3.text = ', '
							πF.SetLineno(1425)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr(", ").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1426: el3 = SubElement(el2, 'number:year', attrib={
							πF.SetLineno(1426)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:year").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							goto Label16
							// line 1429: elif text == 'd5':
							πF.SetLineno(1429)
						Label11:
							// line 1430: self.style_index += 1
							πF.SetLineno(1430)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstyle_index, πTemp006); πE != nil {
								continue
							}
							// line 1431: el1 = SubElement(parent, 'text:date', attrib={
							πF.SetLineno(1431)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:date").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:data-style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							// line 1436: el2 = SubElement(automatic_styles, 'number:date-style', attrib={
							πF.SetLineno(1436)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µautomatic_styles, "automatic_styles"); πE != nil {
								continue
							}
							πTemp003[0] = µautomatic_styles
							πTemp003[1] = πg.NewStr("number:date-style").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßstyle_index, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rst-date-style-%d").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = ßnumber.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:number").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = ßstyle.ToObject()
							if πTemp008, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp008, πTemp001); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("xmlns:style").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp006
							// line 1441: el3 = SubElement(el2, 'number:year', attrib={
							πF.SetLineno(1441)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:year").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1444: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1444)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1445: el3.text = '-'
							πF.SetLineno(1445)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("-").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1446: el3 = SubElement(el2, 'number:month', attrib={
							πF.SetLineno(1446)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:month").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1449: el3 = SubElement(el2, 'number:text')
							πF.SetLineno(1449)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:text").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							// line 1450: el3.text = '-'
							πF.SetLineno(1450)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("-").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1451: el3 = SubElement(el2, 'number:day', attrib={
							πF.SetLineno(1451)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("number:day").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("number:style").ToObject(), ßlong.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel3 = πTemp006
							goto Label16
							// line 1454: elif text == 's':
							πF.SetLineno(1454)
						Label12:
							// line 1455: el1 = SubElement(parent, 'text:subject', attrib={
							πF.SetLineno(1455)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:subject").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							goto Label16
							// line 1458: elif text == 't':
							πF.SetLineno(1458)
						Label13:
							// line 1459: el1 = SubElement(parent, 'text:title', attrib={
							πF.SetLineno(1459)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:title").ToObject()
							πTemp004 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							πTemp007[0] = µstyle_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							goto Label16
							// line 1462: elif text == 'a':
							πF.SetLineno(1462)
						Label14:
							// line 1463: el1 = SubElement(parent, 'text:author-name', attrib={
							πF.SetLineno(1463)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp003[0] = µparent
							πTemp003[1] = πg.NewStr("text:author-name").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:fixed").ToObject(), ßfalse.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp001.Call(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp006
							goto Label16
						Label15:
							// line 1467: el1 = None
							πF.SetLineno(1467)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µel1 = πTemp001
							goto Label16
						Label16:
							// line 1468: return el1
							πF.SetLineno(1468)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πR = µel1
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßmake_field_element.ToObject(), πTemp019); πE != nil {
						continue
					}
					// line 1470: def split_field_specifiers_iter(self, text):
					πF.SetLineno(1470)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "text", Def: nil}
					πTemp020 = πg.NewFunction(πg.NewCode("split_field_specifiers_iter", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtext *πg.Object = πArgs[1]
						_ = µtext
						var µpos1 *πg.Object = πg.UnboundLocal
						_ = µpos1
						var µmo *πg.Object = πg.UnboundLocal
						_ = µmo
						var µpos2 *πg.Object = πg.UnboundLocal
						_ = µpos2
						var µtrailing *πg.Object = πg.UnboundLocal
						_ = µtrailing
						var πTemp001 bool
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
							for ; πF.State() >= 0; πF.PopCheckpoint() {
								switch πF.State() {
								case 0:
								case 1:
									goto Label1
								case 2:
									goto Label2
								case 13:
									goto Label13
								case 10:
									goto Label10
								case 9:
									goto Label9
								default:
									panic("unexpected function state")
								}
								// line 1471: pos1 = 0
								πF.SetLineno(1471)
								µpos1 = πg.NewInt(0).ToObject()
								// line 1472: while True:
								πF.SetLineno(1472)
								πF.PushCheckpoint(2)
								πTemp001 = false
							Label1:
								if πE != nil || πR != nil {
									continue
								}
								if πTemp001 {
									πF.PopCheckpoint()
									goto Label3
								}
								if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
									continue
								}
								if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
									continue
								}
								if πE != nil || !πTemp002 {
									continue
								}
								πF.PushCheckpoint(1)
								// line 1473: mo = ODFTranslator.field_pat.search(text, pos1)
								πF.SetLineno(1473)
								πTemp004 = πF.MakeArgs(2)
								if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
									continue
								}
								πTemp004[0] = µtext
								if πE = πg.CheckLocal(πF, µpos1, "pos1"); πE != nil {
									continue
								}
								πTemp004[1] = µpos1
								if πTemp003, πE = πg.ResolveGlobal(πF, ßODFTranslator); πE != nil {
									continue
								}
								if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßfield_pat, nil); πE != nil {
									continue
								}
								if πTemp003, πE = πg.GetAttr(πF, πTemp005, ßsearch, nil); πE != nil {
									continue
								}
								if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
									continue
								}
								πF.FreeArgs(πTemp004)
								µmo = πTemp005
								if πE = πg.CheckLocal(πF, µmo, "mo"); πE != nil {
									continue
								}
								if πTemp002, πE = πg.IsTrue(πF, µmo); πE != nil {
									continue
								}
								if πTemp002 {
									goto Label4
								}
								goto Label5
								// line 1474: if mo:
								πF.SetLineno(1474)
							Label4:
								// line 1475: pos2 = mo.start()
								πF.SetLineno(1475)
								if πE = πg.CheckLocal(πF, µmo, "mo"); πE != nil {
									continue
								}
								if πTemp003, πE = πg.GetAttr(πF, µmo, ßstart, nil); πE != nil {
									continue
								}
								if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
									continue
								}
								µpos2 = πTemp005
								if πE = πg.CheckLocal(πF, µpos2, "pos2"); πE != nil {
									continue
								}
								if πE = πg.CheckLocal(πF, µpos1, "pos1"); πE != nil {
									continue
								}
								if πTemp003, πE = πg.GT(πF, µpos2, µpos1); πE != nil {
									continue
								}
								if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
									continue
								}
								if πTemp002 {
									goto Label7
								}
								goto Label8
								// line 1476: if pos2 > pos1:
								πF.SetLineno(1476)
							Label7:
								// line 1477: yield (ODFTranslator.code_text, text[pos1:pos2])
								πF.SetLineno(1477)
								if πTemp005, πE = πg.ResolveGlobal(πF, ßODFTranslator); πE != nil {
									continue
								}
								if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßcode_text, nil); πE != nil {
									continue
								}
								if πE = πg.CheckLocal(πF, µpos1, "pos1"); πE != nil {
									continue
								}
								if πE = πg.CheckLocal(πF, µpos2, "pos2"); πE != nil {
									continue
								}
								if πTemp005, πE = πg.SliceType.Call(πF, πg.Args{µpos1, µpos2, πg.None}, nil); πE != nil {
									continue
								}
								if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
									continue
								}
								if πTemp007, πE = πg.GetItem(πF, µtext, πTemp005); πE != nil {
									continue
								}
								πTemp003 = πg.NewTuple2(πTemp006, πTemp007).ToObject()
								πF.PushCheckpoint(9)
								return πTemp003, nil
							Label9:
								πTemp005 = πSent
								goto Label8
							Label8:
								// line 1478: yield (ODFTranslator.code_field, mo.group(1))
								πF.SetLineno(1478)
								if πTemp006, πE = πg.ResolveGlobal(πF, ßODFTranslator); πE != nil {
									continue
								}
								if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßcode_field, nil); πE != nil {
									continue
								}
								πTemp004 = πF.MakeArgs(1)
								πTemp004[0] = πg.NewInt(1).ToObject()
								if πE = πg.CheckLocal(πF, µmo, "mo"); πE != nil {
									continue
								}
								if πTemp006, πE = πg.GetAttr(πF, µmo, ßgroup, nil); πE != nil {
									continue
								}
								if πTemp008, πE = πTemp006.Call(πF, πTemp004, nil); πE != nil {
									continue
								}
								πF.FreeArgs(πTemp004)
								πTemp005 = πg.NewTuple2(πTemp007, πTemp008).ToObject()
								πF.PushCheckpoint(10)
								return πTemp005, nil
							Label10:
								πTemp006 = πSent
								// line 1479: pos1 = mo.end()
								πF.SetLineno(1479)
								if πE = πg.CheckLocal(πF, µmo, "mo"); πE != nil {
									continue
								}
								if πTemp006, πE = πg.GetAttr(πF, µmo, ßend, nil); πE != nil {
									continue
								}
								if πTemp007, πE = πTemp006.Call(πF, nil, nil); πE != nil {
									continue
								}
								µpos1 = πTemp007
								goto Label6
							Label5:
								// line 1481: break
								πF.SetLineno(1481)
								πTemp001 = true
								continue
								goto Label6
							Label6:
								continue
							Label2:
								if πE != nil || πR != nil {
									continue
								}
							Label3:
								// line 1482: trailing = text[pos1:]
								πF.SetLineno(1482)
								if πE = πg.CheckLocal(πF, µpos1, "pos1"); πE != nil {
									continue
								}
								if πTemp006, πE = πg.SliceType.Call(πF, πg.Args{µpos1, πg.None, πg.None}, nil); πE != nil {
									continue
								}
								if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
									continue
								}
								if πTemp007, πE = πg.GetItem(πF, µtext, πTemp006); πE != nil {
									continue
								}
								µtrailing = πTemp007
								if πE = πg.CheckLocal(πF, µtrailing, "trailing"); πE != nil {
									continue
								}
								if πTemp001, πE = πg.IsTrue(πF, µtrailing); πE != nil {
									continue
								}
								if πTemp001 {
									goto Label11
								}
								goto Label12
								// line 1483: if trailing:
								πF.SetLineno(1483)
							Label11:
								// line 1484: yield (ODFTranslator.code_text, trailing)
								πF.SetLineno(1484)
								if πTemp007, πE = πg.ResolveGlobal(πF, ßODFTranslator); πE != nil {
									continue
								}
								if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßcode_text, nil); πE != nil {
									continue
								}
								if πE = πg.CheckLocal(πF, µtrailing, "trailing"); πE != nil {
									continue
								}
								πTemp006 = πg.NewTuple2(πTemp008, µtrailing).ToObject()
								πF.PushCheckpoint(13)
								return πTemp006, nil
							Label13:
								πTemp007 = πSent
								goto Label12
							Label12:
							}
							return nil, πE
						}).ToObject(), nil
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsplit_field_specifiers_iter.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 1486: def astext(self):
					πF.SetLineno(1486)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp021 = πg.NewFunction(πg.NewCode("astext", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µroot *πg.Object = πg.UnboundLocal
						_ = µroot
						var µet *πg.Object = πg.UnboundLocal
						_ = µet
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1487: root = self.content_tree.getroot()
							πF.SetLineno(1487)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontent_tree, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßgetroot, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µroot = πTemp001
							// line 1488: et = etree.ElementTree(root)
							πF.SetLineno(1488)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							πTemp003[0] = µroot
							if πTemp001, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßElementTree, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µet = πTemp001
							// line 1489: s1 = ToString(et)
							πF.SetLineno(1489)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µet, "et"); πE != nil {
								continue
							}
							πTemp003[0] = µet
							if πTemp001, πE = πg.ResolveGlobal(πF, ßToString); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µs1 = πTemp002
							// line 1490: return s1
							πF.SetLineno(1490)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πR = µs1
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßastext.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 1492: def content_astext(self):
					πF.SetLineno(1492)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp022 = πg.NewFunction(πg.NewCode("content_astext", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1493: return self.astext()
							πF.SetLineno(1493)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πR = πTemp002
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßcontent_astext.ToObject(), πTemp022); πE != nil {
						continue
					}
					// line 1495: def set_title(self, title):
					πF.SetLineno(1495)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "title", Def: nil}
					πTemp023 = πg.NewFunction(πg.NewCode("set_title", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtitle *πg.Object = πArgs[1]
						_ = µtitle
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1496: self.title = title
							πF.SetLineno(1496)
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µtitle); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtitle, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_title.ToObject(), πTemp023); πE != nil {
						continue
					}
					// line 1498: def get_title(self):
					πF.SetLineno(1498)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp024 = πg.NewFunction(πg.NewCode("get_title", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1499: return self.title
							πF.SetLineno(1499)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtitle, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_title.ToObject(), πTemp024); πE != nil {
						continue
					}
					// line 1501: def set_embedded_file_list(self, embedded_file_list):
					πF.SetLineno(1501)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "embedded_file_list", Def: nil}
					πTemp025 = πg.NewFunction(πg.NewCode("set_embedded_file_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µembedded_file_list *πg.Object = πArgs[1]
						_ = µembedded_file_list
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1502: self.embedded_file_list = embedded_file_list
							πF.SetLineno(1502)
							if πE = πg.CheckLocal(πF, µembedded_file_list, "embedded_file_list"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µembedded_file_list); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßembedded_file_list, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_embedded_file_list.ToObject(), πTemp025); πE != nil {
						continue
					}
					// line 1504: def get_embedded_file_list(self):
					πF.SetLineno(1504)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp026 = πg.NewFunction(πg.NewCode("get_embedded_file_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1505: return self.embedded_file_list
							πF.SetLineno(1505)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßembedded_file_list, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_embedded_file_list.ToObject(), πTemp026); πE != nil {
						continue
					}
					// line 1507: def get_meta_dict(self):
					πF.SetLineno(1507)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp027 = πg.NewFunction(πg.NewCode("get_meta_dict", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1508: return self.meta_dict
							πF.SetLineno(1508)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßmeta_dict, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_meta_dict.ToObject(), πTemp027); πE != nil {
						continue
					}
					// line 1510: def process_footnotes(self):
					πF.SetLineno(1510)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp028 = πg.NewFunction(πg.NewCode("process_footnotes", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πg.UnboundLocal
						_ = µnode
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µbackrefs *πg.Object = πg.UnboundLocal
						_ = µbackrefs
						var µfirst *πg.Object = πg.UnboundLocal
						_ = µfirst
						var µref *πg.Object = πg.UnboundLocal
						_ = µref
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µel3 *πg.Object = πg.UnboundLocal
						_ = µel3
						var µchild *πg.Object = πg.UnboundLocal
						_ = µchild
						var µref1 *πg.Object = πg.UnboundLocal
						_ = µref1
						var µattribkey *πg.Object = πg.UnboundLocal
						_ = µattribkey
						var µid1 *πg.Object = πg.UnboundLocal
						_ = µid1
						var µtag *πg.Object = πg.UnboundLocal
						_ = µtag
						var µnote_class *πg.Object = πg.UnboundLocal
						_ = µnote_class
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 πg.KWArgs
						_ = πTemp011
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							case 4:
								goto Label4
							case 5:
								goto Label5
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfootnote_list, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp003 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp003 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp004 = !isStop
							} else {
								πTemp004 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}}}, πTemp002); πE != nil {
									continue
								}
								µnode = πTemp005
								µel1 = πTemp006
							}
							if πE != nil || !πTemp004 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 1512: backrefs = node.attributes.get('backrefs', [])
							πF.SetLineno(1512)
							πTemp007 = πF.MakeArgs(2)
							πTemp007[0] = ßbackrefs.ToObject()
							πTemp008 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp008...).ToObject()
							πTemp007[1] = πTemp002
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µbackrefs = πTemp002
							// line 1513: first = True
							πF.SetLineno(1513)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							µfirst = πTemp002
							if πE = πg.CheckLocal(πF, µbackrefs, "backrefs"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, µbackrefs); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp004 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp005, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µref = πTemp005
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(4)
							// line 1515: el2 = self.footnote_ref_dict.get(ref)
							πF.SetLineno(1515)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µref, "ref"); πE != nil {
								continue
							}
							πTemp007[0] = µref
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßfootnote_ref_dict, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp006.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel2 = πTemp005
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µel2 != πTemp006).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label7
							}
							goto Label8
							// line 1516: if el2 is not None:
							πF.SetLineno(1516)
						Label7:
							if πE = πg.CheckLocal(πF, µfirst, "first"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.IsTrue(πF, µfirst); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label9
							}
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp007[0] = µel2
							if πTemp006, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp006.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp005, πE = πg.GT(πF, πTemp010, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label10
							}
							goto Label11
							// line 1517: if first:
							πF.SetLineno(1517)
						Label9:
							// line 1518: first = False
							πF.SetLineno(1518)
							if πTemp005, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							µfirst = πTemp005
							// line 1519: el3 = copy.deepcopy(el1)
							πF.SetLineno(1519)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp007[0] = µel1
							if πTemp005, πE = πg.ResolveGlobal(πF, ßcopy); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßdeepcopy, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp006.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel3 = πTemp005
							// line 1520: el2.append(el3)
							πF.SetLineno(1520)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							πTemp007[0] = µel3
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µel2, ßappend, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label11
							// line 1522: if len(el2) > 0:   # and 'id' in el2.attrib:
							πF.SetLineno(1522)
						Label10:
							// line 1523: child = el2[0]
							πF.SetLineno(1523)
							πTemp005 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, µel2, πTemp005); πE != nil {
								continue
							}
							µchild = πTemp006
							// line 1524: ref1 = child.text
							πF.SetLineno(1524)
							if πE = πg.CheckLocal(πF, µchild, "child"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µchild, ßtext, nil); πE != nil {
								continue
							}
							µref1 = πTemp005
							// line 1525: attribkey = add_ns('text:id', nsdict=SNSD)
							πF.SetLineno(1525)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("text:id").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp011 = πg.KWArgs{
								{"nsdict", πTemp005},
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp007, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µattribkey = πTemp006
							// line 1526: id1 = el2.get(attribkey, 'footnote-error')
							πF.SetLineno(1526)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µattribkey, "attribkey"); πE != nil {
								continue
							}
							πTemp007[0] = µattribkey
							πTemp007[1] = πg.NewStr("footnote-error").ToObject()
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µel2, ßget, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µid1 = πTemp006
							if πE = πg.CheckLocal(πF, µid1, "id1"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(µid1 == πTemp006).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label12
							}
							goto Label13
							// line 1527: if id1 is None:
							πF.SetLineno(1527)
						Label12:
							// line 1528: id1 = ''
							πF.SetLineno(1528)
							µid1 = ß.ToObject()
							goto Label13
						Label13:
							// line 1529: tag = add_ns('text:note-ref', nsdict=SNSD)
							πF.SetLineno(1529)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("text:note-ref").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp011 = πg.KWArgs{
								{"nsdict", πTemp005},
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp007, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µtag = πTemp006
							// line 1530: el2.tag = tag
							πF.SetLineno(1530)
							if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, µtag); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel2, ßtag, πTemp005); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßendnotes_end_doc, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label14
							}
							goto Label15
							// line 1531: if self.settings.endnotes_end_doc:
							πF.SetLineno(1531)
						Label14:
							// line 1532: note_class = 'endnote'
							πF.SetLineno(1532)
							µnote_class = ßendnote.ToObject()
							goto Label16
						Label15:
							// line 1534: note_class = 'footnote'
							πF.SetLineno(1534)
							µnote_class = ßfootnote.ToObject()
							goto Label16
						Label16:
							// line 1535: el2.attrib.clear()
							πF.SetLineno(1535)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µel2, ßattrib, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßclear, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1536: attribkey = add_ns('text:note-class', nsdict=SNSD)
							πF.SetLineno(1536)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("text:note-class").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp011 = πg.KWArgs{
								{"nsdict", πTemp005},
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp007, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µattribkey = πTemp006
							// line 1537: el2.attrib[attribkey] = note_class
							πF.SetLineno(1537)
							if πE = πg.CheckLocal(πF, µnote_class, "note_class"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, µnote_class); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µel2, ßattrib, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattribkey, "attribkey"); πE != nil {
								continue
							}
							πTemp010 = µattribkey
							if πE = πg.SetItem(πF, πTemp006, πTemp010, πTemp005); πE != nil {
								continue
							}
							// line 1538: attribkey = add_ns('text:ref-name', nsdict=SNSD)
							πF.SetLineno(1538)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("text:ref-name").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp011 = πg.KWArgs{
								{"nsdict", πTemp005},
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp007, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µattribkey = πTemp006
							// line 1539: el2.attrib[attribkey] = id1
							πF.SetLineno(1539)
							if πE = πg.CheckLocal(πF, µid1, "id1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, µid1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µel2, ßattrib, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattribkey, "attribkey"); πE != nil {
								continue
							}
							πTemp010 = µattribkey
							if πE = πg.SetItem(πF, πTemp006, πTemp010, πTemp005); πE != nil {
								continue
							}
							// line 1540: attribkey = add_ns(
							πF.SetLineno(1540)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("text:reference-format").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp011 = πg.KWArgs{
								{"nsdict", πTemp005},
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp007, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µattribkey = πTemp006
							// line 1542: el2.attrib[attribkey] = 'page'
							πF.SetLineno(1542)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, ßpage.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µel2, ßattrib, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattribkey, "attribkey"); πE != nil {
								continue
							}
							πTemp010 = µattribkey
							if πE = πg.SetItem(πF, πTemp006, πTemp010, πTemp005); πE != nil {
								continue
							}
							// line 1543: el2.text = ref1
							πF.SetLineno(1543)
							if πE = πg.CheckLocal(πF, µref1, "ref1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, µref1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel2, ßtext, πTemp005); πE != nil {
								continue
							}
							goto Label11
						Label11:
							goto Label8
						Label8:
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßprocess_footnotes.ToObject(), πTemp028); πE != nil {
						continue
					}
					// line 1548: def append_child(self, tag, attrib=None, parent=None):
					πF.SetLineno(1548)
					πTemp003 = make([]πg.Param, 4)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "tag", Def: nil}
					if πTemp030, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003[2] = πg.Param{Name: "attrib", Def: πTemp030}
					if πTemp030, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003[3] = πg.Param{Name: "parent", Def: πTemp030}
					πTemp029 = πg.NewFunction(πg.NewCode("append_child", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtag *πg.Object = πArgs[1]
						_ = µtag
						var µattrib *πg.Object = πArgs[2]
						_ = µattrib
						var µparent *πg.Object = πArgs[3]
						_ = µparent
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µparent == πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1549: if parent is None:
							πF.SetLineno(1549)
						Label1:
							// line 1550: parent = self.current_element
							πF.SetLineno(1550)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							µparent = πTemp001
							goto Label2
						Label2:
							// line 1551: el = SubElement(parent, tag, attrib)
							πF.SetLineno(1551)
							πTemp004 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µparent, "parent"); πE != nil {
								continue
							}
							πTemp004[0] = µparent
							if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
								continue
							}
							πTemp004[1] = µtag
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp004[2] = µattrib
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 1552: return el
							πF.SetLineno(1552)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πR = µel
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßappend_child.ToObject(), πTemp029); πE != nil {
						continue
					}
					// line 1554: def append_p(self, style, text=None):
					πF.SetLineno(1554)
					πTemp003 = make([]πg.Param, 3)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "style", Def: nil}
					if πTemp031, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003[2] = πg.Param{Name: "text", Def: πTemp031}
					πTemp030 = πg.NewFunction(πg.NewCode("append_p", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µstyle *πg.Object = πArgs[1]
						_ = µstyle
						var µtext *πg.Object = πArgs[2]
						_ = µtext
						var µresult *πg.Object = πg.UnboundLocal
						_ = µresult
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1555: result = self.append_child('text:p', attrib={
							πF.SetLineno(1555)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:p").ToObject()
							πTemp002 = πg.NewDict()
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle, "style"); πE != nil {
								continue
							}
							πTemp003[0] = µstyle
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πTemp002.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp004 = πTemp002.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µresult = πTemp005
							// line 1557: self.append_pending_ids(result)
							πF.SetLineno(1557)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
								continue
							}
							πTemp001[0] = µresult
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßappend_pending_ids, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(µtext != πTemp005).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label1
							}
							goto Label2
							// line 1558: if text is not None:
							πF.SetLineno(1558)
						Label1:
							// line 1559: result.text = text
							πF.SetLineno(1559)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, µtext); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µresult, ßtext, πTemp004); πE != nil {
								continue
							}
							goto Label2
						Label2:
							// line 1560: return result
							πF.SetLineno(1560)
							if πE = πg.CheckLocal(πF, µresult, "result"); πE != nil {
								continue
							}
							πR = µresult
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßappend_p.ToObject(), πTemp030); πE != nil {
						continue
					}
					// line 1562: def append_pending_ids(self, el):
					πF.SetLineno(1562)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "el", Def: nil}
					πTemp031 = πg.NewFunction(πg.NewCode("append_pending_ids", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µel *πg.Object = πArgs[1]
						_ = µel
						var µid *πg.Object = πg.UnboundLocal
						_ = µid
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 3:
								goto Label3
							case 4:
								goto Label4
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_links, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1563: if self.settings.create_links:
							πF.SetLineno(1563)
						Label1:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßpending_ids, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(4)
							πTemp003 = false
						Label3:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp003 {
								πF.PopCheckpoint()
								goto Label5
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp004 = !isStop
							} else {
								πTemp004 = true
								µid = πTemp002
							}
							if πE != nil || !πTemp004 {
								continue
							}
							πF.PushCheckpoint(3)
							// line 1565: SubElement(el, 'text:reference-mark', attrib={
							πF.SetLineno(1565)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp005[0] = µel
							πTemp005[1] = πg.NewStr("text:reference-mark").ToObject()
							πTemp006 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µid, "id"); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:name").ToObject(), µid); πE != nil {
								continue
							}
							πTemp002 = πTemp006.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp002.Call(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							continue
						Label4:
							if πE != nil || πR != nil {
								continue
							}
						Label5:
							goto Label2
						Label2:
							// line 1567: self.pending_ids = []
							πF.SetLineno(1567)
							πTemp005 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp005...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßpending_ids, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßappend_pending_ids.ToObject(), πTemp031); πE != nil {
						continue
					}
					// line 1569: def set_current_element(self, el):
					πF.SetLineno(1569)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "el", Def: nil}
					πTemp032 = πg.NewFunction(πg.NewCode("set_current_element", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µel *πg.Object = πArgs[1]
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1570: self.current_element = el
							πF.SetLineno(1570)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcurrent_element, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_current_element.ToObject(), πTemp032); πE != nil {
						continue
					}
					// line 1572: def set_to_parent(self):
					πF.SetLineno(1572)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp033 = πg.NewFunction(πg.NewCode("set_to_parent", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1573: self.current_element = self.current_element.getparent()
							πF.SetLineno(1573)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßgetparent, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcurrent_element, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_to_parent.ToObject(), πTemp033); πE != nil {
						continue
					}
					// line 1575: def generate_labeled_block(self, node, label):
					πF.SetLineno(1575)
					πTemp003 = make([]πg.Param, 3)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "label", Def: nil}
					πTemp034 = πg.NewFunction(πg.NewCode("generate_labeled_block", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µlabel *πg.Object = πArgs[2]
						_ = µlabel
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.Dict
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πTemp010 πg.KWArgs
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1576: label = '%s:' % (self.language.labels[label], )
							πF.SetLineno(1576)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πTemp003 = µlabel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßlanguage, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßlabels, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp006, πTemp003); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(πTemp004).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s:").ToObject(), πTemp002); πE != nil {
								continue
							}
							µlabel = πTemp001
							// line 1577: el = self.append_p('textbody')
							πF.SetLineno(1577)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel = πTemp002
							// line 1578: el1 = SubElement(
							πF.SetLineno(1578)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp007[0] = µel
							πTemp007[1] = πg.NewStr("text:span").ToObject()
							πTemp008 = πg.NewDict()
							πTemp009 = πF.MakeArgs(1)
							πTemp009[0] = ßstrong.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							if πE = πTemp008.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp008.ToObject()
							πTemp010 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, πTemp010); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel1 = πTemp002
							// line 1581: el1.text = label
							πF.SetLineno(1581)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlabel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1582: el = self.append_p('blockindent')
							πF.SetLineno(1582)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßblockindent.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel = πTemp002
							// line 1583: return el
							πF.SetLineno(1583)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πR = µel
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßgenerate_labeled_block.ToObject(), πTemp034); πE != nil {
						continue
					}
					// line 1585: def generate_labeled_line(self, node, label):
					πF.SetLineno(1585)
					πTemp003 = make([]πg.Param, 3)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "label", Def: nil}
					πTemp035 = πg.NewFunction(πg.NewCode("generate_labeled_line", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µlabel *πg.Object = πArgs[2]
						_ = µlabel
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.Dict
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πTemp010 πg.KWArgs
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1586: label = '%s:' % (self.language.labels[label], )
							πF.SetLineno(1586)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πTemp003 = µlabel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßlanguage, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßlabels, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp006, πTemp003); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(πTemp004).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s:").ToObject(), πTemp002); πE != nil {
								continue
							}
							µlabel = πTemp001
							// line 1587: el = self.append_p('textbody')
							πF.SetLineno(1587)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel = πTemp002
							// line 1588: el1 = SubElement(
							πF.SetLineno(1588)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp007[0] = µel
							πTemp007[1] = πg.NewStr("text:span").ToObject()
							πTemp008 = πg.NewDict()
							πTemp009 = πF.MakeArgs(1)
							πTemp009[0] = ßstrong.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							if πE = πTemp008.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp008.ToObject()
							πTemp010 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, πTemp010); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel1 = πTemp002
							// line 1591: el1.text = label
							πF.SetLineno(1591)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlabel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 1592: el1.tail = node.astext()
							πF.SetLineno(1592)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtail, πTemp001); πE != nil {
								continue
							}
							// line 1593: return el
							πF.SetLineno(1593)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πR = µel
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßgenerate_labeled_line.ToObject(), πTemp035); πE != nil {
						continue
					}
					// line 1595: def encode(self, text):
					πF.SetLineno(1595)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "text", Def: nil}
					πTemp036 = πg.NewFunction(πg.NewCode("encode", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtext *πg.Object = πArgs[1]
						_ = µtext
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1596: text = text.replace('\n', " ")
							πF.SetLineno(1596)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							πTemp001[1] = πg.NewStr(" ").ToObject()
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtext, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtext = πTemp003
							// line 1597: return text
							πF.SetLineno(1597)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πR = µtext
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßencode.ToObject(), πTemp036); πE != nil {
						continue
					}
					// line 1606: def dispatch_visit(self, node):
					πF.SetLineno(1606)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp037 = πg.NewFunction(πg.NewCode("dispatch_visit", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1607: """Override to catch basic attributes which many nodes have."""
							πF.SetLineno(1607)
							// line 1608: self.handle_basic_atts(node)
							πF.SetLineno(1608)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßhandle_basic_atts, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1609: nodes.GenericNodeVisitor.dispatch_visit(self, node)
							πF.SetLineno(1609)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[1] = µnode
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßGenericNodeVisitor, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßdispatch_visit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdispatch_visit.ToObject(), πTemp037); πE != nil {
						continue
					}
					// line 1607: """Override to catch basic attributes which many nodes have."""
					πF.SetLineno(1607)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp038}, πg.NewStr("Override to catch basic attributes which many nodes have.").ToObject()); πE != nil {
						continue
					}
					if πTemp039, πE = πg.ResolveClass(πF, πClass, nil, ßdispatch_visit); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp039, ß__doc__, πTemp038); πE != nil {
						continue
					}
					// line 1611: def handle_basic_atts(self, node):
					πF.SetLineno(1611)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp038 = πg.NewFunction(πg.NewCode("handle_basic_atts", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πTemp004, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßElement, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp005
							if πTemp004, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp001 = πTemp005
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label1
							}
							πTemp004 = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							πTemp001 = πTemp005
						Label1:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							goto Label3
							// line 1612: if isinstance(node, nodes.Element) and node['ids']:
							πF.SetLineno(1612)
						Label2:
							// line 1613: self.pending_ids += node['ids']
							πF.SetLineno(1613)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpending_ids, nil); πE != nil {
								continue
							}
							πTemp004 = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IAdd(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßpending_ids, πTemp004); πE != nil {
								continue
							}
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßhandle_basic_atts.ToObject(), πTemp038); πE != nil {
						continue
					}
					// line 1615: def default_visit(self, node):
					πF.SetLineno(1615)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp039 = πg.NewFunction(πg.NewCode("default_visit", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1616: self.document.reporter.warning('missing visit_%s' % (node.tagname, ))
							πF.SetLineno(1616)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßtagname, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp004).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("missing visit_%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdefault_visit.ToObject(), πTemp039); πE != nil {
						continue
					}
					// line 1618: def default_departure(self, node):
					πF.SetLineno(1618)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp040 = πg.NewFunction(πg.NewCode("default_departure", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1619: self.document.reporter.warning('missing depart_%s' % (node.tagname, ))
							πF.SetLineno(1619)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßtagname, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp004).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("missing depart_%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdefault_departure.ToObject(), πTemp040); πE != nil {
						continue
					}
					// line 1621: def visit_Text(self, node):
					πF.SetLineno(1621)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp041 = πg.NewFunction(πg.NewCode("visit_Text", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µtext *πg.Object = πg.UnboundLocal
						_ = µtext
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßliteral_block, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 1623: if isinstance(node.parent, docutils.nodes.literal_block):
							πF.SetLineno(1623)
						Label1:
							// line 1624: return
							πF.SetLineno(1624)
							πR = πg.None
							continue
							goto Label2
						Label2:
							// line 1625: text = node.astext()
							πF.SetLineno(1625)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtext = πTemp003
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.GT(πF, πTemp005, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label3
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßtext, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 1628: if len(self.current_element) > 0:
							πF.SetLineno(1628)
						Label3:
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßtail, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label7
							}
							goto Label8
							// line 1629: if self.current_element[-1].tail:
							πF.SetLineno(1629)
						Label7:
							// line 1630: self.current_element[-1].tail += text
							πF.SetLineno(1630)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßtail, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, πTemp002, µtext); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp005 = πTemp006
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp007, πTemp005); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp006, ßtail, πTemp003); πE != nil {
								continue
							}
							goto Label9
						Label8:
							// line 1632: self.current_element[-1].tail = text
							πF.SetLineno(1632)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µtext); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp006, πTemp003); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp005, ßtail, πTemp002); πE != nil {
								continue
							}
							goto Label9
						Label9:
							goto Label6
							// line 1634: if self.current_element.text:
							πF.SetLineno(1634)
						Label4:
							// line 1635: self.current_element.text += text
							πF.SetLineno(1635)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßtext, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp003, µtext); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp005, ßtext, πTemp002); πE != nil {
								continue
							}
							goto Label6
						Label5:
							// line 1637: self.current_element.text = text
							πF.SetLineno(1637)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µtext); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp003, ßtext, πTemp002); πE != nil {
								continue
							}
							goto Label6
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_Text.ToObject(), πTemp041); πE != nil {
						continue
					}
					// line 1639: def depart_Text(self, node):
					πF.SetLineno(1639)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp042 = πg.NewFunction(πg.NewCode("depart_Text", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1640: pass
							πF.SetLineno(1640)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_Text.ToObject(), πTemp042); πE != nil {
						continue
					}
					// line 1646: def visit_address(self, node):
					πF.SetLineno(1646)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp043 = πg.NewFunction(πg.NewCode("visit_address", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1647: el = self.generate_labeled_block(node, 'address')
							πF.SetLineno(1647)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßaddress.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_labeled_block, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 1648: self.set_current_element(el)
							πF.SetLineno(1648)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_address.ToObject(), πTemp043); πE != nil {
						continue
					}
					// line 1650: def depart_address(self, node):
					πF.SetLineno(1650)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp044 = πg.NewFunction(πg.NewCode("depart_address", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1651: self.set_to_parent()
							πF.SetLineno(1651)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_address.ToObject(), πTemp044); πE != nil {
						continue
					}
					// line 1653: def visit_author(self, node):
					πF.SetLineno(1653)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp045 = πg.NewFunction(πg.NewCode("visit_author", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßauthors, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 1654: if isinstance(node.parent, nodes.authors):
							πF.SetLineno(1654)
						Label1:
							// line 1655: el = self.append_p('blockindent')
							πF.SetLineno(1655)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßblockindent.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							goto Label3
						Label2:
							// line 1657: el = self.generate_labeled_block(node, 'author')
							πF.SetLineno(1657)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßauthor.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_labeled_block, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							goto Label3
						Label3:
							// line 1658: self.set_current_element(el)
							πF.SetLineno(1658)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_author.ToObject(), πTemp045); πE != nil {
						continue
					}
					// line 1660: def depart_author(self, node):
					πF.SetLineno(1660)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp046 = πg.NewFunction(πg.NewCode("depart_author", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1661: self.set_to_parent()
							πF.SetLineno(1661)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_author.ToObject(), πTemp046); πE != nil {
						continue
					}
					// line 1663: def visit_authors(self, node):
					πF.SetLineno(1663)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp047 = πg.NewFunction(πg.NewCode("visit_authors", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µlabel *πg.Object = πg.UnboundLocal
						_ = µlabel
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.Dict
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πTemp010 πg.KWArgs
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1664: label = '%s:' % (self.language.labels['authors'], )
							πF.SetLineno(1664)
							πTemp003 = ßauthors.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßlanguage, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßlabels, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp006, πTemp003); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(πTemp004).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s:").ToObject(), πTemp002); πE != nil {
								continue
							}
							µlabel = πTemp001
							// line 1665: el = self.append_p('textbody')
							πF.SetLineno(1665)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel = πTemp002
							// line 1666: el1 = SubElement(
							πF.SetLineno(1666)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp007[0] = µel
							πTemp007[1] = πg.NewStr("text:span").ToObject()
							πTemp008 = πg.NewDict()
							πTemp009 = πF.MakeArgs(1)
							πTemp009[0] = ßstrong.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							if πE = πTemp008.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp008.ToObject()
							πTemp010 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, πTemp010); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel1 = πTemp002
							// line 1669: el1.text = label
							πF.SetLineno(1669)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlabel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_authors.ToObject(), πTemp047); πE != nil {
						continue
					}
					// line 1671: def depart_authors(self, node):
					πF.SetLineno(1671)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp048 = πg.NewFunction(πg.NewCode("depart_authors", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1672: pass
							πF.SetLineno(1672)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_authors.ToObject(), πTemp048); πE != nil {
						continue
					}
					// line 1674: def visit_contact(self, node):
					πF.SetLineno(1674)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp049 = πg.NewFunction(πg.NewCode("visit_contact", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1675: el = self.generate_labeled_block(node, 'contact')
							πF.SetLineno(1675)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßcontact.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_labeled_block, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 1676: self.set_current_element(el)
							πF.SetLineno(1676)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_contact.ToObject(), πTemp049); πE != nil {
						continue
					}
					// line 1678: def depart_contact(self, node):
					πF.SetLineno(1678)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp050 = πg.NewFunction(πg.NewCode("depart_contact", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1679: self.set_to_parent()
							πF.SetLineno(1679)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_contact.ToObject(), πTemp050); πE != nil {
						continue
					}
					// line 1681: def visit_copyright(self, node):
					πF.SetLineno(1681)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp051 = πg.NewFunction(πg.NewCode("visit_copyright", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1682: el = self.generate_labeled_block(node, 'copyright')
							πF.SetLineno(1682)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßcopyright.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_labeled_block, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 1683: self.set_current_element(el)
							πF.SetLineno(1683)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_copyright.ToObject(), πTemp051); πE != nil {
						continue
					}
					// line 1685: def depart_copyright(self, node):
					πF.SetLineno(1685)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp052 = πg.NewFunction(πg.NewCode("depart_copyright", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1686: self.set_to_parent()
							πF.SetLineno(1686)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_copyright.ToObject(), πTemp052); πE != nil {
						continue
					}
					// line 1688: def visit_date(self, node):
					πF.SetLineno(1688)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp053 = πg.NewFunction(πg.NewCode("visit_date", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1689: self.generate_labeled_line(node, 'date')
							πF.SetLineno(1689)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßdate.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_labeled_line, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_date.ToObject(), πTemp053); πE != nil {
						continue
					}
					// line 1691: def depart_date(self, node):
					πF.SetLineno(1691)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp054 = πg.NewFunction(πg.NewCode("depart_date", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1692: pass
							πF.SetLineno(1692)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_date.ToObject(), πTemp054); πE != nil {
						continue
					}
					// line 1694: def visit_organization(self, node):
					πF.SetLineno(1694)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp055 = πg.NewFunction(πg.NewCode("visit_organization", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1695: el = self.generate_labeled_block(node, 'organization')
							πF.SetLineno(1695)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßorganization.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_labeled_block, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 1696: self.set_current_element(el)
							πF.SetLineno(1696)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_organization.ToObject(), πTemp055); πE != nil {
						continue
					}
					// line 1698: def depart_organization(self, node):
					πF.SetLineno(1698)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp056 = πg.NewFunction(πg.NewCode("depart_organization", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1699: self.set_to_parent()
							πF.SetLineno(1699)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_organization.ToObject(), πTemp056); πE != nil {
						continue
					}
					// line 1701: def visit_status(self, node):
					πF.SetLineno(1701)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp057 = πg.NewFunction(πg.NewCode("visit_status", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1702: el = self.generate_labeled_block(node, 'status')
							πF.SetLineno(1702)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßstatus.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_labeled_block, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 1703: self.set_current_element(el)
							πF.SetLineno(1703)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_status.ToObject(), πTemp057); πE != nil {
						continue
					}
					// line 1705: def depart_status(self, node):
					πF.SetLineno(1705)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp058 = πg.NewFunction(πg.NewCode("depart_status", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1706: self.set_to_parent()
							πF.SetLineno(1706)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_status.ToObject(), πTemp058); πE != nil {
						continue
					}
					// line 1708: def visit_revision(self, node):
					πF.SetLineno(1708)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp059 = πg.NewFunction(πg.NewCode("visit_revision", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1709: self.generate_labeled_line(node, 'revision')
							πF.SetLineno(1709)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßrevision.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_labeled_line, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_revision.ToObject(), πTemp059); πE != nil {
						continue
					}
					// line 1711: def depart_revision(self, node):
					πF.SetLineno(1711)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp060 = πg.NewFunction(πg.NewCode("depart_revision", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1712: pass
							πF.SetLineno(1712)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_revision.ToObject(), πTemp060); πE != nil {
						continue
					}
					// line 1714: def visit_version(self, node):
					πF.SetLineno(1714)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp061 = πg.NewFunction(πg.NewCode("visit_version", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1715: self.generate_labeled_line(node, 'version')
							πF.SetLineno(1715)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßversion.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_labeled_line, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_version.ToObject(), πTemp061); πE != nil {
						continue
					}
					// line 1718: def depart_version(self, node):
					πF.SetLineno(1718)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp062 = πg.NewFunction(πg.NewCode("depart_version", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1720: pass
							πF.SetLineno(1720)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_version.ToObject(), πTemp062); πE != nil {
						continue
					}
					// line 1722: def visit_attribution(self, node):
					πF.SetLineno(1722)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp063 = πg.NewFunction(πg.NewCode("visit_attribution", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1723: self.append_p('attribution', node.astext())
							πF.SetLineno(1723)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ßattribution.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_attribution.ToObject(), πTemp063); πE != nil {
						continue
					}
					// line 1725: def depart_attribution(self, node):
					πF.SetLineno(1725)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp064 = πg.NewFunction(πg.NewCode("depart_attribution", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1726: pass
							πF.SetLineno(1726)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_attribution.ToObject(), πTemp064); πE != nil {
						continue
					}
					// line 1728: def visit_block_quote(self, node):
					πF.SetLineno(1728)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp065 = πg.NewFunction(πg.NewCode("visit_block_quote", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, πTemp003, ßepigraph.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, πTemp003, ßhighlights.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label2
							}
							goto Label3
							// line 1729: if 'epigraph' in node.attributes['classes']:
							πF.SetLineno(1729)
						Label1:
							// line 1730: self.paragraph_style_stack.append(self.rststyle('epigraph'))
							πF.SetLineno(1730)
							πTemp006 = πF.MakeArgs(1)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßepigraph.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 1731: self.blockstyle = self.rststyle('epigraph')
							πF.SetLineno(1731)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßepigraph.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßblockstyle, πTemp001); πE != nil {
								continue
							}
							goto Label4
							// line 1732: elif 'highlights' in node.attributes['classes']:
							πF.SetLineno(1732)
						Label2:
							// line 1733: self.paragraph_style_stack.append(self.rststyle('highlights'))
							πF.SetLineno(1733)
							πTemp006 = πF.MakeArgs(1)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßhighlights.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 1734: self.blockstyle = self.rststyle('highlights')
							πF.SetLineno(1734)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßhighlights.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßblockstyle, πTemp001); πE != nil {
								continue
							}
							goto Label4
						Label3:
							// line 1736: self.paragraph_style_stack.append(self.rststyle('blockquote'))
							πF.SetLineno(1736)
							πTemp006 = πF.MakeArgs(1)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßblockquote.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 1737: self.blockstyle = self.rststyle('blockquote')
							πF.SetLineno(1737)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßblockquote.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßblockstyle, πTemp001); πE != nil {
								continue
							}
							goto Label4
						Label4:
							// line 1738: self.line_indent_level += 1
							πF.SetLineno(1738)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßline_indent_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßline_indent_level, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_block_quote.ToObject(), πTemp065); πE != nil {
						continue
					}
					// line 1740: def depart_block_quote(self, node):
					πF.SetLineno(1740)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp066 = πg.NewFunction(πg.NewCode("depart_block_quote", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1741: self.paragraph_style_stack.pop()
							πF.SetLineno(1741)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1742: self.blockstyle = ''
							πF.SetLineno(1742)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, ß.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßblockstyle, πTemp001); πE != nil {
								continue
							}
							// line 1743: self.line_indent_level -= 1
							πF.SetLineno(1743)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßline_indent_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßline_indent_level, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_block_quote.ToObject(), πTemp066); πE != nil {
						continue
					}
					// line 1745: def visit_bullet_list(self, node):
					πF.SetLineno(1745)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp067 = πg.NewFunction(πg.NewCode("visit_bullet_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 *πg.Dict
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πTemp011 πg.KWArgs
						_ = πTemp011
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1746: self.list_level += 1
							πF.SetLineno(1746)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlist_level, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_table_of_contents, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1747: if self.in_table_of_contents:
							πF.SetLineno(1747)
						Label1:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßgenerate_oowriter_toc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label4
							}
							goto Label5
							// line 1748: if self.settings.generate_oowriter_toc:
							πF.SetLineno(1748)
						Label4:
							// line 1749: pass
							πF.SetLineno(1749)
							goto Label6
						Label5:
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µnode, ßclasses.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp004).ToObject()
							πTemp001 = πTemp002
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp003 {
								goto Label7
							}
							πTemp005 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp007, πTemp005); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, πTemp006, πg.NewStr("auto-toc").ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp004).ToObject()
							πTemp001 = πTemp002
						Label7:
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label8
							}
							goto Label9
							// line 1751: if 'classes' in node and \
							πF.SetLineno(1751)
						Label8:
							// line 1753: el = SubElement(self.current_element, 'text:list', attrib={
							πF.SetLineno(1753)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp001
							πTemp008[1] = πg.NewStr("text:list").ToObject()
							πTemp009 = πg.NewDict()
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = ßtocenumlist.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πE = πTemp009.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp009.ToObject()
							πTemp011 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							µel = πTemp002
							// line 1756: self.list_style_stack.append(self.rststyle('enumitem'))
							πF.SetLineno(1756)
							πTemp008 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = ßenumitem.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp008[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							goto Label10
						Label9:
							// line 1758: el = SubElement(self.current_element, 'text:list', attrib={
							πF.SetLineno(1758)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp001
							πTemp008[1] = πg.NewStr("text:list").ToObject()
							πTemp009 = πg.NewDict()
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = ßtocbulletlist.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πE = πTemp009.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp009.ToObject()
							πTemp011 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							µel = πTemp002
							// line 1761: self.list_style_stack.append(self.rststyle('bulletitem'))
							πF.SetLineno(1761)
							πTemp008 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = ßbulletitem.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp008[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							goto Label10
						Label10:
							// line 1762: self.set_current_element(el)
							πF.SetLineno(1762)
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp008[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							goto Label6
						Label6:
							goto Label3
						Label2:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßblockstyle, nil); πE != nil {
								continue
							}
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = ßblockquote.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label11
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßblockstyle, nil); πE != nil {
								continue
							}
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = ßhighlights.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label12
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßblockstyle, nil); πE != nil {
								continue
							}
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = ßepigraph.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp006); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label13
							}
							goto Label14
							// line 1764: if self.blockstyle == self.rststyle('blockquote'):
							πF.SetLineno(1764)
						Label11:
							// line 1765: el = SubElement(self.current_element, 'text:list', attrib={
							πF.SetLineno(1765)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp001
							πTemp008[1] = πg.NewStr("text:list").ToObject()
							πTemp009 = πg.NewDict()
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = πg.NewStr("blockquote-bulletlist").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πE = πTemp009.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp009.ToObject()
							πTemp011 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							µel = πTemp002
							// line 1768: self.list_style_stack.append(
							πF.SetLineno(1768)
							πTemp008 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = πg.NewStr("blockquote-bulletitem").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp008[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							goto Label15
							// line 1770: elif self.blockstyle == self.rststyle('highlights'):
							πF.SetLineno(1770)
						Label12:
							// line 1771: el = SubElement(self.current_element, 'text:list', attrib={
							πF.SetLineno(1771)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp001
							πTemp008[1] = πg.NewStr("text:list").ToObject()
							πTemp009 = πg.NewDict()
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = πg.NewStr("highlights-bulletlist").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πE = πTemp009.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp009.ToObject()
							πTemp011 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							µel = πTemp002
							// line 1774: self.list_style_stack.append(
							πF.SetLineno(1774)
							πTemp008 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = πg.NewStr("highlights-bulletitem").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp008[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							goto Label15
							// line 1776: elif self.blockstyle == self.rststyle('epigraph'):
							πF.SetLineno(1776)
						Label13:
							// line 1777: el = SubElement(self.current_element, 'text:list', attrib={
							πF.SetLineno(1777)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp001
							πTemp008[1] = πg.NewStr("text:list").ToObject()
							πTemp009 = πg.NewDict()
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = πg.NewStr("epigraph-bulletlist").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πE = πTemp009.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp009.ToObject()
							πTemp011 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							µel = πTemp002
							// line 1780: self.list_style_stack.append(
							πF.SetLineno(1780)
							πTemp008 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = πg.NewStr("epigraph-bulletitem").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp008[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							goto Label15
						Label14:
							// line 1783: el = SubElement(self.current_element, 'text:list', attrib={
							πF.SetLineno(1783)
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp001
							πTemp008[1] = πg.NewStr("text:list").ToObject()
							πTemp009 = πg.NewDict()
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = ßbulletlist.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πE = πTemp009.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp009.ToObject()
							πTemp011 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, πTemp011); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							µel = πTemp002
							// line 1786: self.list_style_stack.append(self.rststyle('bulletitem'))
							πF.SetLineno(1786)
							πTemp008 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = ßbulletitem.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp008[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							goto Label15
						Label15:
							// line 1787: self.set_current_element(el)
							πF.SetLineno(1787)
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp008[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_bullet_list.ToObject(), πTemp067); πE != nil {
						continue
					}
					// line 1789: def depart_bullet_list(self, node):
					πF.SetLineno(1789)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp068 = πg.NewFunction(πg.NewCode("depart_bullet_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_table_of_contents, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1790: if self.in_table_of_contents:
							πF.SetLineno(1790)
						Label1:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßgenerate_oowriter_toc, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label4
							}
							goto Label5
							// line 1791: if self.settings.generate_oowriter_toc:
							πF.SetLineno(1791)
						Label4:
							// line 1792: pass
							πF.SetLineno(1792)
							goto Label6
						Label5:
							// line 1794: self.set_to_parent()
							πF.SetLineno(1794)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1795: self.list_style_stack.pop()
							πF.SetLineno(1795)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label6
						Label6:
							goto Label3
						Label2:
							// line 1797: self.set_to_parent()
							πF.SetLineno(1797)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1798: self.list_style_stack.pop()
							πF.SetLineno(1798)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label3
						Label3:
							// line 1799: self.list_level -= 1
							πF.SetLineno(1799)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_level, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlist_level, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_bullet_list.ToObject(), πTemp068); πE != nil {
						continue
					}
					// line 1801: def visit_caption(self, node):
					πF.SetLineno(1801)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp069 = πg.NewFunction(πg.NewCode("visit_caption", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßSkipChildren, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1802: raise nodes.SkipChildren()
							πF.SetLineno(1802)
							πE = πF.Raise(πTemp001, nil, nil)
							continue
							// line 1803: pass
							πF.SetLineno(1803)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_caption.ToObject(), πTemp069); πE != nil {
						continue
					}
					// line 1805: def depart_caption(self, node):
					πF.SetLineno(1805)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp070 = πg.NewFunction(πg.NewCode("depart_caption", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1806: pass
							πF.SetLineno(1806)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_caption.ToObject(), πTemp070); πE != nil {
						continue
					}
					// line 1808: def visit_comment(self, node):
					πF.SetLineno(1808)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp071 = πg.NewFunction(πg.NewCode("visit_comment", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1809: el = self.append_p('textbody')
							πF.SetLineno(1809)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 1810: el1 = SubElement(el, 'office:annotation', attrib={})
							πF.SetLineno(1810)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							πTemp001[1] = πg.NewStr("office:annotation").ToObject()
							πTemp004 = πg.NewDict()
							πTemp002 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 1811: el2 = SubElement(el1, 'dc:creator', attrib={})
							πF.SetLineno(1811)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							πTemp001[1] = πg.NewStr("dc:creator").ToObject()
							πTemp004 = πg.NewDict()
							πTemp002 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel2 = πTemp003
							// line 1812: s1 = os.environ.get('USER', '')
							πF.SetLineno(1812)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ßUSER.ToObject()
							πTemp001[1] = ß.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßenviron, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µs1 = πTemp003
							// line 1813: el2.text = s1
							πF.SetLineno(1813)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µs1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel2, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 1814: el2 = SubElement(el1, 'text:p', attrib={})
							πF.SetLineno(1814)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							πTemp001[1] = πg.NewStr("text:p").ToObject()
							πTemp004 = πg.NewDict()
							πTemp002 = πTemp004.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel2 = πTemp003
							// line 1815: el2.text = node.astext()
							πF.SetLineno(1815)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel2, ßtext, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_comment.ToObject(), πTemp071); πE != nil {
						continue
					}
					// line 1817: def depart_comment(self, node):
					πF.SetLineno(1817)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp072 = πg.NewFunction(πg.NewCode("depart_comment", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1818: pass
							πF.SetLineno(1818)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_comment.ToObject(), πTemp072); πE != nil {
						continue
					}
					// line 1820: def visit_compound(self, node):
					πF.SetLineno(1820)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp073 = πg.NewFunction(πg.NewCode("visit_compound", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1822: pass
							πF.SetLineno(1822)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_compound.ToObject(), πTemp073); πE != nil {
						continue
					}
					// line 1824: def depart_compound(self, node):
					πF.SetLineno(1824)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp074 = πg.NewFunction(πg.NewCode("depart_compound", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1825: pass
							πF.SetLineno(1825)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_compound.ToObject(), πTemp074); πE != nil {
						continue
					}
					// line 1827: def visit_container(self, node):
					πF.SetLineno(1827)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp075 = πg.NewFunction(πg.NewCode("visit_container", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µstyles *πg.Object = πg.UnboundLocal
						_ = µstyles
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1828: styles = node.attributes.get('classes', ())
							πF.SetLineno(1828)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ßclasses.ToObject()
							πTemp002 = πg.NewTuple0().ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µstyles = πTemp002
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyles, "styles"); πE != nil {
								continue
							}
							πTemp001[0] = µstyles
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.GT(πF, πTemp004, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 1829: if len(styles) > 0:
							πF.SetLineno(1829)
						Label1:
							// line 1830: self.paragraph_style_stack.append(self.rststyle(styles[0]))
							πF.SetLineno(1830)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(1)
							πTemp002 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µstyles, "styles"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µstyles, πTemp002); πE != nil {
								continue
							}
							πTemp006[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_container.ToObject(), πTemp075); πE != nil {
						continue
					}
					// line 1832: def depart_container(self, node):
					πF.SetLineno(1832)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp076 = πg.NewFunction(πg.NewCode("depart_container", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µstyles *πg.Object = πg.UnboundLocal
						_ = µstyles
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1833: styles = node.attributes.get('classes', ())
							πF.SetLineno(1833)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ßclasses.ToObject()
							πTemp002 = πg.NewTuple0().ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µstyles = πTemp002
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyles, "styles"); πE != nil {
								continue
							}
							πTemp001[0] = µstyles
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.GT(πF, πTemp004, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 1834: if len(styles) > 0:
							πF.SetLineno(1834)
						Label1:
							// line 1835: self.paragraph_style_stack.pop()
							πF.SetLineno(1835)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_container.ToObject(), πTemp076); πE != nil {
						continue
					}
					// line 1837: def visit_decoration(self, node):
					πF.SetLineno(1837)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp077 = πg.NewFunction(πg.NewCode("visit_decoration", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1838: pass
							πF.SetLineno(1838)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_decoration.ToObject(), πTemp077); πE != nil {
						continue
					}
					// line 1840: def depart_decoration(self, node):
					πF.SetLineno(1840)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp078 = πg.NewFunction(πg.NewCode("depart_decoration", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1841: pass
							πF.SetLineno(1841)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_decoration.ToObject(), πTemp078); πE != nil {
						continue
					}
					// line 1843: def visit_definition_list(self, node):
					πF.SetLineno(1843)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp079 = πg.NewFunction(πg.NewCode("visit_definition_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1844: self.def_list_level += 1
							πF.SetLineno(1844)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdef_list_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdef_list_level, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßlist_level, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GT(πF, πTemp002, πg.NewInt(5).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1845: if self.list_level > 5:
							πF.SetLineno(1845)
						Label1:
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("max definition list nesting level exceeded").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßRuntimeError); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1846: raise RuntimeError(
							πF.SetLineno(1846)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_definition_list.ToObject(), πTemp079); πE != nil {
						continue
					}
					// line 1849: def depart_definition_list(self, node):
					πF.SetLineno(1849)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp080 = πg.NewFunction(πg.NewCode("depart_definition_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1850: self.def_list_level -= 1
							πF.SetLineno(1850)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdef_list_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdef_list_level, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_definition_list.ToObject(), πTemp080); πE != nil {
						continue
					}
					// line 1852: def visit_definition_list_item(self, node):
					πF.SetLineno(1852)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp081 = πg.NewFunction(πg.NewCode("visit_definition_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1853: pass
							πF.SetLineno(1853)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_definition_list_item.ToObject(), πTemp081); πE != nil {
						continue
					}
					// line 1855: def depart_definition_list_item(self, node):
					πF.SetLineno(1855)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp082 = πg.NewFunction(πg.NewCode("depart_definition_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1856: pass
							πF.SetLineno(1856)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_definition_list_item.ToObject(), πTemp082); πE != nil {
						continue
					}
					// line 1858: def visit_term(self, node):
					πF.SetLineno(1858)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp083 = πg.NewFunction(πg.NewCode("visit_term", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1859: el = self.append_p('deflist-term-%d' % self.def_list_level)
							πF.SetLineno(1859)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßdef_list_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("deflist-term-%d").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 1860: el.text = node.astext()
							πF.SetLineno(1860)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 1861: self.set_current_element(el)
							πF.SetLineno(1861)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßSkipChildren, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1862: raise nodes.SkipChildren()
							πF.SetLineno(1862)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_term.ToObject(), πTemp083); πE != nil {
						continue
					}
					// line 1864: def depart_term(self, node):
					πF.SetLineno(1864)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp084 = πg.NewFunction(πg.NewCode("depart_term", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1865: self.set_to_parent()
							πF.SetLineno(1865)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_term.ToObject(), πTemp084); πE != nil {
						continue
					}
					// line 1867: def visit_definition(self, node):
					πF.SetLineno(1867)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp085 = πg.NewFunction(πg.NewCode("visit_definition", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1868: self.paragraph_style_stack.append(
							πF.SetLineno(1868)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßdef_list_level, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("deflist-def-%d").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1870: self.bumped_list_level_stack.append(ListLevel(1))
							πF.SetLineno(1870)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewInt(1).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßListLevel); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_definition.ToObject(), πTemp085); πE != nil {
						continue
					}
					// line 1872: def depart_definition(self, node):
					πF.SetLineno(1872)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp086 = πg.NewFunction(πg.NewCode("depart_definition", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1873: self.paragraph_style_stack.pop()
							πF.SetLineno(1873)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1874: self.bumped_list_level_stack.pop()
							πF.SetLineno(1874)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_definition.ToObject(), πTemp086); πE != nil {
						continue
					}
					// line 1876: def visit_classifier(self, node):
					πF.SetLineno(1876)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp087 = πg.NewFunction(πg.NewCode("visit_classifier", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.GT(πF, πTemp004, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 1877: if len(self.current_element) > 0:
							πF.SetLineno(1877)
						Label1:
							// line 1878: el = self.current_element[-1]
							πF.SetLineno(1878)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µel = πTemp003
							// line 1879: el1 = SubElement(
							πF.SetLineno(1879)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp002[0] = µel
							πTemp002[1] = πg.NewStr("text:span").ToObject()
							πTemp006 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßemphasis.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001 = πTemp006.ToObject()
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µel1 = πTemp003
							// line 1882: el1.text = ' (%s)' % (node.astext(), )
							πF.SetLineno(1882)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp009).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr(" (%s)").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp003); πE != nil {
								continue
							}
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_classifier.ToObject(), πTemp087); πE != nil {
						continue
					}
					// line 1884: def depart_classifier(self, node):
					πF.SetLineno(1884)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp088 = πg.NewFunction(πg.NewCode("depart_classifier", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1885: pass
							πF.SetLineno(1885)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_classifier.ToObject(), πTemp088); πE != nil {
						continue
					}
					// line 1887: def visit_document(self, node):
					πF.SetLineno(1887)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp089 = πg.NewFunction(πg.NewCode("visit_document", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1888: pass
							πF.SetLineno(1888)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_document.ToObject(), πTemp089); πE != nil {
						continue
					}
					// line 1890: def depart_document(self, node):
					πF.SetLineno(1890)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp090 = πg.NewFunction(πg.NewCode("depart_document", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1891: self.process_footnotes()
							πF.SetLineno(1891)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßprocess_footnotes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_document.ToObject(), πTemp090); πE != nil {
						continue
					}
					// line 1893: def visit_docinfo(self, node):
					πF.SetLineno(1893)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp091 = πg.NewFunction(πg.NewCode("visit_docinfo", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1894: self.section_level += 1
							πF.SetLineno(1894)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_level, πTemp002); πE != nil {
								continue
							}
							// line 1895: self.section_count += 1
							πF.SetLineno(1895)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsection_count, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_count, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_sections, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1896: if self.settings.create_sections:
							πF.SetLineno(1896)
						Label1:
							// line 1897: el = self.append_child(
							πF.SetLineno(1897)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("text:section").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsection_count, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Section%d").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("text:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Sect%d").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 1903: self.set_current_element(el)
							πF.SetLineno(1903)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_docinfo.ToObject(), πTemp091); πE != nil {
						continue
					}
					// line 1905: def depart_docinfo(self, node):
					πF.SetLineno(1905)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp092 = πg.NewFunction(πg.NewCode("depart_docinfo", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1906: self.section_level -= 1
							πF.SetLineno(1906)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_level, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_sections, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1907: if self.settings.create_sections:
							πF.SetLineno(1907)
						Label1:
							// line 1908: self.set_to_parent()
							πF.SetLineno(1908)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_docinfo.ToObject(), πTemp092); πE != nil {
						continue
					}
					// line 1910: def visit_emphasis(self, node):
					πF.SetLineno(1910)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp093 = πg.NewFunction(πg.NewCode("visit_emphasis", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Dict
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1911: el = SubElement(
							πF.SetLineno(1911)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("text:span").ToObject()
							πTemp003 = πg.NewDict()
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßemphasis.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πE = πTemp003.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp002 = πTemp003.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp005
							// line 1914: self.set_current_element(el)
							πF.SetLineno(1914)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_emphasis.ToObject(), πTemp093); πE != nil {
						continue
					}
					// line 1916: def depart_emphasis(self, node):
					πF.SetLineno(1916)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp094 = πg.NewFunction(πg.NewCode("depart_emphasis", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1917: self.set_to_parent()
							πF.SetLineno(1917)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_emphasis.ToObject(), πTemp094); πE != nil {
						continue
					}
					// line 1919: def visit_enumerated_list(self, node):
					πF.SetLineno(1919)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp095 = πg.NewFunction(πg.NewCode("visit_enumerated_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µliststylename *πg.Object = πg.UnboundLocal
						_ = µliststylename
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Dict
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1920: el1 = self.current_element
							πF.SetLineno(1920)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							µel1 = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßblockstyle, nil); πE != nil {
								continue
							}
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßblockquote.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßblockstyle, nil); πE != nil {
								continue
							}
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßhighlights.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label2
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßblockstyle, nil); πE != nil {
								continue
							}
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßepigraph.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Eq(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label3
							}
							goto Label4
							// line 1921: if self.blockstyle == self.rststyle('blockquote'):
							πF.SetLineno(1921)
						Label1:
							// line 1922: el2 = SubElement(el1, 'text:list', attrib={
							πF.SetLineno(1922)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp003[0] = µel1
							πTemp003[1] = πg.NewStr("text:list").ToObject()
							πTemp007 = πg.NewDict()
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = πg.NewStr("blockquote-enumlist").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp002
							// line 1925: self.list_style_stack.append(self.rststyle('blockquote-enumitem'))
							πF.SetLineno(1925)
							πTemp003 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = πg.NewStr("blockquote-enumitem").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label5
							// line 1926: elif self.blockstyle == self.rststyle('highlights'):
							πF.SetLineno(1926)
						Label2:
							// line 1927: el2 = SubElement(el1, 'text:list', attrib={
							πF.SetLineno(1927)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp003[0] = µel1
							πTemp003[1] = πg.NewStr("text:list").ToObject()
							πTemp007 = πg.NewDict()
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = πg.NewStr("highlights-enumlist").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp002
							// line 1930: self.list_style_stack.append(self.rststyle('highlights-enumitem'))
							πF.SetLineno(1930)
							πTemp003 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = πg.NewStr("highlights-enumitem").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label5
							// line 1931: elif self.blockstyle == self.rststyle('epigraph'):
							πF.SetLineno(1931)
						Label3:
							// line 1932: el2 = SubElement(el1, 'text:list', attrib={
							πF.SetLineno(1932)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp003[0] = µel1
							πTemp003[1] = πg.NewStr("text:list").ToObject()
							πTemp007 = πg.NewDict()
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = πg.NewStr("epigraph-enumlist").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp002
							// line 1935: self.list_style_stack.append(self.rststyle('epigraph-enumitem'))
							πF.SetLineno(1935)
							πTemp003 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = πg.NewStr("epigraph-enumitem").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label5
						Label4:
							// line 1937: liststylename = 'enumlist-%s' % (node.get('enumtype', 'arabic'), )
							πF.SetLineno(1937)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = ßenumtype.ToObject()
							πTemp003[1] = ßarabic.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002 = πg.NewTuple1(πTemp005).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("enumlist-%s").ToObject(), πTemp002); πE != nil {
								continue
							}
							µliststylename = πTemp001
							// line 1938: el2 = SubElement(el1, 'text:list', attrib={
							πF.SetLineno(1938)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp003[0] = µel1
							πTemp003[1] = πg.NewStr("text:list").ToObject()
							πTemp007 = πg.NewDict()
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µliststylename, "liststylename"); πE != nil {
								continue
							}
							πTemp008[0] = µliststylename
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp002
							// line 1941: self.list_style_stack.append(self.rststyle('enumitem'))
							πF.SetLineno(1941)
							πTemp003 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = ßenumitem.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label5
						Label5:
							// line 1942: self.set_current_element(el2)
							πF.SetLineno(1942)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_enumerated_list.ToObject(), πTemp095); πE != nil {
						continue
					}
					// line 1944: def depart_enumerated_list(self, node):
					πF.SetLineno(1944)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp096 = πg.NewFunction(πg.NewCode("depart_enumerated_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1945: self.set_to_parent()
							πF.SetLineno(1945)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1946: self.list_style_stack.pop()
							πF.SetLineno(1946)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_enumerated_list.ToObject(), πTemp096); πE != nil {
						continue
					}
					// line 1948: def visit_list_item(self, node):
					πF.SetLineno(1948)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp097 = πg.NewFunction(πg.NewCode("visit_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel3 *πg.Object = πg.UnboundLocal
						_ = µel3
						var µlevel_obj *πg.Object = πg.UnboundLocal
						_ = µlevel_obj
						var µlevel_obj1 *πg.Object = πg.UnboundLocal
						_ = µlevel_obj1
						var µidx *πg.Object = πg.UnboundLocal
						_ = µidx
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 πg.KWArgs
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 11:
								goto Label11
							case 12:
								goto Label12
							case 14:
								goto Label14
							case 15:
								goto Label15
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_table_of_contents, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1952: if self.in_table_of_contents:
							πF.SetLineno(1952)
						Label1:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßgenerate_oowriter_toc, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label4
							}
							goto Label5
							// line 1953: if self.settings.generate_oowriter_toc:
							πF.SetLineno(1953)
						Label4:
							// line 1954: self.paragraph_style_stack.append(
							πF.SetLineno(1954)
							πTemp004 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßlist_level, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp006).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("contents-%d").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label6
						Label5:
							// line 1957: el1 = self.append_child('text:list-item')
							πF.SetLineno(1957)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("text:list-item").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp003
							// line 1958: self.set_current_element(el1)
							πF.SetLineno(1958)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp004[0] = µel1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label6
						Label6:
							goto Label3
						Label2:
							// line 1960: el1 = self.append_child('text:list-item')
							πF.SetLineno(1960)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("text:list-item").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp003
							// line 1961: el3 = el1
							πF.SetLineno(1961)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							µel3 = µel1
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp001, πE = πg.GT(πF, πTemp006, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label7
							}
							goto Label8
							// line 1962: if len(self.bumped_list_level_stack) > 0:
							πF.SetLineno(1962)
						Label7:
							// line 1963: level_obj = self.bumped_list_level_stack[-1]
							πF.SetLineno(1963)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp006, πTemp001); πE != nil {
								continue
							}
							µlevel_obj = πTemp003
							if πE = πg.CheckLocal(πF, µlevel_obj, "level_obj"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µlevel_obj, ßget_sibling, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label9
							}
							goto Label10
							// line 1964: if level_obj.get_sibling():
							πF.SetLineno(1964)
						Label9:
							// line 1965: level_obj.set_nested(False)
							πF.SetLineno(1965)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µlevel_obj, "level_obj"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µlevel_obj, ßset_nested, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(12)
							πTemp002 = false
						Label11:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label13
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µlevel_obj1 = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(11)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlevel_obj1, "level_obj1"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µlevel_obj1, ßget_level, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp008
							if πTemp006, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp003, πE = πg.Iter(πF, πTemp008); πE != nil {
								continue
							}
							πF.PushCheckpoint(15)
							πTemp007 = false
						Label14:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label16
							}
							if πTemp006, πE = πg.Next(πF, πTemp003); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µidx = πTemp006
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(14)
							// line 1968: el2 = self.append_child('text:list', parent=el3)
							πF.SetLineno(1968)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("text:list").ToObject()
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							πTemp010 = πg.KWArgs{
								{"parent", µel3},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, πTemp004, πTemp010); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel2 = πTemp008
							// line 1969: el3 = self.append_child(
							πF.SetLineno(1969)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("text:list-item").ToObject()
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp010 = πg.KWArgs{
								{"parent", µel2},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp006.Call(πF, πTemp004, πTemp010); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel3 = πTemp008
							continue
						Label15:
							if πE != nil || πR != nil {
								continue
							}
						Label16:
							continue
						Label12:
							if πE != nil || πR != nil {
								continue
							}
						Label13:
							goto Label10
						Label10:
							goto Label8
						Label8:
							// line 1971: self.paragraph_style_stack.append(self.list_style_stack[-1])
							πF.SetLineno(1971)
							πTemp004 = πF.MakeArgs(1)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßlist_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp006, πTemp001); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1972: self.set_current_element(el3)
							πF.SetLineno(1972)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							πTemp004[0] = µel3
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_list_item.ToObject(), πTemp097); πE != nil {
						continue
					}
					// line 1974: def depart_list_item(self, node):
					πF.SetLineno(1974)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp098 = πg.NewFunction(πg.NewCode("depart_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µlevel_obj *πg.Object = πg.UnboundLocal
						_ = µlevel_obj
						var µlevel_obj1 *πg.Object = πg.UnboundLocal
						_ = µlevel_obj1
						var µidx *πg.Object = πg.UnboundLocal
						_ = µidx
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 11:
								goto Label11
							case 12:
								goto Label12
							case 14:
								goto Label14
							case 15:
								goto Label15
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_table_of_contents, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1975: if self.in_table_of_contents:
							πF.SetLineno(1975)
						Label1:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßgenerate_oowriter_toc, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label4
							}
							goto Label5
							// line 1976: if self.settings.generate_oowriter_toc:
							πF.SetLineno(1976)
						Label4:
							// line 1977: self.paragraph_style_stack.pop()
							πF.SetLineno(1977)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label6
						Label5:
							// line 1979: self.set_to_parent()
							πF.SetLineno(1979)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label6
						Label6:
							goto Label3
						Label2:
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp001, πE = πg.GT(πF, πTemp005, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label7
							}
							goto Label8
							// line 1981: if len(self.bumped_list_level_stack) > 0:
							πF.SetLineno(1981)
						Label7:
							// line 1982: level_obj = self.bumped_list_level_stack[-1]
							πF.SetLineno(1982)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							µlevel_obj = πTemp003
							if πE = πg.CheckLocal(πF, µlevel_obj, "level_obj"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µlevel_obj, ßget_sibling, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label9
							}
							goto Label10
							// line 1983: if level_obj.get_sibling():
							πF.SetLineno(1983)
						Label9:
							// line 1984: level_obj.set_nested(True)
							πF.SetLineno(1984)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µlevel_obj, "level_obj"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µlevel_obj, ßset_nested, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(12)
							πTemp002 = false
						Label11:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label13
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µlevel_obj1 = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(11)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlevel_obj1, "level_obj1"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µlevel_obj1, ßget_level, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp007
							if πTemp005, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp003, πE = πg.Iter(πF, πTemp007); πE != nil {
								continue
							}
							πF.PushCheckpoint(15)
							πTemp006 = false
						Label14:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label16
							}
							if πTemp005, πE = πg.Next(πF, πTemp003); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µidx = πTemp005
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(14)
							// line 1987: self.set_to_parent()
							πF.SetLineno(1987)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1988: self.set_to_parent()
							πF.SetLineno(1988)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							continue
						Label15:
							if πE != nil || πR != nil {
								continue
							}
						Label16:
							continue
						Label12:
							if πE != nil || πR != nil {
								continue
							}
						Label13:
							goto Label10
						Label10:
							goto Label8
						Label8:
							// line 1989: self.paragraph_style_stack.pop()
							πF.SetLineno(1989)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1990: self.set_to_parent()
							πF.SetLineno(1990)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_list_item.ToObject(), πTemp098); πE != nil {
						continue
					}
					// line 1992: def visit_header(self, node):
					πF.SetLineno(1992)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp099 = πg.NewFunction(πg.NewCode("visit_header", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1993: self.in_header = True
							πF.SetLineno(1993)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_header, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_header.ToObject(), πTemp099); πE != nil {
						continue
					}
					// line 1995: def depart_header(self, node):
					πF.SetLineno(1995)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp100 = πg.NewFunction(πg.NewCode("depart_header", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1996: self.in_header = False
							πF.SetLineno(1996)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_header, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_header.ToObject(), πTemp100); πE != nil {
						continue
					}
					// line 1998: def visit_footer(self, node):
					πF.SetLineno(1998)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp101 = πg.NewFunction(πg.NewCode("visit_footer", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1999: self.in_footer = True
							πF.SetLineno(1999)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_footer, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_footer.ToObject(), πTemp101); πE != nil {
						continue
					}
					// line 2001: def depart_footer(self, node):
					πF.SetLineno(2001)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp102 = πg.NewFunction(πg.NewCode("depart_footer", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2002: self.in_footer = False
							πF.SetLineno(2002)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_footer, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_footer.ToObject(), πTemp102); πE != nil {
						continue
					}
					// line 2004: def visit_field(self, node):
					πF.SetLineno(2004)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp103 = πg.NewFunction(πg.NewCode("visit_field", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2005: pass
							πF.SetLineno(2005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_field.ToObject(), πTemp103); πE != nil {
						continue
					}
					// line 2007: def depart_field(self, node):
					πF.SetLineno(2007)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp104 = πg.NewFunction(πg.NewCode("depart_field", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2008: pass
							πF.SetLineno(2008)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_field.ToObject(), πTemp104); πE != nil {
						continue
					}
					// line 2010: def visit_field_list(self, node):
					πF.SetLineno(2010)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp105 = πg.NewFunction(πg.NewCode("visit_field_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2011: pass
							πF.SetLineno(2011)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_field_list.ToObject(), πTemp105); πE != nil {
						continue
					}
					// line 2013: def depart_field_list(self, node):
					πF.SetLineno(2013)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp106 = πg.NewFunction(πg.NewCode("depart_field_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2014: pass
							πF.SetLineno(2014)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_field_list.ToObject(), πTemp106); πE != nil {
						continue
					}
					// line 2016: def visit_field_name(self, node):
					πF.SetLineno(2016)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp107 = πg.NewFunction(πg.NewCode("visit_field_name", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2017: el = self.append_p('textbody')
							πF.SetLineno(2017)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 2018: el1 = SubElement(
							πF.SetLineno(2018)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							πTemp001[1] = πg.NewStr("text:span").ToObject()
							πTemp004 = πg.NewDict()
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßstrong.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp002 = πTemp004.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 2021: el1.text = node.astext()
							πF.SetLineno(2021)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_field_name.ToObject(), πTemp107); πE != nil {
						continue
					}
					// line 2023: def depart_field_name(self, node):
					πF.SetLineno(2023)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp108 = πg.NewFunction(πg.NewCode("depart_field_name", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2024: pass
							πF.SetLineno(2024)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_field_name.ToObject(), πTemp108); πE != nil {
						continue
					}
					// line 2026: def visit_field_body(self, node):
					πF.SetLineno(2026)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp109 = πg.NewFunction(πg.NewCode("visit_field_body", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2027: self.paragraph_style_stack.append(self.rststyle('blockindent'))
							πF.SetLineno(2027)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßblockindent.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_field_body.ToObject(), πTemp109); πE != nil {
						continue
					}
					// line 2029: def depart_field_body(self, node):
					πF.SetLineno(2029)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp110 = πg.NewFunction(πg.NewCode("depart_field_body", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2030: self.paragraph_style_stack.pop()
							πF.SetLineno(2030)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_field_body.ToObject(), πTemp110); πE != nil {
						continue
					}
					// line 2032: def visit_figure(self, node):
					πF.SetLineno(2032)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp111 = πg.NewFunction(πg.NewCode("visit_figure", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2033: pass
							πF.SetLineno(2033)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_figure.ToObject(), πTemp111); πE != nil {
						continue
					}
					// line 2035: def depart_figure(self, node):
					πF.SetLineno(2035)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp112 = πg.NewFunction(πg.NewCode("depart_figure", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2036: pass
							πF.SetLineno(2036)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_figure.ToObject(), πTemp112); πE != nil {
						continue
					}
					// line 2038: def visit_footnote(self, node):
					πF.SetLineno(2038)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp113 = πg.NewFunction(πg.NewCode("visit_footnote", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2039: self.footnote_level += 1
							πF.SetLineno(2039)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfootnote_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfootnote_level, πTemp002); πE != nil {
								continue
							}
							// line 2040: self.save_footnote_current = self.current_element
							πF.SetLineno(2040)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsave_footnote_current, πTemp002); πE != nil {
								continue
							}
							// line 2041: el1 = Element('text:note-body')
							πF.SetLineno(2041)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("text:note-body").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp002
							// line 2042: self.current_element = el1
							πF.SetLineno(2042)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µel1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcurrent_element, πTemp001); πE != nil {
								continue
							}
							// line 2043: self.footnote_list.append((node, el1))
							πF.SetLineno(2043)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(µnode, µel1).ToObject()
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfootnote_list, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßcitation, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2044: if isinstance(node, docutils.nodes.citation):
							πF.SetLineno(2044)
						Label1:
							// line 2045: self.paragraph_style_stack.append(self.rststyle('citation'))
							πF.SetLineno(2045)
							πTemp003 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßcitation.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label3
						Label2:
							// line 2047: self.paragraph_style_stack.append(self.rststyle('footnote'))
							πF.SetLineno(2047)
							πTemp003 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßfootnote.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_footnote.ToObject(), πTemp113); πE != nil {
						continue
					}
					// line 2049: def depart_footnote(self, node):
					πF.SetLineno(2049)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp114 = πg.NewFunction(πg.NewCode("depart_footnote", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2050: self.paragraph_style_stack.pop()
							πF.SetLineno(2050)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2051: self.current_element = self.save_footnote_current
							πF.SetLineno(2051)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsave_footnote_current, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcurrent_element, πTemp002); πE != nil {
								continue
							}
							// line 2052: self.footnote_level -= 1
							πF.SetLineno(2052)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfootnote_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfootnote_level, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_footnote.ToObject(), πTemp114); πE != nil {
						continue
					}
					// line 2054: footnote_chars = [
					πF.SetLineno(2054)
					πTemp002 = make([]*πg.Object, 9)
					πTemp002[0] = πg.NewStr("*").ToObject()
					πTemp002[1] = πg.NewStr("**").ToObject()
					πTemp002[2] = πg.NewStr("***").ToObject()
					πTemp002[3] = πg.NewStr("++").ToObject()
					πTemp002[4] = πg.NewStr("+++").ToObject()
					πTemp002[5] = πg.NewStr("##").ToObject()
					πTemp002[6] = πg.NewStr("###").ToObject()
					πTemp002[7] = πg.NewStr("@@").ToObject()
					πTemp002[8] = πg.NewStr("@@@").ToObject()
					πTemp115 = πg.NewList(πTemp002...).ToObject()
					if πE = πClass.SetItem(πF, ßfootnote_chars.ToObject(), πTemp115); πE != nil {
						continue
					}
					// line 2061: def visit_footnote_reference(self, node):
					πF.SetLineno(2061)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp115 = πg.NewFunction(πg.NewCode("visit_footnote_reference", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µid *πg.Object = πg.UnboundLocal
						_ = µid
						var µrefid *πg.Object = πg.UnboundLocal
						_ = µrefid
						var µnote_class *πg.Object = πg.UnboundLocal
						_ = µnote_class
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µnote_auto *πg.Object = πg.UnboundLocal
						_ = µnote_auto
						var µcitation *πg.Object = πg.UnboundLocal
						_ = µcitation
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µfootnote_char *πg.Object = πg.UnboundLocal
						_ = µfootnote_char
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.Dict
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfootnote_level, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.LE(πF, πTemp002, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2062: if self.footnote_level <= 0:
							πF.SetLineno(2062)
						Label1:
							// line 2063: id = node.attributes['ids'][0]
							πF.SetLineno(2063)
							πTemp001 = πg.NewInt(0).ToObject()
							πTemp004 = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp006, πTemp004); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							µid = πTemp002
							// line 2064: refid = node.attributes.get('refid')
							πF.SetLineno(2064)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßrefid.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßget, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µrefid = πTemp001
							if πE = πg.CheckLocal(πF, µrefid, "refid"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µrefid == πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 2065: if refid is None:
							πF.SetLineno(2065)
						Label3:
							// line 2066: refid = ''
							πF.SetLineno(2066)
							µrefid = ß.ToObject()
							goto Label4
						Label4:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßendnotes_end_doc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							goto Label6
							// line 2067: if self.settings.endnotes_end_doc:
							πF.SetLineno(2067)
						Label5:
							// line 2068: note_class = 'endnote'
							πF.SetLineno(2068)
							µnote_class = ßendnote.ToObject()
							goto Label7
						Label6:
							// line 2070: note_class = 'footnote'
							πF.SetLineno(2070)
							µnote_class = ßfootnote.ToObject()
							goto Label7
						Label7:
							// line 2071: el1 = self.append_child('text:note', attrib={
							πF.SetLineno(2071)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("text:note").ToObject()
							πTemp008 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µrefid, "refid"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(µrefid).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp008.SetItem(πF, πg.NewStr("text:id").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnote_class, "note_class"); πE != nil {
								continue
							}
							if πE = πTemp008.SetItem(πF, πg.NewStr("text:note-class").ToObject(), µnote_class); πE != nil {
								continue
							}
							πTemp001 = πTemp008.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel1 = πTemp002
							// line 2075: note_auto = str(node.attributes.get('auto', 1))
							πF.SetLineno(2075)
							πTemp007 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(2)
							πTemp010[0] = ßauto.ToObject()
							πTemp010[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßget, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp007[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µnote_auto = πTemp002
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp007[0] = µnode
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßcitation_reference, nil); πE != nil {
								continue
							}
							πTemp007[1] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label8
							}
							if πE = πg.CheckLocal(πF, µnote_auto, "note_auto"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µnote_auto, ß1.ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label9
							}
							if πE = πg.CheckLocal(πF, µnote_auto, "note_auto"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µnote_auto, πg.NewStr("*").ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label10
							}
							goto Label11
							// line 2076: if isinstance(node, docutils.nodes.citation_reference):
							πF.SetLineno(2076)
						Label8:
							// line 2077: citation = '[%s]' % node.astext()
							πF.SetLineno(2077)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("[%s]").ToObject(), πTemp004); πE != nil {
								continue
							}
							µcitation = πTemp001
							// line 2078: el2 = SubElement(el1, 'text:note-citation', attrib={
							πF.SetLineno(2078)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp007[0] = µel1
							πTemp007[1] = πg.NewStr("text:note-citation").ToObject()
							πTemp008 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µcitation, "citation"); πE != nil {
								continue
							}
							if πE = πTemp008.SetItem(πF, πg.NewStr("text:label").ToObject(), µcitation); πE != nil {
								continue
							}
							πTemp001 = πTemp008.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel2 = πTemp002
							// line 2081: el2.text = citation
							πF.SetLineno(2081)
							if πE = πg.CheckLocal(πF, µcitation, "citation"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µcitation); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel2, ßtext, πTemp001); πE != nil {
								continue
							}
							goto Label11
							// line 2082: elif note_auto == '1':
							πF.SetLineno(2082)
						Label9:
							// line 2083: el2 = SubElement(el1, 'text:note-citation', attrib={
							πF.SetLineno(2083)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp007[0] = µel1
							πTemp007[1] = πg.NewStr("text:note-citation").ToObject()
							πTemp008 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πTemp008.SetItem(πF, πg.NewStr("text:label").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp008.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel2 = πTemp002
							// line 2086: el2.text = node.astext()
							πF.SetLineno(2086)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel2, ßtext, πTemp001); πE != nil {
								continue
							}
							goto Label11
							// line 2087: elif note_auto == '*':
							πF.SetLineno(2087)
						Label10:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfootnote_chars_idx, nil); πE != nil {
								continue
							}
							πTemp007 = πF.MakeArgs(1)
							if πTemp004, πE = πg.ResolveGlobal(πF, ßODFTranslator); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßfootnote_chars, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp005
							if πTemp004, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp001, πE = πg.GE(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label12
							}
							goto Label13
							// line 2088: if self.footnote_chars_idx >= len(
							πF.SetLineno(2088)
						Label12:
							// line 2090: self.footnote_chars_idx = 0
							πF.SetLineno(2090)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfootnote_chars_idx, πTemp001); πE != nil {
								continue
							}
							goto Label13
						Label13:
							// line 2091: footnote_char = ODFTranslator.footnote_chars[
							πF.SetLineno(2091)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfootnote_chars_idx, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πTemp004, πE = πg.ResolveGlobal(πF, ßODFTranslator); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßfootnote_chars, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							µfootnote_char = πTemp002
							// line 2093: self.footnote_chars_idx += 1
							πF.SetLineno(2093)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfootnote_chars_idx, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfootnote_chars_idx, πTemp002); πE != nil {
								continue
							}
							// line 2094: el2 = SubElement(el1, 'text:note-citation', attrib={
							πF.SetLineno(2094)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp007[0] = µel1
							πTemp007[1] = πg.NewStr("text:note-citation").ToObject()
							πTemp008 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µfootnote_char, "footnote_char"); πE != nil {
								continue
							}
							if πE = πTemp008.SetItem(πF, πg.NewStr("text:label").ToObject(), µfootnote_char); πE != nil {
								continue
							}
							πTemp001 = πTemp008.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel2 = πTemp002
							// line 2097: el2.text = footnote_char
							πF.SetLineno(2097)
							if πE = πg.CheckLocal(πF, µfootnote_char, "footnote_char"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µfootnote_char); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel2, ßtext, πTemp001); πE != nil {
								continue
							}
							goto Label11
						Label11:
							// line 2098: self.footnote_ref_dict[id] = el1
							πF.SetLineno(2098)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µel1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfootnote_ref_dict, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µid, "id"); πE != nil {
								continue
							}
							πTemp004 = µid
							if πE = πg.SetItem(πF, πTemp002, πTemp004, πTemp001); πE != nil {
								continue
							}
							goto Label2
						Label2:
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßSkipChildren, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2099: raise nodes.SkipChildren()
							πF.SetLineno(2099)
							πE = πF.Raise(πTemp001, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_footnote_reference.ToObject(), πTemp115); πE != nil {
						continue
					}
					// line 2101: def depart_footnote_reference(self, node):
					πF.SetLineno(2101)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp116 = πg.NewFunction(πg.NewCode("depart_footnote_reference", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2102: pass
							πF.SetLineno(2102)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_footnote_reference.ToObject(), πTemp116); πE != nil {
						continue
					}
					// line 2104: def visit_citation(self, node):
					πF.SetLineno(2104)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp117 = πg.NewFunction(πg.NewCode("visit_citation", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µid *πg.Object = πg.UnboundLocal
						_ = µid
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2105: self.in_citation = True
							πF.SetLineno(2105)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_citation, πTemp002); πE != nil {
								continue
							}
							πTemp002 = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µid = πTemp002
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 2107: self.citation_id = id
							πF.SetLineno(2107)
							if πE = πg.CheckLocal(πF, µid, "id"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µid); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcitation_id, πTemp002); πE != nil {
								continue
							}
							// line 2108: break
							πF.SetLineno(2108)
							πTemp005 = true
							continue
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2109: self.paragraph_style_stack.append(self.rststyle('blockindent'))
							πF.SetLineno(2109)
							πTemp007 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = ßblockindent.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp007[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 2110: self.bumped_list_level_stack.append(ListLevel(1))
							πF.SetLineno(2110)
							πTemp007 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = πg.NewInt(1).ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßListLevel); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp007[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_citation.ToObject(), πTemp117); πE != nil {
						continue
					}
					// line 2112: def depart_citation(self, node):
					πF.SetLineno(2112)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp118 = πg.NewFunction(πg.NewCode("depart_citation", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2113: self.citation_id = None
							πF.SetLineno(2113)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcitation_id, πTemp002); πE != nil {
								continue
							}
							// line 2114: self.paragraph_style_stack.pop()
							πF.SetLineno(2114)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2115: self.bumped_list_level_stack.pop()
							πF.SetLineno(2115)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßbumped_list_level_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2116: self.in_citation = False
							πF.SetLineno(2116)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_citation, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_citation.ToObject(), πTemp118); πE != nil {
						continue
					}
					// line 2118: def visit_citation_reference(self, node):
					πF.SetLineno(2118)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp119 = πg.NewFunction(πg.NewCode("visit_citation_reference", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µid *πg.Object = πg.UnboundLocal
						_ = µid
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_links, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßtext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004 == πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label2
							}
							goto Label3
							// line 2119: if self.settings.create_links:
							πF.SetLineno(2119)
						Label1:
							// line 2120: id = node.attributes['refid']
							πF.SetLineno(2120)
							πTemp001 = ßrefid.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µid = πTemp002
							// line 2121: el = self.append_child('text:reference-ref', attrib={
							πF.SetLineno(2121)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("text:reference-ref").ToObject()
							πTemp006 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µid, "id"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(µid).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:ref-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:reference-format").ToObject(), ßtext.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp006.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µel = πTemp002
							// line 2125: el.text = '['
							πF.SetLineno(2125)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("[").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 2126: self.set_current_element(el)
							πF.SetLineno(2126)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp005[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label4
							// line 2127: elif self.current_element.text is None:
							πF.SetLineno(2127)
						Label2:
							// line 2128: self.current_element.text = '['
							πF.SetLineno(2128)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("[").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp002, ßtext, πTemp001); πE != nil {
								continue
							}
							goto Label4
						Label3:
							// line 2130: self.current_element.text += '['
							πF.SetLineno(2130)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtext, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IAdd(πF, πTemp002, πg.NewStr("[").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp004, ßtext, πTemp001); πE != nil {
								continue
							}
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_citation_reference.ToObject(), πTemp119); πE != nil {
						continue
					}
					// line 2132: def depart_citation_reference(self, node):
					πF.SetLineno(2132)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp120 = πg.NewFunction(πg.NewCode("depart_citation_reference", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2133: self.current_element.text += ']'
							πF.SetLineno(2133)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtext, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IAdd(πF, πTemp002, πg.NewStr("]").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp003, ßtext, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_links, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2134: if self.settings.create_links:
							πF.SetLineno(2134)
						Label1:
							// line 2135: self.set_to_parent()
							πF.SetLineno(2135)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_citation_reference.ToObject(), πTemp120); πE != nil {
						continue
					}
					// line 2137: def visit_label(self, node):
					πF.SetLineno(2137)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp121 = πg.NewFunction(πg.NewCode("visit_label", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel0 *πg.Object = πg.UnboundLocal
						_ = µel0
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßfootnote, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcitation_id, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp003 != πTemp005).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							goto Label3
							// line 2138: if isinstance(node.parent, docutils.nodes.footnote):
							πF.SetLineno(2138)
						Label1:
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßSkipChildren, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2139: raise nodes.SkipChildren()
							πF.SetLineno(2139)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
							goto Label3
							// line 2140: elif self.citation_id is not None:
							πF.SetLineno(2140)
						Label2:
							// line 2141: el = self.append_p('textbody')
							πF.SetLineno(2141)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 2142: self.set_current_element(el)
							πF.SetLineno(2142)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcreate_links, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 2143: if self.settings.create_links:
							πF.SetLineno(2143)
						Label4:
							// line 2144: el0 = SubElement(el, 'text:span')
							πF.SetLineno(2144)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							πTemp001[1] = πg.NewStr("text:span").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel0 = πTemp003
							// line 2145: el0.text = '['
							πF.SetLineno(2145)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("[").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel0, "el0"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel0, ßtext, πTemp002); πE != nil {
								continue
							}
							// line 2146: self.append_child('text:reference-mark-start', attrib={
							πF.SetLineno(2146)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:reference-mark-start").ToObject()
							πTemp006 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcitation_id, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp005).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp002 = πTemp006.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label6
						Label5:
							// line 2150: el.text = '['
							πF.SetLineno(2150)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("[").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel, ßtext, πTemp002); πE != nil {
								continue
							}
							goto Label6
						Label6:
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_label.ToObject(), πTemp121); πE != nil {
						continue
					}
					// line 2152: def depart_label(self, node):
					πF.SetLineno(2152)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp122 = πg.NewFunction(πg.NewCode("depart_label", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel0 *πg.Object = πg.UnboundLocal
						_ = µel0
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßfootnote, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcitation_id, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp003 != πTemp005).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							goto Label3
							// line 2153: if isinstance(node.parent, docutils.nodes.footnote):
							πF.SetLineno(2153)
						Label1:
							// line 2154: pass
							πF.SetLineno(2154)
							goto Label3
							// line 2155: elif self.citation_id is not None:
							πF.SetLineno(2155)
						Label2:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcreate_links, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 2156: if self.settings.create_links:
							πF.SetLineno(2156)
						Label4:
							// line 2157: self.append_child('text:reference-mark-end', attrib={
							πF.SetLineno(2157)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:reference-mark-end").ToObject()
							πTemp006 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcitation_id, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp005).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp002 = πTemp006.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2160: el0 = SubElement(self.current_element, 'text:span')
							πF.SetLineno(2160)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("text:span").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel0 = πTemp003
							// line 2161: el0.text = ']'
							πF.SetLineno(2161)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("]").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel0, "el0"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel0, ßtext, πTemp002); πE != nil {
								continue
							}
							goto Label6
						Label5:
							// line 2163: self.current_element.text += ']'
							πF.SetLineno(2163)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßtext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp003, πg.NewStr("]").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp005, ßtext, πTemp002); πE != nil {
								continue
							}
							goto Label6
						Label6:
							// line 2164: self.set_to_parent()
							πF.SetLineno(2164)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_label.ToObject(), πTemp122); πE != nil {
						continue
					}
					// line 2166: def visit_generated(self, node):
					πF.SetLineno(2166)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp123 = πg.NewFunction(πg.NewCode("visit_generated", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2167: pass
							πF.SetLineno(2167)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_generated.ToObject(), πTemp123); πE != nil {
						continue
					}
					// line 2169: def depart_generated(self, node):
					πF.SetLineno(2169)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp124 = πg.NewFunction(πg.NewCode("depart_generated", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2170: pass
							πF.SetLineno(2170)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_generated.ToObject(), πTemp124); πE != nil {
						continue
					}
					// line 2172: def check_file_exists(self, path):
					πF.SetLineno(2172)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "path", Def: nil}
					πTemp125 = πg.NewFunction(πg.NewCode("check_file_exists", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µpath *πg.Object = πArgs[1]
						_ = µpath
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							πTemp001[0] = µpath
							if πTemp002, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpath, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßexists, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2173: if os.path.exists(path):
							πF.SetLineno(2173)
						Label1:
							// line 2174: return 1
							πF.SetLineno(2174)
							πR = πg.NewInt(1).ToObject()
							continue
							goto Label3
						Label2:
							// line 2176: return 0
							πF.SetLineno(2176)
							πR = πg.NewInt(0).ToObject()
							continue
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßcheck_file_exists.ToObject(), πTemp125); πE != nil {
						continue
					}
					// line 2178: def visit_image(self, node):
					πF.SetLineno(2178)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp126 = πg.NewFunction(πg.NewCode("visit_image", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µsource *πg.Object = πg.UnboundLocal
						_ = µsource
						var µdocsource *πg.Object = πg.UnboundLocal
						_ = µdocsource
						var µline *πg.Object = πg.UnboundLocal
						_ = µline
						var µdirname *πg.Object = πg.UnboundLocal
						_ = µdirname
						var µfilename *πg.Object = πg.UnboundLocal
						_ = µfilename
						var µdestination *πg.Object = πg.UnboundLocal
						_ = µdestination
						var µimgfile *πg.Object = πg.UnboundLocal
						_ = µimgfile
						var µcontent *πg.Object = πg.UnboundLocal
						_ = µcontent
						var µimgfile2 *πg.Object = πg.UnboundLocal
						_ = µimgfile2
						var µimgfilename *πg.Object = πg.UnboundLocal
						_ = µimgfilename
						var µspec *πg.Object = πg.UnboundLocal
						_ = µspec
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µel3 *πg.Object = πg.UnboundLocal
						_ = µel3
						var µel4 *πg.Object = πg.UnboundLocal
						_ = µel4
						var µel5 *πg.Object = πg.UnboundLocal
						_ = µel5
						var µcaption *πg.Object = πg.UnboundLocal
						_ = µcaption
						var µattrib *πg.Object = πg.UnboundLocal
						_ = µattrib
						var µel6 *πg.Object = πg.UnboundLocal
						_ = µel6
						var µwidth *πg.Object = πg.UnboundLocal
						_ = µwidth
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πTemp008 *πg.BaseException
						_ = πTemp008
						var πTemp009 *πg.Traceback
						_ = πTemp009
						var πTemp010 *πg.Dict
						_ = πTemp010
						var πTemp011 []*πg.Object
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 23:
								goto Label23
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, ßuri.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2180: if 'uri' in node.attributes:
							πF.SetLineno(2180)
						Label1:
							// line 2181: source = node.attributes['uri']
							πF.SetLineno(2181)
							πTemp001 = ßuri.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µsource = πTemp002
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("http:").ToObject()
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µsource, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp002 = πTemp006
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label4
							}
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("https:").ToObject()
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µsource, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp002 = πTemp006
						Label4:
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							goto Label6
							// line 2182: if not (source.startswith('http:') or source.startswith('https:')):
							πF.SetLineno(2182)
						Label5:
							πTemp005 = πF.MakeArgs(1)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßsep, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsource, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp003, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label7
							}
							goto Label8
							// line 2183: if not source.startswith(os.sep):
							πF.SetLineno(2183)
						Label7:
							// line 2184: docsource, line = utils.get_source_line(node)
							πF.SetLineno(2184)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πTemp001, πE = πg.ResolveGlobal(πF, ßutils); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßget_source_line, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp004}}}, πTemp001); πE != nil {
								continue
							}
							µdocsource = πTemp002
							µline = πTemp004
							if πE = πg.CheckLocal(πF, µdocsource, "docsource"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, µdocsource); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label9
							}
							goto Label10
							// line 2185: if docsource:
							πF.SetLineno(2185)
						Label9:
							// line 2186: dirname = os.path.dirname(docsource)
							πF.SetLineno(2186)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdocsource, "docsource"); πE != nil {
								continue
							}
							πTemp005[0] = µdocsource
							if πTemp001, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpath, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßdirname, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µdirname = πTemp002
							if πE = πg.CheckLocal(πF, µdirname, "dirname"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, µdirname); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label11
							}
							goto Label12
							// line 2187: if dirname:
							πF.SetLineno(2187)
						Label11:
							// line 2188: source = '%s%s%s' % (dirname, os.sep, source, )
							πF.SetLineno(2188)
							if πE = πg.CheckLocal(πF, µdirname, "dirname"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp004, ßsep, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple3(µdirname, πTemp006, µsource).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s%s%s").ToObject(), πTemp002); πE != nil {
								continue
							}
							µsource = πTemp001
							goto Label12
						Label12:
							goto Label10
						Label10:
							goto Label8
						Label8:
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp005[0] = µsource
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcheck_file_exists, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp003, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label13
							}
							goto Label14
							// line 2189: if not self.check_file_exists(source):
							πF.SetLineno(2189)
						Label13:
							// line 2190: self.document.reporter.warning(
							πF.SetLineno(2190)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(µsource).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Cannot find image file %s.").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2192: return
							πF.SetLineno(2192)
							πR = πg.None
							continue
							goto Label14
						Label14:
							goto Label6
						Label6:
							goto Label3
						Label2:
							// line 2194: return
							πF.SetLineno(2194)
							πR = πg.None
							continue
							goto Label3
						Label3:
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßimage_dict, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, µsource); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label15
							}
							goto Label16
							// line 2195: if source in self.image_dict:
							πF.SetLineno(2195)
						Label15:
							// line 2196: filename, destination = self.image_dict[source]
							πF.SetLineno(2196)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp001 = µsource
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßimage_dict, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp004}}}, πTemp002); πE != nil {
								continue
							}
							µfilename = πTemp001
							µdestination = πTemp004
							goto Label17
						Label16:
							// line 2198: self.image_count += 1
							πF.SetLineno(2198)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßimage_count, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßimage_count, πTemp002); πE != nil {
								continue
							}
							// line 2199: filename = os.path.split(source)[1]
							πF.SetLineno(2199)
							πTemp001 = πg.NewInt(1).ToObject()
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp005[0] = µsource
							if πTemp004, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp004, ßpath, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp006, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp002, πE = πg.GetItem(πF, πTemp006, πTemp001); πE != nil {
								continue
							}
							µfilename = πTemp002
							// line 2200: destination = 'Pictures/1%08x%s' % (self.image_count, filename, )
							πF.SetLineno(2200)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßimage_count, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µfilename, "filename"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(πTemp004, µfilename).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Pictures/1%08x%s").ToObject(), πTemp002); πE != nil {
								continue
							}
							µdestination = πTemp001
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("http:").ToObject()
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsource, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp004
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label18
							}
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("https:").ToObject()
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsource, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp004
						Label18:
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label19
							}
							goto Label20
							// line 2201: if source.startswith('http:') or source.startswith('https:'):
							πF.SetLineno(2201)
						Label19:
							// line 2202: try:
							πF.SetLineno(2202)
							πF.PushCheckpoint(23)
							// line 2203: imgfile = urlopen(source)
							πF.SetLineno(2203)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp005[0] = µsource
							if πTemp001, πE = πg.ResolveGlobal(πF, ßurlopen); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µimgfile = πTemp002
							// line 2204: content = imgfile.read()
							πF.SetLineno(2204)
							if πE = πg.CheckLocal(πF, µimgfile, "imgfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µimgfile, ßread, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µcontent = πTemp002
							// line 2205: imgfile.close()
							πF.SetLineno(2205)
							if πE = πg.CheckLocal(πF, µimgfile, "imgfile"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µimgfile, ßclose, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2206: imgfile2 = tempfile.NamedTemporaryFile('wb', delete=False)
							πF.SetLineno(2206)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßwb.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"delete", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßtempfile); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßNamedTemporaryFile, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µimgfile2 = πTemp001
							// line 2207: imgfile2.write(content)
							πF.SetLineno(2207)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcontent, "content"); πE != nil {
								continue
							}
							πTemp005[0] = µcontent
							if πE = πg.CheckLocal(πF, µimgfile2, "imgfile2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µimgfile2, ßwrite, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2208: imgfile2.close()
							πF.SetLineno(2208)
							if πE = πg.CheckLocal(πF, µimgfile2, "imgfile2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µimgfile2, ßclose, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2209: imgfilename = imgfile2.name
							πF.SetLineno(2209)
							if πE = πg.CheckLocal(πF, µimgfile2, "imgfile2"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µimgfile2, ßname, nil); πE != nil {
								continue
							}
							µimgfilename = πTemp001
							// line 2210: source = imgfilename
							πF.SetLineno(2210)
							if πE = πg.CheckLocal(πF, µimgfilename, "imgfilename"); πE != nil {
								continue
							}
							µsource = µimgfilename
							πF.PopCheckpoint()
							goto Label22
						Label23:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp008, πTemp009 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßHTTPError); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsInstance(πF, πTemp008.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label24
							}
							πE = πF.Raise(πTemp008.ToObject(), nil, πTemp009.ToObject())
							continue
							// line 2211: except HTTPError:
							πF.SetLineno(2211)
						Label24:
							// line 2212: self.document.reporter.warning(
							πF.SetLineno(2212)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(µsource).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Can't open image url %s.").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πF.RestoreExc(nil, nil)
							goto Label22
						Label22:
							// line 2214: spec = (source, destination,)
							πF.SetLineno(2214)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdestination, "destination"); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(µsource, µdestination).ToObject()
							µspec = πTemp001
							goto Label21
						Label20:
							// line 2216: spec = (os.path.abspath(source), destination,)
							πF.SetLineno(2216)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp005[0] = µsource
							if πTemp002, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßpath, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp004, ßabspath, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πg.CheckLocal(πF, µdestination, "destination"); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(πTemp004, µdestination).ToObject()
							µspec = πTemp001
							goto Label21
						Label21:
							// line 2217: self.embedded_file_list.append(spec)
							πF.SetLineno(2217)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µspec, "spec"); πE != nil {
								continue
							}
							πTemp005[0] = µspec
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßembedded_file_list, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2218: self.image_dict[source] = (source, destination,)
							πF.SetLineno(2218)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdestination, "destination"); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(µsource, µdestination).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßimage_dict, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp006 = µsource
							if πE = πg.SetItem(πF, πTemp004, πTemp006, πTemp002); πE != nil {
								continue
							}
							goto Label17
						Label17:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_paragraph, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label25
							}
							goto Label26
							// line 2220: if self.in_paragraph:
							πF.SetLineno(2220)
						Label25:
							// line 2221: el1 = self.current_element
							πF.SetLineno(2221)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							µel1 = πTemp001
							goto Label27
						Label26:
							// line 2223: el1 = SubElement(
							πF.SetLineno(2223)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							πTemp005[1] = πg.NewStr("text:p").ToObject()
							πTemp010 = πg.NewDict()
							πTemp011 = πF.MakeArgs(1)
							πTemp011[0] = ßtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp011, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp011)
							if πE = πTemp010.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp010.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µel1 = πTemp002
							goto Label27
						Label27:
							// line 2226: el2 = el1
							πF.SetLineno(2226)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							µel2 = µel1
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßfigure, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label28
							}
							goto Label29
							// line 2227: if isinstance(node.parent, docutils.nodes.figure):
							πF.SetLineno(2227)
						Label28:
							// line 2228: el3, el4, el5, caption = self.generate_figure(
							πF.SetLineno(2228)
							πTemp005 = πF.MakeArgs(4)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp005[1] = µsource
							if πE = πg.CheckLocal(πF, µdestination, "destination"); πE != nil {
								continue
							}
							πTemp005[2] = µdestination
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp005[3] = µel2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßgenerate_figure, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp012}}}, πTemp002); πE != nil {
								continue
							}
							µel3 = πTemp001
							µel4 = πTemp004
							µel5 = πTemp006
							µcaption = πTemp012
							// line 2231: attrib = {}
							πF.SetLineno(2231)
							πTemp010 = πg.NewDict()
							πTemp001 = πTemp010.ToObject()
							µattrib = πTemp001
							// line 2232: el6, width = self.generate_image(
							πF.SetLineno(2232)
							πTemp005 = πF.MakeArgs(5)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp005[1] = µsource
							if πE = πg.CheckLocal(πF, µdestination, "destination"); πE != nil {
								continue
							}
							πTemp005[2] = µdestination
							if πE = πg.CheckLocal(πF, µel5, "el5"); πE != nil {
								continue
							}
							πTemp005[3] = µel5
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp005[4] = µattrib
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßgenerate_image, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp004}}}, πTemp002); πE != nil {
								continue
							}
							µel6 = πTemp001
							µwidth = πTemp004
							if πE = πg.CheckLocal(πF, µcaption, "caption"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µcaption != πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label31
							}
							goto Label32
							// line 2235: if caption is not None:
							πF.SetLineno(2235)
						Label31:
							// line 2236: el6.tail = caption
							πF.SetLineno(2236)
							if πE = πg.CheckLocal(πF, µcaption, "caption"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µcaption); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel6, "el6"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel6, ßtail, πTemp001); πE != nil {
								continue
							}
							goto Label32
						Label32:
							goto Label30
						Label29:
							// line 2238: self.generate_image(node, source, destination, el2)
							πF.SetLineno(2238)
							πTemp005 = πF.MakeArgs(4)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp005[1] = µsource
							if πE = πg.CheckLocal(πF, µdestination, "destination"); πE != nil {
								continue
							}
							πTemp005[2] = µdestination
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp005[3] = µel2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßgenerate_image, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label30
						Label30:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_image.ToObject(), πTemp126); πE != nil {
						continue
					}
					// line 2240: def depart_image(self, node):
					πF.SetLineno(2240)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp127 = πg.NewFunction(πg.NewCode("depart_image", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2241: pass
							πF.SetLineno(2241)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_image.ToObject(), πTemp127); πE != nil {
						continue
					}
					// line 2243: def get_image_width_height(self, node, attr):
					πF.SetLineno(2243)
					πTemp003 = make([]πg.Param, 3)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "attr", Def: nil}
					πTemp128 = πg.NewFunction(πg.NewCode("get_image_width_height", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µattr *πg.Object = πArgs[2]
						_ = µattr
						var µsize *πg.Object = πg.UnboundLocal
						_ = µsize
						var µunit *πg.Object = πg.UnboundLocal
						_ = µunit
						var µexp *πg.Object = πg.UnboundLocal
						_ = µexp
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.BaseException
						_ = πTemp006
						var πTemp007 *πg.Traceback
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 4:
								goto Label4
							default:
								panic("unexpected function state")
							}
							// line 2244: size = None
							πF.SetLineno(2244)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µsize = πTemp001
							// line 2245: unit = None
							πF.SetLineno(2245)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µunit = πTemp001
							if πE = πg.CheckLocal(πF, µattr, "attr"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, µattr); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2246: if attr in node.attributes:
							πF.SetLineno(2246)
						Label1:
							// line 2247: size = node.attributes[attr]
							πF.SetLineno(2247)
							if πE = πg.CheckLocal(πF, µattr, "attr"); πE != nil {
								continue
							}
							πTemp001 = µattr
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µsize = πTemp002
							// line 2248: size = size.strip()
							πF.SetLineno(2248)
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßstrip, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µsize = πTemp002
							// line 2251: try:
							πF.SetLineno(2251)
							πF.PushCheckpoint(4)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("%").ToObject()
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßendswith, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							goto Label6
							// line 2252: if size.endswith('%'):
							πF.SetLineno(2252)
						Label5:
							if πE = πg.CheckLocal(πF, µattr, "attr"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µattr, ßheight.ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label8
							}
							goto Label9
							// line 2253: if attr == 'height':
							πF.SetLineno(2253)
						Label8:
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("percentage not allowed for height").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2255: raise ValueError('percentage not allowed for height')
							πF.SetLineno(2255)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
							goto Label9
						Label9:
							// line 2256: size = size.rstrip(' %')
							πF.SetLineno(2256)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr(" %").ToObject()
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßrstrip, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µsize = πTemp002
							// line 2257: size = float(size) / 100.0
							πF.SetLineno(2257)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							πTemp005[0] = µsize
							if πTemp002, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp001, πE = πg.Div(πF, πTemp004, πg.NewFloat(100.0).ToObject()); πE != nil {
								continue
							}
							µsize = πTemp001
							// line 2258: unit = '%'
							πF.SetLineno(2258)
							µunit = πg.NewStr("%").ToObject()
							goto Label7
						Label6:
							// line 2260: size, unit = self.convert_to_cm(size)
							πF.SetLineno(2260)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							πTemp005[0] = µsize
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßconvert_to_cm, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp004}}}, πTemp002); πE != nil {
								continue
							}
							µsize = πTemp001
							µunit = πTemp004
							goto Label7
						Label7:
							πF.PopCheckpoint()
							goto Label3
						Label4:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp006, πTemp007 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsInstance(πF, πTemp006.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label10
							}
							πE = πF.Raise(πTemp006.ToObject(), nil, πTemp007.ToObject())
							continue
							// line 2261: except ValueError as exp:
							πF.SetLineno(2261)
						Label10:
							µexp = πTemp006.ToObject()
							// line 2262: self.document.reporter.warning(
							πF.SetLineno(2262)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µattr, "attr"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattr, "attr"); πE != nil {
								continue
							}
							πTemp004 = µattr
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetItem(πF, πTemp009, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µexp, "exp"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple3(µattr, πTemp008, µexp).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Invalid %s for image: \"%s\".  Error: \"%s\".").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πF.RestoreExc(nil, nil)
							goto Label3
						Label3:
							goto Label2
						Label2:
							// line 2266: return size, unit
							πF.SetLineno(2266)
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µunit, "unit"); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(µsize, µunit).ToObject()
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_image_width_height.ToObject(), πTemp128); πE != nil {
						continue
					}
					// line 2268: def convert_to_cm(self, size):
					πF.SetLineno(2268)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "size", Def: nil}
					πTemp129 = πg.NewFunction(πg.NewCode("convert_to_cm", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µsize *πg.Object = πArgs[1]
						_ = µsize
						var µunit *πg.Object = πg.UnboundLocal
						_ = µunit
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2269: """Convert various units to centimeters.
							πF.SetLineno(2269)
							// line 2274: size = size.strip()
							πF.SetLineno(2274)
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßstrip, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µsize = πTemp002
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßpx.ToObject()
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßendswith, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßin.ToObject()
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßendswith, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßpt.ToObject()
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßendswith, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label3
							}
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßpc.ToObject()
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßendswith, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßmm.ToObject()
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßendswith, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label5
							}
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßcm.ToObject()
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsize, ßendswith, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label6
							}
							goto Label7
							// line 2275: if size.endswith('px'):
							πF.SetLineno(2275)
						Label1:
							// line 2276: size = float(size[:-2]) * 0.026     # convert px to cm
							πF.SetLineno(2276)
							πTemp003 = πF.MakeArgs(1)
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πTemp005, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µsize, πTemp002); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp002, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Mul(πF, πTemp005, πg.NewFloat(0.026).ToObject()); πE != nil {
								continue
							}
							µsize = πTemp001
							goto Label8
							// line 2277: elif size.endswith('in'):
							πF.SetLineno(2277)
						Label2:
							// line 2278: size = float(size[:-2]) * 2.54      # convert in to cm
							πF.SetLineno(2278)
							πTemp003 = πF.MakeArgs(1)
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πTemp005, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µsize, πTemp002); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp002, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Mul(πF, πTemp005, πg.NewFloat(2.54).ToObject()); πE != nil {
								continue
							}
							µsize = πTemp001
							goto Label8
							// line 2279: elif size.endswith('pt'):
							πF.SetLineno(2279)
						Label3:
							// line 2280: size = float(size[:-2]) * 0.035     # convert pt to cm
							πF.SetLineno(2280)
							πTemp003 = πF.MakeArgs(1)
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πTemp005, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µsize, πTemp002); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp002, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Mul(πF, πTemp005, πg.NewFloat(0.035).ToObject()); πE != nil {
								continue
							}
							µsize = πTemp001
							goto Label8
							// line 2281: elif size.endswith('pc'):
							πF.SetLineno(2281)
						Label4:
							// line 2282: size = float(size[:-2]) * 2.371     # convert pc to cm
							πF.SetLineno(2282)
							πTemp003 = πF.MakeArgs(1)
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πTemp005, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µsize, πTemp002); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp002, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Mul(πF, πTemp005, πg.NewFloat(2.371).ToObject()); πE != nil {
								continue
							}
							µsize = πTemp001
							goto Label8
							// line 2283: elif size.endswith('mm'):
							πF.SetLineno(2283)
						Label5:
							// line 2284: size = float(size[:-2]) * 0.1       # convert mm to cm
							πF.SetLineno(2284)
							πTemp003 = πF.MakeArgs(1)
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πTemp005, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µsize, πTemp002); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp002, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Mul(πF, πTemp005, πg.NewFloat(0.1).ToObject()); πE != nil {
								continue
							}
							µsize = πTemp001
							goto Label8
							// line 2285: elif size.endswith('cm'):
							πF.SetLineno(2285)
						Label6:
							// line 2286: size = float(size[:-2])
							πF.SetLineno(2286)
							πTemp003 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πTemp002, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µsize, πTemp001); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µsize = πTemp002
							goto Label8
						Label7:
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("unknown unit type").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2288: raise ValueError('unknown unit type')
							πF.SetLineno(2288)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
							goto Label8
						Label8:
							// line 2289: unit = 'cm'
							πF.SetLineno(2289)
							µunit = ßcm.ToObject()
							// line 2290: return size, unit
							πF.SetLineno(2290)
							if πE = πg.CheckLocal(πF, µsize, "size"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µunit, "unit"); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(µsize, µunit).ToObject()
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßconvert_to_cm.ToObject(), πTemp129); πE != nil {
						continue
					}
					// line 2269: """Convert various units to centimeters.
					πF.SetLineno(2269)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp130}, πg.NewStr("Convert various units to centimeters.\n\n        Note that a call to this method should be wrapped in:\n            try: except ValueError:\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp131, πE = πg.ResolveClass(πF, πClass, nil, ßconvert_to_cm); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp131, ß__doc__, πTemp130); πE != nil {
						continue
					}
					// line 2292: def get_image_scale(self, node):
					πF.SetLineno(2292)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp130 = πg.NewFunction(πg.NewCode("get_image_scale", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µscale *πg.Object = πg.UnboundLocal
						_ = µscale
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.BaseException
						_ = πTemp006
						var πTemp007 *πg.Traceback
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 5:
								goto Label5
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, ßscale.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2293: if 'scale' in node.attributes:
							πF.SetLineno(2293)
						Label1:
							// line 2294: scale = node.attributes['scale']
							πF.SetLineno(2294)
							πTemp001 = ßscale.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µscale = πTemp002
							// line 2295: try:
							πF.SetLineno(2295)
							πF.PushCheckpoint(5)
							// line 2296: scale = int(scale)
							πF.SetLineno(2296)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µscale, "scale"); πE != nil {
								continue
							}
							πTemp005[0] = µscale
							if πTemp001, πE = πg.ResolveGlobal(πF, ßint); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µscale = πTemp002
							πF.PopCheckpoint()
							goto Label4
						Label5:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp006, πTemp007 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsInstance(πF, πTemp006.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label6
							}
							πE = πF.Raise(πTemp006.ToObject(), nil, πTemp007.ToObject())
							continue
							// line 2297: except ValueError:
							πF.SetLineno(2297)
						Label6:
							// line 2298: self.document.reporter.warning(
							πF.SetLineno(2298)
							πTemp005 = πF.MakeArgs(1)
							πTemp004 = ßscale.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetItem(πF, πTemp009, πTemp004); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(πTemp008).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Invalid scale for image: \"%s\"").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πF.RestoreExc(nil, nil)
							goto Label4
						Label4:
							if πE = πg.CheckLocal(πF, µscale, "scale"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.LT(πF, µscale, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label7
							}
							goto Label8
							// line 2301: if scale < 1:       # or scale > 100:
							πF.SetLineno(2301)
						Label7:
							// line 2302: self.document.reporter.warning(
							πF.SetLineno(2302)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µscale, "scale"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(µscale).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("scale out of range (%s), using 1.").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2304: scale = 1
							πF.SetLineno(2304)
							µscale = πg.NewInt(1).ToObject()
							goto Label8
						Label8:
							// line 2305: scale = scale * 0.01
							πF.SetLineno(2305)
							if πE = πg.CheckLocal(πF, µscale, "scale"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, µscale, πg.NewFloat(0.01).ToObject()); πE != nil {
								continue
							}
							µscale = πTemp001
							goto Label3
						Label2:
							// line 2307: scale = 1.0
							πF.SetLineno(2307)
							µscale = πg.NewFloat(1.0).ToObject()
							goto Label3
						Label3:
							// line 2308: return scale
							πF.SetLineno(2308)
							if πE = πg.CheckLocal(πF, µscale, "scale"); πE != nil {
								continue
							}
							πR = µscale
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_image_scale.ToObject(), πTemp130); πE != nil {
						continue
					}
					// line 2310: def get_image_scaled_width_height(self, node, source):
					πF.SetLineno(2310)
					πTemp003 = make([]πg.Param, 3)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "source", Def: nil}
					πTemp131 = πg.NewFunction(πg.NewCode("get_image_scaled_width_height", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µsource *πg.Object = πArgs[2]
						_ = µsource
						var µscale *πg.Object = πg.UnboundLocal
						_ = µscale
						var µwidth *πg.Object = πg.UnboundLocal
						_ = µwidth
						var µwidth_unit *πg.Object = πg.UnboundLocal
						_ = µwidth_unit
						var µheight *πg.Object = πg.UnboundLocal
						_ = µheight
						var µ_ *πg.Object = πg.UnboundLocal
						_ = µ_
						var µdpi *πg.Object = πg.UnboundLocal
						_ = µdpi
						var µfilename *πg.Object = πg.UnboundLocal
						_ = µfilename
						var µdestination *πg.Object = πg.UnboundLocal
						_ = µdestination
						var µimageobj *πg.Object = πg.UnboundLocal
						_ = µimageobj
						var µfactor *πg.Object = πg.UnboundLocal
						_ = µfactor
						var µimage_width *πg.Object = πg.UnboundLocal
						_ = µimage_width
						var µimage_height *πg.Object = πg.UnboundLocal
						_ = µimage_height
						var µline_width *πg.Object = πg.UnboundLocal
						_ = µline_width
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.BaseException
						_ = πTemp008
						var πTemp009 *πg.Traceback
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 6:
								goto Label6
							default:
								panic("unexpected function state")
							}
							// line 2311: """Return the image size in centimeters adjusted by image attrs."""
							πF.SetLineno(2311)
							// line 2312: scale = self.get_image_scale(node)
							πF.SetLineno(2312)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßget_image_scale, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µscale = πTemp003
							// line 2313: width, width_unit = self.get_image_width_height(node, 'width')
							πF.SetLineno(2313)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßwidth.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßget_image_width_height, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp004}}}, πTemp003); πE != nil {
								continue
							}
							µwidth = πTemp002
							µwidth_unit = πTemp004
							// line 2314: height, _ = self.get_image_width_height(node, 'height')
							πF.SetLineno(2314)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßheight.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßget_image_width_height, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp004}}}, πTemp003); πE != nil {
								continue
							}
							µheight = πTemp002
							µ_ = πTemp004
							// line 2315: dpi = (72, 72)
							πF.SetLineno(2315)
							πTemp002 = πg.NewTuple2(πg.NewInt(72).ToObject(), πg.NewInt(72).ToObject()).ToObject()
							µdpi = πTemp002
							if πTemp004, πE = πg.ResolveGlobal(πF, ßPIL); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp004 != πTemp006).ToObject()
							πTemp002 = πTemp003
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßimage_dict, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Contains(πF, πTemp004, µsource); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp007).ToObject()
							πTemp002 = πTemp003
						Label1:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label2
							}
							goto Label3
							// line 2316: if PIL is not None and source in self.image_dict:
							πF.SetLineno(2316)
						Label2:
							// line 2317: filename, destination = self.image_dict[source]
							πF.SetLineno(2317)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp002 = µsource
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßimage_dict, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp004}}}, πTemp003); πE != nil {
								continue
							}
							µfilename = πTemp002
							µdestination = πTemp004
							// line 2318: imageobj = PIL.Image.open(filename, 'r')
							πF.SetLineno(2318)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µfilename, "filename"); πE != nil {
								continue
							}
							πTemp001[0] = µfilename
							πTemp001[1] = ßr.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPIL); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßImage, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßopen, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µimageobj = πTemp003
							// line 2319: dpi = imageobj.info.get('dpi', dpi)
							πF.SetLineno(2319)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ßdpi.ToObject()
							if πE = πg.CheckLocal(πF, µdpi, "dpi"); πE != nil {
								continue
							}
							πTemp001[1] = µdpi
							if πE = πg.CheckLocal(πF, µimageobj, "imageobj"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µimageobj, ßinfo, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdpi = πTemp002
							// line 2321: try:
							πF.SetLineno(2321)
							πF.PushCheckpoint(6)
							// line 2322: iter(dpi)
							πF.SetLineno(2322)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdpi, "dpi"); πE != nil {
								continue
							}
							πTemp001[0] = µdpi
							if πTemp002, πE = πg.ResolveGlobal(πF, ßiter); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πF.PopCheckpoint()
							goto Label5
						Label6:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp008, πTemp009 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTypeError); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsInstance(πF, πTemp008.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label7
							}
							πE = πF.Raise(πTemp008.ToObject(), nil, πTemp009.ToObject())
							continue
							// line 2323: except TypeError:
							πF.SetLineno(2323)
						Label7:
							// line 2324: dpi = (dpi, dpi)
							πF.SetLineno(2324)
							if πE = πg.CheckLocal(πF, µdpi, "dpi"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdpi, "dpi"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(µdpi, µdpi).ToObject()
							µdpi = πTemp002
							πF.RestoreExc(nil, nil)
							goto Label5
						Label5:
							goto Label4
						Label3:
							// line 2326: imageobj = None
							πF.SetLineno(2326)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µimageobj = πTemp002
							goto Label4
						Label4:
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(µwidth == πTemp004).ToObject()
							πTemp002 = πTemp003
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label8
							}
							if πE = πg.CheckLocal(πF, µheight, "height"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(µheight == πTemp004).ToObject()
							πTemp002 = πTemp003
						Label8:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label9
							}
							goto Label10
							// line 2327: if width is None or height is None:
							πF.SetLineno(2327)
						Label9:
							if πE = πg.CheckLocal(πF, µimageobj, "imageobj"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µimageobj == πTemp003).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label11
							}
							goto Label12
							// line 2328: if imageobj is None:
							πF.SetLineno(2328)
						Label11:
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("image size not fully specified and PIL not installed").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßRuntimeError); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2329: raise RuntimeError(
							πF.SetLineno(2329)
							πE = πF.Raise(πTemp003, nil, nil)
							continue
							goto Label12
						Label12:
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µwidth == πTemp003).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label13
							}
							goto Label14
							// line 2331: if width is None:
							πF.SetLineno(2331)
						Label13:
							// line 2332: width = imageobj.size[0]
							πF.SetLineno(2332)
							πTemp002 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µimageobj, "imageobj"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µimageobj, ßsize, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							µwidth = πTemp003
							// line 2333: width = float(width) * 0.026        # convert px to cm
							πF.SetLineno(2333)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							πTemp001[0] = µwidth
							if πTemp003, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Mul(πF, πTemp004, πg.NewFloat(0.026).ToObject()); πE != nil {
								continue
							}
							µwidth = πTemp002
							goto Label14
						Label14:
							if πE = πg.CheckLocal(πF, µheight, "height"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µheight == πTemp003).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label15
							}
							goto Label16
							// line 2334: if height is None:
							πF.SetLineno(2334)
						Label15:
							// line 2335: height = imageobj.size[1]
							πF.SetLineno(2335)
							πTemp002 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µimageobj, "imageobj"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µimageobj, ßsize, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							µheight = πTemp003
							// line 2336: height = float(height) * 0.026      # convert px to cm
							πF.SetLineno(2336)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µheight, "height"); πE != nil {
								continue
							}
							πTemp001[0] = µheight
							if πTemp003, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Mul(πF, πTemp004, πg.NewFloat(0.026).ToObject()); πE != nil {
								continue
							}
							µheight = πTemp002
							goto Label16
						Label16:
							if πE = πg.CheckLocal(πF, µwidth_unit, "width_unit"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µwidth_unit, πg.NewStr("%").ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label17
							}
							goto Label18
							// line 2337: if width_unit == '%':
							πF.SetLineno(2337)
						Label17:
							// line 2338: factor = width
							πF.SetLineno(2338)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							µfactor = µwidth
							// line 2339: image_width = imageobj.size[0]
							πF.SetLineno(2339)
							πTemp002 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µimageobj, "imageobj"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µimageobj, ßsize, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							µimage_width = πTemp003
							// line 2340: image_width = float(image_width) * 0.026    # convert px to cm
							πF.SetLineno(2340)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µimage_width, "image_width"); πE != nil {
								continue
							}
							πTemp001[0] = µimage_width
							if πTemp003, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Mul(πF, πTemp004, πg.NewFloat(0.026).ToObject()); πE != nil {
								continue
							}
							µimage_width = πTemp002
							// line 2341: image_height = imageobj.size[1]
							πF.SetLineno(2341)
							πTemp002 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µimageobj, "imageobj"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µimageobj, ßsize, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							µimage_height = πTemp003
							// line 2342: image_height = float(image_height) * 0.026  # convert px to cm
							πF.SetLineno(2342)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µimage_height, "image_height"); πE != nil {
								continue
							}
							πTemp001[0] = µimage_height
							if πTemp003, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Mul(πF, πTemp004, πg.NewFloat(0.026).ToObject()); πE != nil {
								continue
							}
							µimage_height = πTemp002
							// line 2343: line_width = self.get_page_width()
							πF.SetLineno(2343)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßget_page_width, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µline_width = πTemp003
							// line 2344: width = factor * line_width
							πF.SetLineno(2344)
							if πE = πg.CheckLocal(πF, µfactor, "factor"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µline_width, "line_width"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mul(πF, µfactor, µline_width); πE != nil {
								continue
							}
							µwidth = πTemp002
							// line 2345: factor = (factor * line_width) / image_width
							πF.SetLineno(2345)
							if πE = πg.CheckLocal(πF, µfactor, "factor"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µline_width, "line_width"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, µfactor, µline_width); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µimage_width, "image_width"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Div(πF, πTemp003, µimage_width); πE != nil {
								continue
							}
							µfactor = πTemp002
							// line 2346: height = factor * image_height
							πF.SetLineno(2346)
							if πE = πg.CheckLocal(πF, µfactor, "factor"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µimage_height, "image_height"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mul(πF, µfactor, µimage_height); πE != nil {
								continue
							}
							µheight = πTemp002
							goto Label18
						Label18:
							goto Label10
						Label10:
							// line 2347: width *= scale
							πF.SetLineno(2347)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µscale, "scale"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IMul(πF, µwidth, µscale); πE != nil {
								continue
							}
							µwidth = πTemp002
							// line 2348: height *= scale
							πF.SetLineno(2348)
							if πE = πg.CheckLocal(πF, µheight, "height"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µscale, "scale"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IMul(πF, µheight, µscale); πE != nil {
								continue
							}
							µheight = πTemp002
							// line 2349: width = '%.2fcm' % width
							πF.SetLineno(2349)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%.2fcm").ToObject(), µwidth); πE != nil {
								continue
							}
							µwidth = πTemp002
							// line 2350: height = '%.2fcm' % height
							πF.SetLineno(2350)
							if πE = πg.CheckLocal(πF, µheight, "height"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%.2fcm").ToObject(), µheight); πE != nil {
								continue
							}
							µheight = πTemp002
							// line 2351: return width, height
							πF.SetLineno(2351)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µheight, "height"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(µwidth, µheight).ToObject()
							πR = πTemp002
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_image_scaled_width_height.ToObject(), πTemp131); πE != nil {
						continue
					}
					// line 2311: """Return the image size in centimeters adjusted by image attrs."""
					πF.SetLineno(2311)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp132}, πg.NewStr("Return the image size in centimeters adjusted by image attrs.").ToObject()); πE != nil {
						continue
					}
					if πTemp133, πE = πg.ResolveClass(πF, πClass, nil, ßget_image_scaled_width_height); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp133, ß__doc__, πTemp132); πE != nil {
						continue
					}
					// line 2353: def get_page_width(self):
					πF.SetLineno(2353)
					πTemp003 = make([]πg.Param, 1)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp132 = πg.NewFunction(πg.NewCode("get_page_width", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µroot *πg.Object = πg.UnboundLocal
						_ = µroot
						var µnodes *πg.Object = πg.UnboundLocal
						_ = µnodes
						var µwidth *πg.Object = πg.UnboundLocal
						_ = µwidth
						var µnode *πg.Object = πg.UnboundLocal
						_ = µnode
						var µpage_width *πg.Object = πg.UnboundLocal
						_ = µpage_width
						var µmargin_left *πg.Object = πg.UnboundLocal
						_ = µmargin_left
						var µmargin_right *πg.Object = πg.UnboundLocal
						_ = µmargin_right
						var µ_ *πg.Object = πg.UnboundLocal
						_ = µ_
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.BaseException
						_ = πTemp008
						var πTemp009 *πg.Traceback
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 8:
								goto Label8
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2354: """Return the document's page width in centimeters."""
							πF.SetLineno(2354)
							// line 2355: root = self.get_dom_stylesheet()
							πF.SetLineno(2355)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_dom_stylesheet, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µroot = πTemp002
							// line 2356: nodes = root.iterfind(
							πF.SetLineno(2356)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr(".//{urn:oasis:names:tc:opendocument:xmlns:style:1.0}page-layout/{urn:oasis:names:tc:opendocument:xmlns:style:1.0}page-layout-properties").ToObject()
							if πE = πg.CheckLocal(πF, µroot, "root"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µroot, ßiterfind, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µnodes = πTemp002
							// line 2361: width = None
							πF.SetLineno(2361)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µwidth = πTemp001
							if πE = πg.CheckLocal(πF, µnodes, "nodes"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µnodes); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µnode = πTemp002
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 2363: page_width = node.get(
							πF.SetLineno(2363)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0}page-width").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µpage_width = πTemp006
							// line 2366: margin_left = node.get(
							πF.SetLineno(2366)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0}margin-left").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µmargin_left = πTemp006
							// line 2369: margin_right = node.get(
							πF.SetLineno(2369)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("{urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0}margin-right").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µmargin_right = πTemp006
							if πE = πg.CheckLocal(πF, µpage_width, "page_width"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp006 = πg.GetBool(µpage_width == πTemp007).ToObject()
							πTemp002 = πTemp006
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µmargin_left, "margin_left"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp006 = πg.GetBool(µmargin_left == πTemp007).ToObject()
							πTemp002 = πTemp006
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µmargin_right, "margin_right"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp006 = πg.GetBool(µmargin_right == πTemp007).ToObject()
							πTemp002 = πTemp006
						Label4:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label5
							}
							goto Label6
							// line 2372: if (page_width is None or
							πF.SetLineno(2372)
						Label5:
							// line 2375: continue
							πF.SetLineno(2375)
							continue
							goto Label6
						Label6:
							// line 2376: try:
							πF.SetLineno(2376)
							πF.PushCheckpoint(8)
							// line 2377: page_width, _ = self.convert_to_cm(page_width)
							πF.SetLineno(2377)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpage_width, "page_width"); πE != nil {
								continue
							}
							πTemp003[0] = µpage_width
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßconvert_to_cm, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp007}}}, πTemp006); πE != nil {
								continue
							}
							µpage_width = πTemp002
							µ_ = πTemp007
							// line 2378: margin_left, _ = self.convert_to_cm(margin_left)
							πF.SetLineno(2378)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmargin_left, "margin_left"); πE != nil {
								continue
							}
							πTemp003[0] = µmargin_left
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßconvert_to_cm, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp007}}}, πTemp006); πE != nil {
								continue
							}
							µmargin_left = πTemp002
							µ_ = πTemp007
							// line 2379: margin_right, _ = self.convert_to_cm(margin_right)
							πF.SetLineno(2379)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmargin_right, "margin_right"); πE != nil {
								continue
							}
							πTemp003[0] = µmargin_right
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßconvert_to_cm, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp007}}}, πTemp006); πE != nil {
								continue
							}
							µmargin_right = πTemp002
							µ_ = πTemp007
							πF.PopCheckpoint()
							goto Label7
						Label8:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp008, πTemp009 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßValueError); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsInstance(πF, πTemp008.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label9
							}
							πE = πF.Raise(πTemp008.ToObject(), nil, πTemp009.ToObject())
							continue
							// line 2380: except ValueError:
							πF.SetLineno(2380)
						Label9:
							// line 2381: self.document.reporter.warning(
							πF.SetLineno(2381)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("Stylesheet file contains invalid page width or margin size.").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp006, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πF.RestoreExc(nil, nil)
							goto Label7
						Label7:
							// line 2384: width = page_width - margin_left - margin_right
							πF.SetLineno(2384)
							if πE = πg.CheckLocal(πF, µpage_width, "page_width"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmargin_left, "margin_left"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Sub(πF, µpage_width, µmargin_left); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmargin_right, "margin_right"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp006, µmargin_right); πE != nil {
								continue
							}
							µwidth = πTemp002
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µwidth == πTemp002).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label10
							}
							goto Label11
							// line 2385: if width is None:
							πF.SetLineno(2385)
						Label10:
							// line 2388: width = 15.24
							πF.SetLineno(2388)
							µwidth = πg.NewFloat(15.24).ToObject()
							goto Label11
						Label11:
							// line 2389: return width
							πF.SetLineno(2389)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							πR = µwidth
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_page_width.ToObject(), πTemp132); πE != nil {
						continue
					}
					// line 2354: """Return the document's page width in centimeters."""
					πF.SetLineno(2354)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp133}, πg.NewStr("Return the document's page width in centimeters.").ToObject()); πE != nil {
						continue
					}
					if πTemp134, πE = πg.ResolveClass(πF, πClass, nil, ßget_page_width); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp134, ß__doc__, πTemp133); πE != nil {
						continue
					}
					// line 2391: def generate_figure(self, node, source, destination, current_element):
					πF.SetLineno(2391)
					πTemp003 = make([]πg.Param, 5)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "source", Def: nil}
					πTemp003[3] = πg.Param{Name: "destination", Def: nil}
					πTemp003[4] = πg.Param{Name: "current_element", Def: nil}
					πTemp133 = πg.NewFunction(πg.NewCode("generate_figure", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µsource *πg.Object = πArgs[2]
						_ = µsource
						var µdestination *πg.Object = πArgs[3]
						_ = µdestination
						var µcurrent_element *πg.Object = πArgs[4]
						_ = µcurrent_element
						var µcaption *πg.Object = πg.UnboundLocal
						_ = µcaption
						var µwidth *πg.Object = πg.UnboundLocal
						_ = µwidth
						var µheight *πg.Object = πg.UnboundLocal
						_ = µheight
						var µnode1 *πg.Object = πg.UnboundLocal
						_ = µnode1
						var µattrib *πg.Object = πg.UnboundLocal
						_ = µattrib
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µstyle_name *πg.Object = πg.UnboundLocal
						_ = µstyle_name
						var µdraw_name *πg.Object = πg.UnboundLocal
						_ = µdraw_name
						var µwrap *πg.Object = πg.UnboundLocal
						_ = µwrap
						var µclasses *πg.Object = πg.UnboundLocal
						_ = µclasses
						var µel3 *πg.Object = πg.UnboundLocal
						_ = µel3
						var µel4 *πg.Object = πg.UnboundLocal
						_ = µel4
						var µel5 *πg.Object = πg.UnboundLocal
						_ = µel5
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Dict
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2392: caption = None
							πF.SetLineno(2392)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µcaption = πTemp001
							// line 2393: width, height = self.get_image_scaled_width_height(node, source)
							πF.SetLineno(2393)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp002[0] = µnode
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp002[1] = µsource
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_image_scaled_width_height, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp004}}}, πTemp003); πE != nil {
								continue
							}
							µwidth = πTemp001
							µheight = πTemp004
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßchildren, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µnode1 = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)
							if πE = πg.CheckLocal(πF, µnode1, "node1"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode1, ßtagname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp004, ßcaption.ToObject()); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label4
							}
							goto Label5
							// line 2395: if node1.tagname == 'caption':
							πF.SetLineno(2395)
						Label4:
							// line 2396: caption = node1.astext()
							πF.SetLineno(2396)
							if πE = πg.CheckLocal(πF, µnode1, "node1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode1, ßastext, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µcaption = πTemp004
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2397: self.image_style_count += 1
							πF.SetLineno(2397)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßimage_style_count, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßimage_style_count, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcaption, "caption"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µcaption != πTemp003).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label6
							}
							goto Label7
							// line 2400: if caption is not None:
							πF.SetLineno(2400)
						Label6:
							// line 2401: attrib = {
							πF.SetLineno(2401)
							πTemp007 = πg.NewDict()
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:class").ToObject(), ßextra.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:family").ToObject(), ßparagraph.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:name").ToObject(), ßCaption.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:parent-style-name").ToObject(), ßStandard.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							µattrib = πTemp001
							// line 2407: el1 = SubElement(self.automatic_styles, 'style:style',
							πF.SetLineno(2407)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp002[1] = πg.NewStr("style:style").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", µattrib},
								{"nsdict", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µel1 = πTemp003
							// line 2409: attrib = {
							πF.SetLineno(2409)
							πTemp007 = πg.NewDict()
							if πE = πTemp007.SetItem(πF, πg.NewStr("fo:margin-bottom").ToObject(), πg.NewStr("0.0835in").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("fo:margin-top").ToObject(), πg.NewStr("0.0835in").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:line-number").ToObject(), ß0.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:number-lines").ToObject(), ßfalse.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							µattrib = πTemp001
							// line 2415: SubElement(el1, 'style:paragraph-properties',
							πF.SetLineno(2415)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp002[0] = µel1
							πTemp002[1] = πg.NewStr("style:paragraph-properties").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", µattrib},
								{"nsdict", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2417: attrib = {
							πF.SetLineno(2417)
							πTemp007 = πg.NewDict()
							if πE = πTemp007.SetItem(πF, πg.NewStr("fo:font-size").ToObject(), ß12pt.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("fo:font-style").ToObject(), ßitalic.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:font-name").ToObject(), ßTimes.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:font-name-complex").ToObject(), ßLucidasans1.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:font-size-asian").ToObject(), ß12pt.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:font-size-complex").ToObject(), ß12pt.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:font-style-asian").ToObject(), ßitalic.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:font-style-complex").ToObject(), ßitalic.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							µattrib = πTemp001
							// line 2427: SubElement(el1, 'style:text-properties',
							πF.SetLineno(2427)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp002[0] = µel1
							πTemp002[1] = πg.NewStr("style:text-properties").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", µattrib},
								{"nsdict", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label7
						Label7:
							// line 2429: style_name = 'rstframestyle%d' % self.image_style_count
							πF.SetLineno(2429)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßimage_style_count, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("rstframestyle%d").ToObject(), πTemp003); πE != nil {
								continue
							}
							µstyle_name = πTemp001
							// line 2430: draw_name = 'graphics%d' % next(IMAGE_NAME_COUNTER)
							πF.SetLineno(2430)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßIMAGE_NAME_COUNTER); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnext); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("graphics%d").ToObject(), πTemp004); πE != nil {
								continue
							}
							µdraw_name = πTemp001
							// line 2432: attrib = {
							πF.SetLineno(2432)
							πTemp007 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:name").ToObject(), µstyle_name); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:family").ToObject(), ßgraphic.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßfigureframe.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:parent-style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							µattrib = πTemp001
							// line 2437: el1 = SubElement(self.automatic_styles,
							πF.SetLineno(2437)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							πTemp002[1] = πg.NewStr("style:style").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", µattrib},
								{"nsdict", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µel1 = πTemp003
							// line 2439: attrib = {}
							πF.SetLineno(2439)
							πTemp007 = πg.NewDict()
							πTemp001 = πTemp007.ToObject()
							µattrib = πTemp001
							// line 2440: wrap = False
							πF.SetLineno(2440)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							µwrap = πTemp001
							// line 2441: classes = node.parent.attributes.get('classes')
							πF.SetLineno(2441)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µclasses = πTemp003
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							πTemp001 = µclasses
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label8
							}
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, µclasses, ßwrap.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp003
						Label8:
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label9
							}
							goto Label10
							// line 2442: if classes and 'wrap' in classes:
							πF.SetLineno(2442)
						Label9:
							// line 2443: wrap = True
							πF.SetLineno(2443)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							µwrap = πTemp001
							goto Label10
						Label10:
							if πE = πg.CheckLocal(πF, µwrap, "wrap"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, µwrap); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label11
							}
							goto Label12
							// line 2444: if wrap:
							πF.SetLineno(2444)
						Label11:
							// line 2445: attrib['style:wrap'] = 'dynamic'
							πF.SetLineno(2445)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, ßdynamic.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("style:wrap").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp001); πE != nil {
								continue
							}
							goto Label13
						Label12:
							// line 2447: attrib['style:wrap'] = 'none'
							πF.SetLineno(2447)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, ßnone.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("style:wrap").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp001); πE != nil {
								continue
							}
							goto Label13
						Label13:
							// line 2448: SubElement(el1, 'style:graphic-properties',
							πF.SetLineno(2448)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp002[0] = µel1
							πTemp002[1] = πg.NewStr("style:graphic-properties").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", µattrib},
								{"nsdict", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2450: attrib = {
							πF.SetLineno(2450)
							πTemp007 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("draw:style-name").ToObject(), µstyle_name); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdraw_name, "draw_name"); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("draw:name").ToObject(), µdraw_name); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:anchor-type").ToObject(), ßparagraph.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("draw:z-index").ToObject(), ß0.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							µattrib = πTemp001
							// line 2456: attrib['svg:width'] = width
							πF.SetLineno(2456)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µwidth); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("svg:width").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp001); πE != nil {
								continue
							}
							// line 2457: el3 = SubElement(current_element, 'draw:frame', attrib=attrib)
							πF.SetLineno(2457)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µcurrent_element, "current_element"); πE != nil {
								continue
							}
							πTemp002[0] = µcurrent_element
							πTemp002[1] = πg.NewStr("draw:frame").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", µattrib},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µel3 = πTemp003
							// line 2458: attrib = {}
							πF.SetLineno(2458)
							πTemp007 = πg.NewDict()
							πTemp001 = πTemp007.ToObject()
							µattrib = πTemp001
							// line 2459: el4 = SubElement(el3, 'draw:text-box', attrib=attrib)
							πF.SetLineno(2459)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							πTemp002[0] = µel3
							πTemp002[1] = πg.NewStr("draw:text-box").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", µattrib},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µel4 = πTemp003
							// line 2460: attrib = {
							πF.SetLineno(2460)
							πTemp007 = πg.NewDict()
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßcaption.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							µattrib = πTemp001
							// line 2463: el5 = SubElement(el4, 'text:p', attrib=attrib)
							πF.SetLineno(2463)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel4, "el4"); πE != nil {
								continue
							}
							πTemp002[0] = µel4
							πTemp002[1] = πg.NewStr("text:p").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", µattrib},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µel5 = πTemp003
							// line 2464: return el3, el4, el5, caption
							πF.SetLineno(2464)
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel4, "el4"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel5, "el5"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcaption, "caption"); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple4(µel3, µel4, µel5, µcaption).ToObject()
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßgenerate_figure.ToObject(), πTemp133); πE != nil {
						continue
					}
					// line 2466: def generate_image(self, node, source, destination, current_element,
					πF.SetLineno(2466)
					πTemp003 = make([]πg.Param, 6)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "source", Def: nil}
					πTemp003[3] = πg.Param{Name: "destination", Def: nil}
					πTemp003[4] = πg.Param{Name: "current_element", Def: nil}
					if πTemp135, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003[5] = πg.Param{Name: "frame_attrs", Def: πTemp135}
					πTemp134 = πg.NewFunction(πg.NewCode("generate_image", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µsource *πg.Object = πArgs[2]
						_ = µsource
						var µdestination *πg.Object = πArgs[3]
						_ = µdestination
						var µcurrent_element *πg.Object = πArgs[4]
						_ = µcurrent_element
						var µframe_attrs *πg.Object = πArgs[5]
						_ = µframe_attrs
						var µwidth *πg.Object = πg.UnboundLocal
						_ = µwidth
						var µheight *πg.Object = πg.UnboundLocal
						_ = µheight
						var µstyle_name *πg.Object = πg.UnboundLocal
						_ = µstyle_name
						var µattrib *πg.Object = πg.UnboundLocal
						_ = µattrib
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µhalign *πg.Object = πg.UnboundLocal
						_ = µhalign
						var µvalign *πg.Object = πg.UnboundLocal
						_ = µvalign
						var µalign *πg.Object = πg.UnboundLocal
						_ = µalign
						var µval *πg.Object = πg.UnboundLocal
						_ = µval
						var µwrap *πg.Object = πg.UnboundLocal
						_ = µwrap
						var µclasses *πg.Object = πg.UnboundLocal
						_ = µclasses
						var µdraw_name *πg.Object = πg.UnboundLocal
						_ = µdraw_name
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 3:
								goto Label3
							case 4:
								goto Label4
							default:
								panic("unexpected function state")
							}
							// line 2468: width, height = self.get_image_scaled_width_height(node, source)
							πF.SetLineno(2468)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp001[1] = µsource
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßget_image_scaled_width_height, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp004}}}, πTemp003); πE != nil {
								continue
							}
							µwidth = πTemp002
							µheight = πTemp004
							// line 2469: self.image_style_count += 1
							πF.SetLineno(2469)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßimage_style_count, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, πTemp002, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßimage_style_count, πTemp003); πE != nil {
								continue
							}
							// line 2470: style_name = 'rstframestyle%d' % self.image_style_count
							πF.SetLineno(2470)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßimage_style_count, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("rstframestyle%d").ToObject(), πTemp003); πE != nil {
								continue
							}
							µstyle_name = πTemp002
							// line 2472: attrib = {
							πF.SetLineno(2472)
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:name").ToObject(), µstyle_name); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:family").ToObject(), ßgraphic.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßimage.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:parent-style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							µattrib = πTemp002
							// line 2477: el1 = SubElement(self.automatic_styles,
							πF.SetLineno(2477)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("style:style").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"attrib", µattrib},
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 2479: halign = None
							πF.SetLineno(2479)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µhalign = πTemp002
							// line 2480: valign = None
							πF.SetLineno(2480)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µvalign = πTemp002
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Contains(πF, πTemp003, ßalign.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label1
							}
							goto Label2
							// line 2481: if 'align' in node.attributes:
							πF.SetLineno(2481)
						Label1:
							// line 2482: align = node.attributes['align'].split()
							πF.SetLineno(2482)
							πTemp002 = ßalign.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µalign = πTemp003
							if πE = πg.CheckLocal(πF, µalign, "align"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, µalign); πE != nil {
								continue
							}
							πF.PushCheckpoint(4)
							πTemp007 = false
						Label3:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp007 {
								πF.PopCheckpoint()
								goto Label5
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp008 = !isStop
							} else {
								πTemp008 = true
								µval = πTemp003
							}
							if πE != nil || !πTemp008 {
								continue
							}
							πF.PushCheckpoint(3)
							if πE = πg.CheckLocal(πF, µval, "val"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple3(ßleft.ToObject(), ßcenter.ToObject(), ßright.ToObject()).ToObject()
							if πTemp008, πE = πg.Contains(πF, πTemp004, µval); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp008).ToObject()
							if πTemp008, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label6
							}
							if πE = πg.CheckLocal(πF, µval, "val"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple3(ßtop.ToObject(), ßmiddle.ToObject(), ßbottom.ToObject()).ToObject()
							if πTemp008, πE = πg.Contains(πF, πTemp004, µval); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp008).ToObject()
							if πTemp008, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label7
							}
							goto Label8
							// line 2484: if val in ('left', 'center', 'right'):
							πF.SetLineno(2484)
						Label6:
							// line 2485: halign = val
							πF.SetLineno(2485)
							if πE = πg.CheckLocal(πF, µval, "val"); πE != nil {
								continue
							}
							µhalign = µval
							goto Label8
							// line 2486: elif val in ('top', 'middle', 'bottom'):
							πF.SetLineno(2486)
						Label7:
							// line 2487: valign = val
							πF.SetLineno(2487)
							if πE = πg.CheckLocal(πF, µval, "val"); πE != nil {
								continue
							}
							µvalign = µval
							goto Label8
						Label8:
							continue
						Label4:
							if πE != nil || πR != nil {
								continue
							}
						Label5:
							goto Label2
						Label2:
							if πE = πg.CheckLocal(πF, µframe_attrs, "frame_attrs"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µframe_attrs == πTemp003).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label9
							}
							goto Label10
							// line 2488: if frame_attrs is None:
							πF.SetLineno(2488)
						Label9:
							// line 2489: attrib = {
							πF.SetLineno(2489)
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:vertical-pos").ToObject(), ßtop.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:vertical-rel").ToObject(), ßparagraph.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:horizontal-rel").ToObject(), ßparagraph.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:mirror").ToObject(), ßnone.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:clip").ToObject(), πg.NewStr("rect(0cm 0cm 0cm 0cm)").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:luminance").ToObject(), πg.NewStr("0%").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:contrast").ToObject(), πg.NewStr("0%").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:red").ToObject(), πg.NewStr("0%").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:green").ToObject(), πg.NewStr("0%").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:blue").ToObject(), πg.NewStr("0%").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:gamma").ToObject(), πg.NewStr("100%").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:color-inversion").ToObject(), ßfalse.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:image-opacity").ToObject(), πg.NewStr("100%").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:color-mode").ToObject(), ßstandard.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							µattrib = πTemp002
							goto Label11
						Label10:
							// line 2506: attrib = frame_attrs
							πF.SetLineno(2506)
							if πE = πg.CheckLocal(πF, µframe_attrs, "frame_attrs"); πE != nil {
								continue
							}
							µattrib = µframe_attrs
							goto Label11
						Label11:
							if πE = πg.CheckLocal(πF, µhalign, "halign"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µhalign != πTemp003).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label12
							}
							goto Label13
							// line 2507: if halign is not None:
							πF.SetLineno(2507)
						Label12:
							// line 2508: attrib['style:horizontal-pos'] = halign
							πF.SetLineno(2508)
							if πE = πg.CheckLocal(πF, µhalign, "halign"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µhalign); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("style:horizontal-pos").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp002); πE != nil {
								continue
							}
							goto Label13
						Label13:
							if πE = πg.CheckLocal(πF, µvalign, "valign"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µvalign != πTemp003).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label14
							}
							goto Label15
							// line 2509: if valign is not None:
							πF.SetLineno(2509)
						Label14:
							// line 2510: attrib['style:vertical-pos'] = valign
							πF.SetLineno(2510)
							if πE = πg.CheckLocal(πF, µvalign, "valign"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µvalign); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("style:vertical-pos").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp002); πE != nil {
								continue
							}
							goto Label15
						Label15:
							// line 2513: wrap = False
							πF.SetLineno(2513)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							µwrap = πTemp002
							// line 2514: classes = node.attributes.get('classes')
							πF.SetLineno(2514)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µclasses = πTemp002
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							πTemp002 = µclasses
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp007 {
								goto Label16
							}
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.Contains(πF, µclasses, ßwrap.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp008).ToObject()
							πTemp002 = πTemp003
						Label16:
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label17
							}
							goto Label18
							// line 2515: if classes and 'wrap' in classes:
							πF.SetLineno(2515)
						Label17:
							// line 2516: wrap = True
							πF.SetLineno(2516)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							µwrap = πTemp002
							goto Label18
						Label18:
							if πE = πg.CheckLocal(πF, µwrap, "wrap"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, µwrap); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label19
							}
							goto Label20
							// line 2517: if wrap:
							πF.SetLineno(2517)
						Label19:
							// line 2518: attrib['style:wrap'] = 'dynamic'
							πF.SetLineno(2518)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ßdynamic.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("style:wrap").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp002); πE != nil {
								continue
							}
							goto Label21
						Label20:
							// line 2520: attrib['style:wrap'] = 'none'
							πF.SetLineno(2520)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ßnone.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("style:wrap").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp002); πE != nil {
								continue
							}
							goto Label21
						Label21:
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßis_in_table, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp007, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label22
							}
							goto Label23
							// line 2522: if self.is_in_table(node):
							πF.SetLineno(2522)
						Label22:
							// line 2523: attrib['style:wrap'] = 'none'
							πF.SetLineno(2523)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ßnone.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("style:wrap").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp002); πE != nil {
								continue
							}
							goto Label23
						Label23:
							// line 2524: SubElement(el1, 'style:graphic-properties',
							πF.SetLineno(2524)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							πTemp001[1] = πg.NewStr("style:graphic-properties").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"attrib", µattrib},
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2526: draw_name = 'graphics%d' % next(IMAGE_NAME_COUNTER)
							πF.SetLineno(2526)
							πTemp001 = πF.MakeArgs(1)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßIMAGE_NAME_COUNTER); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnext); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("graphics%d").ToObject(), πTemp004); πE != nil {
								continue
							}
							µdraw_name = πTemp002
							// line 2530: attrib = {
							πF.SetLineno(2530)
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:style-name").ToObject(), µstyle_name); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdraw_name, "draw_name"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:name").ToObject(), µdraw_name); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("draw:z-index").ToObject(), ß1.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							µattrib = πTemp002
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßTextElement, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp007, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label24
							}
							goto Label25
							// line 2535: if isinstance(node.parent, nodes.TextElement):
							πF.SetLineno(2535)
						Label24:
							// line 2536: attrib['text:anchor-type'] = 'as-char'      # vds
							πF.SetLineno(2536)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("as-char").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("text:anchor-type").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp002); πE != nil {
								continue
							}
							goto Label26
						Label25:
							// line 2538: attrib['text:anchor-type'] = 'paragraph'
							πF.SetLineno(2538)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ßparagraph.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("text:anchor-type").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp002); πE != nil {
								continue
							}
							goto Label26
						Label26:
							// line 2539: attrib['svg:width'] = width
							πF.SetLineno(2539)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µwidth); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("svg:width").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp002); πE != nil {
								continue
							}
							// line 2540: attrib['svg:height'] = height
							πF.SetLineno(2540)
							if πE = πg.CheckLocal(πF, µheight, "height"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µheight); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp003 = πg.NewStr("svg:height").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp003, πTemp002); πE != nil {
								continue
							}
							// line 2541: el1 = SubElement(current_element, 'draw:frame', attrib=attrib)
							πF.SetLineno(2541)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µcurrent_element, "current_element"); πE != nil {
								continue
							}
							πTemp001[0] = µcurrent_element
							πTemp001[1] = πg.NewStr("draw:frame").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"attrib", µattrib},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 2542: SubElement(el1, 'draw:image', attrib={
							πF.SetLineno(2542)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							πTemp001[1] = πg.NewStr("draw:image").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µdestination, "destination"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(µdestination).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("xlink:href").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("xlink:type").ToObject(), ßsimple.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("xlink:show").ToObject(), ßembed.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("xlink:actuate").ToObject(), ßonLoad.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2548: return el1, width
							πF.SetLineno(2548)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(µel1, µwidth).ToObject()
							πR = πTemp002
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßgenerate_image.ToObject(), πTemp134); πE != nil {
						continue
					}
					// line 2550: def is_in_table(self, node):
					πF.SetLineno(2550)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp135 = πg.NewFunction(πg.NewCode("is_in_table", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µnode1 *πg.Object = πg.UnboundLocal
						_ = µnode1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2551: node1 = node.parent
							πF.SetLineno(2551)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							µnode1 = πTemp001
							// line 2552: while node1:
							πF.SetLineno(2552)
							πF.PushCheckpoint(2)
							πTemp002 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πE = πg.CheckLocal(πF, µnode1, "node1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, µnode1); πE != nil {
								continue
							}
							if πE != nil || !πTemp003 {
								continue
							}
							πF.PushCheckpoint(1)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode1, "node1"); πE != nil {
								continue
							}
							πTemp004[0] = µnode1
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp001, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp005, ßentry, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp003, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label4
							}
							goto Label5
							// line 2553: if isinstance(node1, docutils.nodes.entry):
							πF.SetLineno(2553)
						Label4:
							// line 2554: return True
							πF.SetLineno(2554)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							goto Label5
						Label5:
							// line 2555: node1 = node1.parent
							πF.SetLineno(2555)
							if πE = πg.CheckLocal(πF, µnode1, "node1"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode1, ßparent, nil); πE != nil {
								continue
							}
							µnode1 = πTemp001
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2556: return False
							πF.SetLineno(2556)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßis_in_table.ToObject(), πTemp135); πE != nil {
						continue
					}
					// line 2558: def visit_legend(self, node):
					πF.SetLineno(2558)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp136 = πg.NewFunction(πg.NewCode("visit_legend", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßfigure, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2559: if isinstance(node.parent, docutils.nodes.figure):
							πF.SetLineno(2559)
						Label1:
							// line 2560: el1 = self.current_element[-1]
							πF.SetLineno(2560)
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							µel1 = πTemp003
							// line 2561: el1 = el1[0][0]
							πF.SetLineno(2561)
							πTemp002 = πg.NewInt(0).ToObject()
							πTemp005 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, µel1, πTemp005); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp006, πTemp002); πE != nil {
								continue
							}
							µel1 = πTemp003
							// line 2562: self.current_element = el1
							πF.SetLineno(2562)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µel1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcurrent_element, πTemp002); πE != nil {
								continue
							}
							// line 2563: self.paragraph_style_stack.append(self.rststyle('legend'))
							πF.SetLineno(2563)
							πTemp001 = πF.MakeArgs(1)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = ßlegend.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_legend.ToObject(), πTemp136); πE != nil {
						continue
					}
					// line 2565: def depart_legend(self, node):
					πF.SetLineno(2565)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp137 = πg.NewFunction(πg.NewCode("depart_legend", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßfigure, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2566: if isinstance(node.parent, docutils.nodes.figure):
							πF.SetLineno(2566)
						Label1:
							// line 2567: self.paragraph_style_stack.pop()
							πF.SetLineno(2567)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2568: self.set_to_parent()
							πF.SetLineno(2568)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2569: self.set_to_parent()
							πF.SetLineno(2569)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2570: self.set_to_parent()
							πF.SetLineno(2570)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_legend.ToObject(), πTemp137); πE != nil {
						continue
					}
					// line 2572: def visit_line_block(self, node):
					πF.SetLineno(2572)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp138 = πg.NewFunction(πg.NewCode("visit_line_block", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2573: self.line_indent_level += 1
							πF.SetLineno(2573)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßline_indent_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßline_indent_level, πTemp002); πE != nil {
								continue
							}
							// line 2574: self.line_block_level += 1
							πF.SetLineno(2574)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßline_block_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßline_block_level, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_line_block.ToObject(), πTemp138); πE != nil {
						continue
					}
					// line 2576: def depart_line_block(self, node):
					πF.SetLineno(2576)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp139 = πg.NewFunction(πg.NewCode("depart_line_block", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2577: self.line_indent_level -= 1
							πF.SetLineno(2577)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßline_indent_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßline_indent_level, πTemp002); πE != nil {
								continue
							}
							// line 2578: self.line_block_level -= 1
							πF.SetLineno(2578)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßline_block_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßline_block_level, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_line_block.ToObject(), πTemp139); πE != nil {
						continue
					}
					// line 2580: def visit_line(self, node):
					πF.SetLineno(2580)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp140 = πg.NewFunction(πg.NewCode("visit_line", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µstyle *πg.Object = πg.UnboundLocal
						_ = µstyle
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2581: style = 'lineblock%d' % self.line_indent_level
							πF.SetLineno(2581)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßline_indent_level, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("lineblock%d").ToObject(), πTemp002); πE != nil {
								continue
							}
							µstyle = πTemp001
							// line 2582: el1 = SubElement(self.current_element, 'text:p',
							πF.SetLineno(2582)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewStr("text:p").ToObject()
							πTemp004 = πg.NewDict()
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyle, "style"); πE != nil {
								continue
							}
							πTemp005[0] = µstyle
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πTemp004.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp002
							// line 2584: self.current_element = el1
							πF.SetLineno(2584)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µel1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcurrent_element, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_line.ToObject(), πTemp140); πE != nil {
						continue
					}
					// line 2586: def depart_line(self, node):
					πF.SetLineno(2586)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp141 = πg.NewFunction(πg.NewCode("depart_line", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2587: self.set_to_parent()
							πF.SetLineno(2587)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_line.ToObject(), πTemp141); πE != nil {
						continue
					}
					// line 2589: def visit_literal(self, node):
					πF.SetLineno(2589)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp142 = πg.NewFunction(πg.NewCode("visit_literal", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Dict
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2590: el = SubElement(
							πF.SetLineno(2590)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("text:span").ToObject()
							πTemp003 = πg.NewDict()
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßinlineliteral.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πE = πTemp003.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp002 = πTemp003.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp005
							// line 2593: self.set_current_element(el)
							πF.SetLineno(2593)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_literal.ToObject(), πTemp142); πE != nil {
						continue
					}
					// line 2595: def depart_literal(self, node):
					πF.SetLineno(2595)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp143 = πg.NewFunction(πg.NewCode("depart_literal", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2596: self.set_to_parent()
							πF.SetLineno(2596)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_literal.ToObject(), πTemp143); πE != nil {
						continue
					}
					// line 2598: def visit_inline(self, node):
					πF.SetLineno(2598)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp144 = πg.NewFunction(πg.NewCode("visit_inline", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µstyles *πg.Object = πg.UnboundLocal
						_ = µstyles
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µinline_style *πg.Object = πg.UnboundLocal
						_ = µinline_style
						var µcount *πg.Object = πg.UnboundLocal
						_ = µcount
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 4:
								goto Label4
							case 5:
								goto Label5
							default:
								panic("unexpected function state")
							}
							// line 2599: styles = node.attributes.get('classes', ())
							πF.SetLineno(2599)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ßclasses.ToObject()
							πTemp002 = πg.NewTuple0().ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µstyles = πTemp002
							if πE = πg.CheckLocal(πF, µstyles, "styles"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, µstyles); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2600: if styles:
							πF.SetLineno(2600)
						Label1:
							// line 2601: el = self.current_element
							πF.SetLineno(2601)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							µel = πTemp002
							if πE = πg.CheckLocal(πF, µstyles, "styles"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, µstyles); πE != nil {
								continue
							}
							πF.PushCheckpoint(5)
							πTemp004 = false
						Label4:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label6
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µinline_style = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(4)
							// line 2603: el = SubElement(el, 'text:span',
							πF.SetLineno(2603)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							πTemp001[1] = πg.NewStr("text:span").ToObject()
							πTemp006 = πg.NewDict()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µinline_style, "inline_style"); πE != nil {
								continue
							}
							πTemp007[0] = µinline_style
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp008); πE != nil {
								continue
							}
							πTemp003 = πTemp006.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp003},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp003.Call(πF, πTemp001, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp008
							continue
						Label5:
							if πE != nil || πR != nil {
								continue
							}
						Label6:
							// line 2606: count = len(styles)
							πF.SetLineno(2606)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µstyles, "styles"); πE != nil {
								continue
							}
							πTemp001[0] = µstyles
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µcount = πTemp003
							goto Label3
						Label2:
							// line 2610: el = SubElement(self.current_element, 'text:span')
							πF.SetLineno(2610)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("text:span").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 2611: count = 1
							πF.SetLineno(2611)
							µcount = πg.NewInt(1).ToObject()
							goto Label3
						Label3:
							// line 2613: self.set_current_element(el)
							πF.SetLineno(2613)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2614: self.inline_style_count_stack.append(count)
							πF.SetLineno(2614)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcount, "count"); πE != nil {
								continue
							}
							πTemp001[0] = µcount
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßinline_style_count_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_inline.ToObject(), πTemp144); πE != nil {
						continue
					}
					// line 2616: def depart_inline(self, node):
					πF.SetLineno(2616)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp145 = πg.NewFunction(πg.NewCode("depart_inline", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µcount *πg.Object = πg.UnboundLocal
						_ = µcount
						var µx *πg.Object = πg.UnboundLocal
						_ = µx
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2617: count = self.inline_style_count_stack.pop()
							πF.SetLineno(2617)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßinline_style_count_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µcount = πTemp001
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcount, "count"); πE != nil {
								continue
							}
							πTemp003[0] = µcount
							if πTemp002, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µx = πTemp002
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 2619: self.set_to_parent()
							πF.SetLineno(2619)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_inline.ToObject(), πTemp145); πE != nil {
						continue
					}
					// line 2621: def _calculate_code_block_padding(self, line):
					πF.SetLineno(2621)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "line", Def: nil}
					πTemp146 = πg.NewFunction(πg.NewCode("_calculate_code_block_padding", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µline *πg.Object = πArgs[1]
						_ = µline
						var µcount *πg.Object = πg.UnboundLocal
						_ = µcount
						var µmatchobj *πg.Object = πg.UnboundLocal
						_ = µmatchobj
						var µpad *πg.Object = πg.UnboundLocal
						_ = µpad
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2622: count = 0
							πF.SetLineno(2622)
							µcount = πg.NewInt(0).ToObject()
							// line 2623: matchobj = SPACES_PATTERN.match(line)
							πF.SetLineno(2623)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
								continue
							}
							πTemp001[0] = µline
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSPACES_PATTERN); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmatch, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmatchobj = πTemp002
							if πE = πg.CheckLocal(πF, µmatchobj, "matchobj"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, µmatchobj); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2624: if matchobj:
							πF.SetLineno(2624)
						Label1:
							// line 2625: pad = matchobj.group()
							πF.SetLineno(2625)
							if πE = πg.CheckLocal(πF, µmatchobj, "matchobj"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmatchobj, ßgroup, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µpad = πTemp003
							// line 2626: count = len(pad)
							πF.SetLineno(2626)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpad, "pad"); πE != nil {
								continue
							}
							πTemp001[0] = µpad
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µcount = πTemp003
							goto Label3
						Label2:
							// line 2628: matchobj = TABS_PATTERN.match(line)
							πF.SetLineno(2628)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
								continue
							}
							πTemp001[0] = µline
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTABS_PATTERN); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßmatch, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmatchobj = πTemp002
							if πE = πg.CheckLocal(πF, µmatchobj, "matchobj"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, µmatchobj); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 2629: if matchobj:
							πF.SetLineno(2629)
						Label4:
							// line 2630: pad = matchobj.group()
							πF.SetLineno(2630)
							if πE = πg.CheckLocal(πF, µmatchobj, "matchobj"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmatchobj, ßgroup, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µpad = πTemp003
							// line 2631: count = len(pad) * 8
							πF.SetLineno(2631)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpad, "pad"); πE != nil {
								continue
							}
							πTemp001[0] = µpad
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Mul(πF, πTemp005, πg.NewInt(8).ToObject()); πE != nil {
								continue
							}
							µcount = πTemp002
							goto Label5
						Label5:
							goto Label3
						Label3:
							// line 2632: return count
							πF.SetLineno(2632)
							if πE = πg.CheckLocal(πF, µcount, "count"); πE != nil {
								continue
							}
							πR = µcount
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß_calculate_code_block_padding.ToObject(), πTemp146); πE != nil {
						continue
					}
					// line 2634: def _add_syntax_highlighting(self, insource, language):
					πF.SetLineno(2634)
					πTemp003 = make([]πg.Param, 3)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "insource", Def: nil}
					πTemp003[2] = πg.Param{Name: "language", Def: nil}
					πTemp147 = πg.NewFunction(πg.NewCode("_add_syntax_highlighting", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µinsource *πg.Object = πArgs[1]
						_ = µinsource
						var µlanguage *πg.Object = πArgs[2]
						_ = µlanguage
						var µlexer *πg.Object = πg.UnboundLocal
						_ = µlexer
						var µfmtr *πg.Object = πg.UnboundLocal
						_ = µfmtr
						var µoutsource *πg.Object = πg.UnboundLocal
						_ = µoutsource
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []πg.Param
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2635: lexer = pygments.lexers.get_lexer_by_name(language, stripall=True)
							πF.SetLineno(2635)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							πTemp001[0] = µlanguage
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"stripall", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßpygments); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßlexers, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp004, ßget_lexer_by_name, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µlexer = πTemp004
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple2(ßlatex.ToObject(), ßtex.ToObject()).ToObject()
							if πTemp005, πE = πg.Contains(πF, πTemp004, µlanguage); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 2636: if language in ('latex', 'tex'):
							πF.SetLineno(2636)
						Label1:
							// line 2637: fmtr = OdtPygmentsLaTeXFormatter(
							πF.SetLineno(2637)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = make([]πg.Param, 2)
							πTemp006[0] = πg.Param{Name: "name", Def: nil}
							πTemp004 = πg.NewTuple0().ToObject()
							πTemp006[1] = πg.Param{Name: "parameters", Def: πTemp004}
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µname *πg.Object = πArgs[0]
								_ = µname
								var µparameters *πg.Object = πArgs[1]
								_ = µparameters
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default:
										panic("unexpected function state")
									}
									// line 2638: lambda name, parameters=():
									πF.SetLineno(2638)
									πTemp001 = πF.MakeArgs(2)
									if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
										continue
									}
									πTemp001[0] = µname
									if πE = πg.CheckLocal(πF, µparameters, "parameters"); πE != nil {
										continue
									}
									πTemp001[1] = µparameters
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									πR = πTemp003
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßescape_cdata); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"escape_function", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßOdtPygmentsLaTeXFormatter); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µfmtr = πTemp004
							goto Label3
						Label2:
							// line 2642: fmtr = OdtPygmentsProgFormatter(
							πF.SetLineno(2642)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = make([]πg.Param, 2)
							πTemp006[0] = πg.Param{Name: "name", Def: nil}
							πTemp004 = πg.NewTuple0().ToObject()
							πTemp006[1] = πg.Param{Name: "parameters", Def: πTemp004}
							πTemp002 = πg.NewFunction(πg.NewCode("<lambda>", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µname *πg.Object = πArgs[0]
								_ = µname
								var µparameters *πg.Object = πArgs[1]
								_ = µparameters
								var πTemp001 []*πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								for ; πF.State() >= 0; πF.PopCheckpoint() {
									switch πF.State() {
									case 0:
									default:
										panic("unexpected function state")
									}
									// line 2643: lambda name, parameters=():
									πF.SetLineno(2643)
									πTemp001 = πF.MakeArgs(2)
									if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
										continue
									}
									πTemp001[0] = µname
									if πE = πg.CheckLocal(πF, µparameters, "parameters"); πE != nil {
										continue
									}
									πTemp001[1] = µparameters
									if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
										continue
									}
									if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
										continue
									}
									if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
										continue
									}
									πF.FreeArgs(πTemp001)
									πR = πTemp003
									continue
								}
								if πE != nil {
									πR = nil
								} else if πR == nil {
									πR = πg.None
								}
								return πR, πE
							}), πF.Globals()).ToObject()
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßescape_cdata); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"escape_function", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßOdtPygmentsProgFormatter); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µfmtr = πTemp004
							goto Label3
						Label3:
							// line 2646: outsource = pygments.highlight(insource, lexer, fmtr)
							πF.SetLineno(2646)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µinsource, "insource"); πE != nil {
								continue
							}
							πTemp001[0] = µinsource
							if πE = πg.CheckLocal(πF, µlexer, "lexer"); πE != nil {
								continue
							}
							πTemp001[1] = µlexer
							if πE = πg.CheckLocal(πF, µfmtr, "fmtr"); πE != nil {
								continue
							}
							πTemp001[2] = µfmtr
							if πTemp002, πE = πg.ResolveGlobal(πF, ßpygments); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßhighlight, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µoutsource = πTemp002
							// line 2647: return outsource
							πF.SetLineno(2647)
							if πE = πg.CheckLocal(πF, µoutsource, "outsource"); πE != nil {
								continue
							}
							πR = µoutsource
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß_add_syntax_highlighting.ToObject(), πTemp147); πE != nil {
						continue
					}
					// line 2649: def fill_line(self, line):
					πF.SetLineno(2649)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "line", Def: nil}
					πTemp148 = πg.NewFunction(πg.NewCode("fill_line", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µline *πg.Object = πArgs[1]
						_ = µline
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2650: line = FILL_PAT1.sub(self.fill_func1, line)
							πF.SetLineno(2650)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfill_func1, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
								continue
							}
							πTemp001[1] = µline
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFILL_PAT1); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsub, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µline = πTemp002
							// line 2651: line = FILL_PAT2.sub(self.fill_func2, line)
							πF.SetLineno(2651)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfill_func2, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
								continue
							}
							πTemp001[1] = µline
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFILL_PAT2); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsub, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µline = πTemp002
							// line 2652: return line
							πF.SetLineno(2652)
							if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
								continue
							}
							πR = µline
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßfill_line.ToObject(), πTemp148); πE != nil {
						continue
					}
					// line 2654: def fill_func1(self, matchobj):
					πF.SetLineno(2654)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "matchobj", Def: nil}
					πTemp149 = πg.NewFunction(πg.NewCode("fill_func1", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µmatchobj *πg.Object = πArgs[1]
						_ = µmatchobj
						var µspaces *πg.Object = πg.UnboundLocal
						_ = µspaces
						var µrepl *πg.Object = πg.UnboundLocal
						_ = µrepl
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2655: spaces = matchobj.group(0)
							πF.SetLineno(2655)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µmatchobj, "matchobj"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmatchobj, ßgroup, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µspaces = πTemp003
							// line 2656: repl = '<text:s text:c="%d"/>' % (len(spaces), )
							πF.SetLineno(2656)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µspaces, "spaces"); πE != nil {
								continue
							}
							πTemp001[0] = µspaces
							if πTemp004, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp003 = πg.NewTuple1(πTemp005).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("<text:s text:c=\"%d\"/>").ToObject(), πTemp003); πE != nil {
								continue
							}
							µrepl = πTemp002
							// line 2657: return repl
							πF.SetLineno(2657)
							if πE = πg.CheckLocal(πF, µrepl, "repl"); πE != nil {
								continue
							}
							πR = µrepl
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßfill_func1.ToObject(), πTemp149); πE != nil {
						continue
					}
					// line 2659: def fill_func2(self, matchobj):
					πF.SetLineno(2659)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "matchobj", Def: nil}
					πTemp150 = πg.NewFunction(πg.NewCode("fill_func2", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µmatchobj *πg.Object = πArgs[1]
						_ = µmatchobj
						var µspaces *πg.Object = πg.UnboundLocal
						_ = µspaces
						var µrepl *πg.Object = πg.UnboundLocal
						_ = µrepl
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2660: spaces = matchobj.group(0)
							πF.SetLineno(2660)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µmatchobj, "matchobj"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µmatchobj, ßgroup, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µspaces = πTemp003
							// line 2661: repl = ' <text:s text:c="%d"/>' % (len(spaces) - 1, )
							πF.SetLineno(2661)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µspaces, "spaces"); πE != nil {
								continue
							}
							πTemp001[0] = µspaces
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.Sub(πF, πTemp006, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp004).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr(" <text:s text:c=\"%d\"/>").ToObject(), πTemp003); πE != nil {
								continue
							}
							µrepl = πTemp002
							// line 2662: return repl
							πF.SetLineno(2662)
							if πE = πg.CheckLocal(πF, µrepl, "repl"); πE != nil {
								continue
							}
							πR = µrepl
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßfill_func2.ToObject(), πTemp150); πE != nil {
						continue
					}
					// line 2664: def visit_literal_block(self, node):
					πF.SetLineno(2664)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp151 = πg.NewFunction(πg.NewCode("visit_literal_block", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µwrapper1 *πg.Object = πg.UnboundLocal
						_ = µwrapper1
						var µsource *πg.Object = πg.UnboundLocal
						_ = µsource
						var µlanguage *πg.Object = πg.UnboundLocal
						_ = µlanguage
						var µlines *πg.Object = πg.UnboundLocal
						_ = µlines
						var µlines1 *πg.Object = πg.UnboundLocal
						_ = µlines1
						var µmy_lines *πg.Object = πg.UnboundLocal
						_ = µmy_lines
						var µmy_line *πg.Object = πg.UnboundLocal
						_ = µmy_line
						var µmy_lines_str *πg.Object = πg.UnboundLocal
						_ = µmy_lines_str
						var µmy_lines_str2 *πg.Object = πg.UnboundLocal
						_ = µmy_lines_str2
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µchild *πg.Object = πg.UnboundLocal
						_ = µchild
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 10:
								goto Label10
							case 11:
								goto Label11
							case 13:
								goto Label13
							case 14:
								goto Label14
							default:
								panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.GT(πF, πTemp004, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 2665: if len(self.paragraph_style_stack) > 1:
							πF.SetLineno(2665)
						Label1:
							// line 2666: wrapper1 = '<text:p text:style-name="%s">%%s</text:p>' % (
							πF.SetLineno(2666)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("codeblock-indented").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp003 = πg.NewTuple1(πTemp006).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("<text:p text:style-name=\"%s\">%%s</text:p>").ToObject(), πTemp003); πE != nil {
								continue
							}
							µwrapper1 = πTemp001
							goto Label3
						Label2:
							// line 2669: wrapper1 = '<text:p text:style-name="%s">%%s</text:p>' % (
							πF.SetLineno(2669)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßcodeblock.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp003 = πg.NewTuple1(πTemp006).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("<text:p text:style-name=\"%s\">%%s</text:p>").ToObject(), πTemp003); πE != nil {
								continue
							}
							µwrapper1 = πTemp001
							goto Label3
						Label3:
							// line 2671: source = node.astext()
							πF.SetLineno(2671)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µsource = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßpygments); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßadd_syntax_highlighting, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp004
						Label4:
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label5
							}
							goto Label6
							// line 2672: if (
							πF.SetLineno(2672)
						Label5:
							// line 2678: language = node.get('language', 'python')
							πF.SetLineno(2678)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = ßlanguage.ToObject()
							πTemp002[1] = ßpython.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µlanguage = πTemp003
							// line 2679: source = self._add_syntax_highlighting(source, language)
							πF.SetLineno(2679)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp002[0] = µsource
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							πTemp002[1] = µlanguage
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_add_syntax_highlighting, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µsource = πTemp003
							goto Label7
						Label6:
							// line 2681: source = escape_cdata(source)
							πF.SetLineno(2681)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							πTemp002[0] = µsource
							if πTemp001, πE = πg.ResolveGlobal(πF, ßescape_cdata); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µsource = πTemp003
							goto Label7
						Label7:
							// line 2682: lines = source.split('\n')
							πF.SetLineno(2682)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µsource, "source"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsource, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µlines = πTemp003
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp004
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µlines, πTemp003); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp004, ß.ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label8
							}
							goto Label9
							// line 2684: if lines[-1] == '':
							πF.SetLineno(2684)
						Label8:
							// line 2685: del lines[-1]
							πF.SetLineno(2685)
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.DelItem(πF, µlines, πTemp001); πE != nil {
								continue
							}
							goto Label9
						Label9:
							// line 2686: lines1 = ['<wrappertag1 xmlns:text="urn:oasis:names:tc:'
							πF.SetLineno(2686)
							πTemp002 = make([]*πg.Object, 1)
							πTemp002[0] = πg.NewStr("<wrappertag1 xmlns:text=\"urn:oasis:names:tc:opendocument:xmlns:text:1.0\">").ToObject()
							πTemp001 = πg.NewList(πTemp002...).ToObject()
							µlines1 = πTemp001
							// line 2688: my_lines = []
							πF.SetLineno(2688)
							πTemp002 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp002...).ToObject()
							µmy_lines = πTemp001
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µlines); πE != nil {
								continue
							}
							πF.PushCheckpoint(11)
							πTemp005 = false
						Label10:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label12
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µmy_line = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(10)
							// line 2690: my_line = self.fill_line(my_line)
							πF.SetLineno(2690)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmy_line, "my_line"); πE != nil {
								continue
							}
							πTemp002[0] = µmy_line
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfill_line, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µmy_line = πTemp004
							// line 2691: my_line = my_line.replace("&#10;", "\n")
							πF.SetLineno(2691)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewStr("&#10;").ToObject()
							πTemp002[1] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µmy_line, "my_line"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µmy_line, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µmy_line = πTemp004
							// line 2692: my_lines.append(my_line)
							πF.SetLineno(2692)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmy_line, "my_line"); πE != nil {
								continue
							}
							πTemp002[0] = µmy_line
							if πE = πg.CheckLocal(πF, µmy_lines, "my_lines"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µmy_lines, ßappend, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label11:
							if πE != nil || πR != nil {
								continue
							}
						Label12:
							// line 2693: my_lines_str = '<text:line-break/>'.join(my_lines)
							πF.SetLineno(2693)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmy_lines, "my_lines"); πE != nil {
								continue
							}
							πTemp002[0] = µmy_lines
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("<text:line-break/>").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µmy_lines_str = πTemp003
							// line 2694: my_lines_str2 = wrapper1 % (my_lines_str, )
							πF.SetLineno(2694)
							if πE = πg.CheckLocal(πF, µwrapper1, "wrapper1"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmy_lines_str, "my_lines_str"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(µmy_lines_str).ToObject()
							if πTemp001, πE = πg.Mod(πF, µwrapper1, πTemp003); πE != nil {
								continue
							}
							µmy_lines_str2 = πTemp001
							// line 2695: lines1.append(my_lines_str2)
							πF.SetLineno(2695)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmy_lines_str2, "my_lines_str2"); πE != nil {
								continue
							}
							πTemp002[0] = µmy_lines_str2
							if πE = πg.CheckLocal(πF, µlines1, "lines1"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µlines1, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2696: lines1.append('</wrappertag1>')
							πF.SetLineno(2696)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("</wrappertag1>").ToObject()
							if πE = πg.CheckLocal(πF, µlines1, "lines1"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µlines1, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2697: s1 = ''.join(lines1)
							πF.SetLineno(2697)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlines1, "lines1"); πE != nil {
								continue
							}
							πTemp002[0] = µlines1
							if πTemp001, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µs1 = πTemp003
							// line 2698: s1 = s1.encode("utf-8")
							πF.SetLineno(2698)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("utf-8").ToObject()
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µs1, ßencode, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µs1 = πTemp003
							// line 2699: el1 = etree.fromstring(s1)
							πF.SetLineno(2699)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πTemp002[0] = µs1
							if πTemp001, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßfromstring, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µel1 = πTemp001
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µel1); πE != nil {
								continue
							}
							πF.PushCheckpoint(14)
							πTemp005 = false
						Label13:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label15
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µchild = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(13)
							// line 2701: self.current_element.append(child)
							πF.SetLineno(2701)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µchild, "child"); πE != nil {
								continue
							}
							πTemp002[0] = µchild
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label14:
							if πE != nil || πR != nil {
								continue
							}
						Label15:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_literal_block.ToObject(), πTemp151); πE != nil {
						continue
					}
					// line 2703: def depart_literal_block(self, node):
					πF.SetLineno(2703)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp152 = πg.NewFunction(πg.NewCode("depart_literal_block", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2704: pass
							πF.SetLineno(2704)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_literal_block.ToObject(), πTemp152); πE != nil {
						continue
					}
					// line 2706: visit_doctest_block = visit_literal_block
					πF.SetLineno(2706)
					if πTemp153, πE = πg.ResolveClass(πF, πClass, nil, ßvisit_literal_block); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßvisit_doctest_block.ToObject(), πTemp153); πE != nil {
						continue
					}
					// line 2707: depart_doctest_block = depart_literal_block
					πF.SetLineno(2707)
					if πTemp153, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_literal_block); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_doctest_block.ToObject(), πTemp153); πE != nil {
						continue
					}
					// line 2710: def visit_math(self, node):
					πF.SetLineno(2710)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp153 = πg.NewFunction(πg.NewCode("visit_math", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2711: self.document.reporter.warning('"math" role not supported',
							πF.SetLineno(2711)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\"math\" role not supported").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"base_node", µnode},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2713: self.visit_literal(node)
							πF.SetLineno(2713)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßvisit_literal, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_math.ToObject(), πTemp153); πE != nil {
						continue
					}
					// line 2715: def depart_math(self, node):
					πF.SetLineno(2715)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp154 = πg.NewFunction(πg.NewCode("depart_math", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2716: self.depart_literal(node)
							πF.SetLineno(2716)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_literal, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_math.ToObject(), πTemp154); πE != nil {
						continue
					}
					// line 2718: def visit_math_block(self, node):
					πF.SetLineno(2718)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp155 = πg.NewFunction(πg.NewCode("visit_math_block", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2719: self.document.reporter.warning('"math" directive not supported',
							πF.SetLineno(2719)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\"math\" directive not supported").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp002 = πg.KWArgs{
								{"base_node", µnode},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2721: self.visit_literal_block(node)
							πF.SetLineno(2721)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßvisit_literal_block, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_math_block.ToObject(), πTemp155); πE != nil {
						continue
					}
					// line 2723: def depart_math_block(self, node):
					πF.SetLineno(2723)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp156 = πg.NewFunction(πg.NewCode("depart_math_block", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2724: self.depart_literal_block(node)
							πF.SetLineno(2724)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_literal_block, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_math_block.ToObject(), πTemp156); πE != nil {
						continue
					}
					// line 2726: def visit_meta(self, node):
					πF.SetLineno(2726)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp157 = πg.NewFunction(πg.NewCode("visit_meta", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µname *πg.Object = πg.UnboundLocal
						_ = µname
						var µcontent *πg.Object = πg.UnboundLocal
						_ = µcontent
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2727: name = node.attributes.get('name')
							πF.SetLineno(2727)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßname.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µname = πTemp002
							// line 2728: content = node.attributes.get('content')
							πF.SetLineno(2728)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßcontent.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µcontent = πTemp002
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(µname != πTemp005).ToObject()
							πTemp002 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µcontent, "content"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(µcontent != πTemp005).ToObject()
							πTemp002 = πTemp003
						Label1:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							goto Label3
							// line 2729: if name is not None and content is not None:
							πF.SetLineno(2729)
						Label2:
							// line 2730: self.meta_dict[name] = content
							πF.SetLineno(2730)
							if πE = πg.CheckLocal(πF, µcontent, "content"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µcontent); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßmeta_dict, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							πTemp005 = µname
							if πE = πg.SetItem(πF, πTemp003, πTemp005, πTemp002); πE != nil {
								continue
							}
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_meta.ToObject(), πTemp157); πE != nil {
						continue
					}
					// line 2732: def depart_meta(self, node):
					πF.SetLineno(2732)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp158 = πg.NewFunction(πg.NewCode("depart_meta", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2733: pass
							πF.SetLineno(2733)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_meta.ToObject(), πTemp158); πE != nil {
						continue
					}
					// line 2735: def visit_option_list(self, node):
					πF.SetLineno(2735)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp159 = πg.NewFunction(πg.NewCode("visit_option_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µtable_name *πg.Object = πg.UnboundLocal
						_ = µtable_name
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µel3 *πg.Object = πg.UnboundLocal
						_ = µel3
						var µel4 *πg.Object = πg.UnboundLocal
						_ = µel4
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2736: table_name = 'tableoption'
							πF.SetLineno(2736)
							µtable_name = ßtableoption.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßoptiontablestyles_generated, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2739: if not self.optiontablestyles_generated:
							πF.SetLineno(2739)
						Label1:
							// line 2740: self.optiontablestyles_generated = True
							πF.SetLineno(2740)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßoptiontablestyles_generated, πTemp002); πE != nil {
								continue
							}
							// line 2741: el = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(2741)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp004[1] = πg.NewStr("style:style").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							πTemp006[0] = µtable_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:family").ToObject(), ßtable.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 2744: el1 = SubElement(el, 'style:table-properties', attrib={
							πF.SetLineno(2744)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("style:table-properties").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:width").ToObject(), πg.NewStr("17.59cm").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("table:align").ToObject(), ßleft.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:shadow").ToObject(), ßnone.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							// line 2748: el = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(2748)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp004[1] = πg.NewStr("style:style").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple1(ßA.ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:family").ToObject(), πg.NewStr("table-column").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 2751: el1 = SubElement(el, 'style:table-column-properties', attrib={
							πF.SetLineno(2751)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("style:table-column-properties").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:column-width").ToObject(), πg.NewStr("4.999cm").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							// line 2753: el = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(2753)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp004[1] = πg.NewStr("style:style").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple1(ßB.ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:family").ToObject(), πg.NewStr("table-column").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 2756: el1 = SubElement(el, 'style:table-column-properties', attrib={
							πF.SetLineno(2756)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("style:table-column-properties").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:column-width").ToObject(), πg.NewStr("12.587cm").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							// line 2758: el = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(2758)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp004[1] = πg.NewStr("style:style").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c%%d").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple2(ßA.ToObject(), πg.NewInt(1).ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:family").ToObject(), πg.NewStr("table-cell").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 2762: el1 = SubElement(el, 'style:table-cell-properties', attrib={
							πF.SetLineno(2762)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("style:table-cell-properties").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:background-color").ToObject(), ßtransparent.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:padding").ToObject(), πg.NewStr("0.097cm").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-left").ToObject(), πg.NewStr("0.035cm solid #000000").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-right").ToObject(), ßnone.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-top").ToObject(), πg.NewStr("0.035cm solid #000000").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-bottom").ToObject(), πg.NewStr("0.035cm solid #000000").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							// line 2769: el2 = SubElement(el1, 'style:background-image', nsdict=SNSD)
							πF.SetLineno(2769)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp004[0] = µel1
							πTemp004[1] = πg.NewStr("style:background-image").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"nsdict", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel2 = πTemp002
							// line 2770: el = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(2770)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp004[1] = πg.NewStr("style:style").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c%%d").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple2(ßB.ToObject(), πg.NewInt(1).ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:family").ToObject(), πg.NewStr("table-cell").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 2774: el1 = SubElement(el, 'style:table-cell-properties', attrib={
							πF.SetLineno(2774)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("style:table-cell-properties").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:padding").ToObject(), πg.NewStr("0.097cm").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border").ToObject(), πg.NewStr("0.035cm solid #000000").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							// line 2777: el = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(2777)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp004[1] = πg.NewStr("style:style").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c%%d").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple2(ßA.ToObject(), πg.NewInt(2).ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:family").ToObject(), πg.NewStr("table-cell").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 2781: el1 = SubElement(el, 'style:table-cell-properties', attrib={
							πF.SetLineno(2781)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("style:table-cell-properties").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:padding").ToObject(), πg.NewStr("0.097cm").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-left").ToObject(), πg.NewStr("0.035cm solid #000000").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-right").ToObject(), ßnone.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-top").ToObject(), ßnone.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-bottom").ToObject(), πg.NewStr("0.035cm solid #000000").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							// line 2787: el = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(2787)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							πTemp004[1] = πg.NewStr("style:style").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c%%d").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple2(ßB.ToObject(), πg.NewInt(2).ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("style:family").ToObject(), πg.NewStr("table-cell").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 2791: el1 = SubElement(el, 'style:table-cell-properties', attrib={
							πF.SetLineno(2791)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("style:table-cell-properties").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:padding").ToObject(), πg.NewStr("0.097cm").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-left").ToObject(), πg.NewStr("0.035cm solid #000000").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-right").ToObject(), πg.NewStr("0.035cm solid #000000").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-top").ToObject(), ßnone.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("fo:border-bottom").ToObject(), πg.NewStr("0.035cm solid #000000").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							goto Label2
						Label2:
							// line 2799: el = self.append_child('table:table', attrib={
							πF.SetLineno(2799)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("table:table").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							πTemp006[0] = µtable_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("table:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							πTemp006[0] = µtable_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("table:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 2803: el1 = SubElement(el, 'table:table-column', attrib={
							πF.SetLineno(2803)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("table:table-column").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple1(ßA.ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("table:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							// line 2806: el1 = SubElement(el, 'table:table-column', attrib={
							πF.SetLineno(2806)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("table:table-column").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple1(ßB.ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("table:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							// line 2809: el1 = SubElement(el, 'table:table-header-rows')
							πF.SetLineno(2809)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							πTemp004[1] = πg.NewStr("table:table-header-rows").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel1 = πTemp002
							// line 2810: el2 = SubElement(el1, 'table:table-row')
							πF.SetLineno(2810)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp004[0] = µel1
							πTemp004[1] = πg.NewStr("table:table-row").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel2 = πTemp002
							// line 2811: el3 = SubElement(el2, 'table:table-cell', attrib={
							πF.SetLineno(2811)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp004[0] = µel2
							πTemp004[1] = πg.NewStr("table:table-cell").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c%%d").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple2(ßA.ToObject(), πg.NewInt(1).ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("table:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("office:value-type").ToObject(), ßstring.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel3 = πTemp002
							// line 2815: el4 = SubElement(el3, 'text:p', attrib={
							πF.SetLineno(2815)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							πTemp004[0] = µel3
							πTemp004[1] = πg.NewStr("text:p").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("text:style-name").ToObject(), ßTable_20_Heading.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel4 = πTemp002
							// line 2817: el4.text = 'Option'
							πF.SetLineno(2817)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, ßOption.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel4, "el4"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel4, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 2818: el3 = SubElement(el2, 'table:table-cell', attrib={
							πF.SetLineno(2818)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp004[0] = µel2
							πTemp004[1] = πg.NewStr("table:table-cell").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c%%d").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							πTemp001 = πg.NewTuple2(ßB.ToObject(), πg.NewInt(1).ToObject()).ToObject()
							πTemp006[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("table:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("office:value-type").ToObject(), ßstring.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel3 = πTemp002
							// line 2822: el4 = SubElement(el3, 'text:p', attrib={
							πF.SetLineno(2822)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							πTemp004[0] = µel3
							πTemp004[1] = πg.NewStr("text:p").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πTemp005.SetItem(πF, πg.NewStr("text:style-name").ToObject(), ßTable_20_Heading.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel4 = πTemp002
							// line 2824: el4.text = 'Description'
							πF.SetLineno(2824)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, ßDescription.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel4, "el4"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel4, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 2825: self.set_current_element(el)
							πF.SetLineno(2825)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_list.ToObject(), πTemp159); πE != nil {
						continue
					}
					// line 2827: def depart_option_list(self, node):
					πF.SetLineno(2827)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp160 = πg.NewFunction(πg.NewCode("depart_option_list", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2828: self.set_to_parent()
							πF.SetLineno(2828)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_list.ToObject(), πTemp160); πE != nil {
						continue
					}
					// line 2830: def visit_option_list_item(self, node):
					πF.SetLineno(2830)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp161 = πg.NewFunction(πg.NewCode("visit_option_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2831: el = self.append_child('table:table-row')
							πF.SetLineno(2831)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("table:table-row").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 2832: self.set_current_element(el)
							πF.SetLineno(2832)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_list_item.ToObject(), πTemp161); πE != nil {
						continue
					}
					// line 2834: def depart_option_list_item(self, node):
					πF.SetLineno(2834)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp162 = πg.NewFunction(πg.NewCode("depart_option_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2835: self.set_to_parent()
							πF.SetLineno(2835)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_list_item.ToObject(), πTemp162); πE != nil {
						continue
					}
					// line 2837: def visit_option_group(self, node):
					πF.SetLineno(2837)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp163 = πg.NewFunction(πg.NewCode("visit_option_group", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2838: el = self.append_child('table:table-cell', attrib={
							πF.SetLineno(2838)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("table:table-cell").ToObject()
							πTemp002 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtable_count, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("Table%d.A2").ToObject(), πTemp004); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, πg.NewStr("table:style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, πg.NewStr("office:value-type").ToObject(), ßstring.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp002.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp004
							// line 2842: self.set_current_element(el)
							πF.SetLineno(2842)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_group.ToObject(), πTemp163); πE != nil {
						continue
					}
					// line 2844: def depart_option_group(self, node):
					πF.SetLineno(2844)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp164 = πg.NewFunction(πg.NewCode("depart_option_group", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2845: self.set_to_parent()
							πF.SetLineno(2845)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_group.ToObject(), πTemp164); πE != nil {
						continue
					}
					// line 2847: def visit_option(self, node):
					πF.SetLineno(2847)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp165 = πg.NewFunction(πg.NewCode("visit_option", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2848: el = self.append_child('text:p', attrib={
							πF.SetLineno(2848)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:p").ToObject()
							πTemp002 = πg.NewDict()
							if πE = πTemp002.SetItem(πF, πg.NewStr("text:style-name").ToObject(), ßTable_20_Contents.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp002.ToObject()
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp005
							// line 2850: el.text = node.astext()
							πF.SetLineno(2850)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp005); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel, ßtext, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option.ToObject(), πTemp165); πE != nil {
						continue
					}
					// line 2852: def depart_option(self, node):
					πF.SetLineno(2852)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp166 = πg.NewFunction(πg.NewCode("depart_option", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2853: pass
							πF.SetLineno(2853)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option.ToObject(), πTemp166); πE != nil {
						continue
					}
					// line 2855: def visit_option_string(self, node):
					πF.SetLineno(2855)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp167 = πg.NewFunction(πg.NewCode("visit_option_string", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2856: pass
							πF.SetLineno(2856)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_string.ToObject(), πTemp167); πE != nil {
						continue
					}
					// line 2858: def depart_option_string(self, node):
					πF.SetLineno(2858)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp168 = πg.NewFunction(πg.NewCode("depart_option_string", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2859: pass
							πF.SetLineno(2859)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_string.ToObject(), πTemp168); πE != nil {
						continue
					}
					// line 2861: def visit_option_argument(self, node):
					πF.SetLineno(2861)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp169 = πg.NewFunction(πg.NewCode("visit_option_argument", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2862: pass
							πF.SetLineno(2862)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_argument.ToObject(), πTemp169); πE != nil {
						continue
					}
					// line 2864: def depart_option_argument(self, node):
					πF.SetLineno(2864)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp170 = πg.NewFunction(πg.NewCode("depart_option_argument", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2865: pass
							πF.SetLineno(2865)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_argument.ToObject(), πTemp170); πE != nil {
						continue
					}
					// line 2867: def visit_description(self, node):
					πF.SetLineno(2867)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp171 = πg.NewFunction(πg.NewCode("visit_description", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 πg.KWArgs
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2868: el = self.append_child('table:table-cell', attrib={
							πF.SetLineno(2868)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("table:table-cell").ToObject()
							πTemp002 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßtable_count, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("Table%d.B2").ToObject(), πTemp004); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, πg.NewStr("table:style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πTemp002.SetItem(πF, πg.NewStr("office:value-type").ToObject(), ßstring.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp002.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp004
							// line 2872: el1 = SubElement(el, 'text:p', attrib={
							πF.SetLineno(2872)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							πTemp001[1] = πg.NewStr("text:p").ToObject()
							πTemp002 = πg.NewDict()
							if πE = πTemp002.SetItem(πF, πg.NewStr("text:style-name").ToObject(), ßTable_20_Contents.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp002.ToObject()
							πTemp005 = πg.KWArgs{
								{"attrib", πTemp003},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp005); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp004
							// line 2874: el1.text = node.astext()
							πF.SetLineno(2874)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp003); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßSkipChildren, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2875: raise nodes.SkipChildren()
							πF.SetLineno(2875)
							πE = πF.Raise(πTemp003, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_description.ToObject(), πTemp171); πE != nil {
						continue
					}
					// line 2877: def depart_description(self, node):
					πF.SetLineno(2877)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp172 = πg.NewFunction(πg.NewCode("depart_description", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2878: pass
							πF.SetLineno(2878)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_description.ToObject(), πTemp172); πE != nil {
						continue
					}
					// line 2880: def visit_paragraph(self, node):
					πF.SetLineno(2880)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp173 = πg.NewFunction(πg.NewCode("visit_paragraph", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µstyle_name *πg.Object = πg.UnboundLocal
						_ = µstyle_name
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2881: self.in_paragraph = True
							πF.SetLineno(2881)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_paragraph, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_header, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_footer, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label2
							}
							goto Label3
							// line 2882: if self.in_header:
							πF.SetLineno(2882)
						Label1:
							// line 2883: el = self.append_p('header')
							πF.SetLineno(2883)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßheader.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							goto Label4
							// line 2884: elif self.in_footer:
							πF.SetLineno(2884)
						Label2:
							// line 2885: el = self.append_p('footer')
							πF.SetLineno(2885)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßfooter.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							goto Label4
						Label3:
							// line 2887: style_name = self.paragraph_style_stack[-1]
							πF.SetLineno(2887)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							µstyle_name = πTemp002
							// line 2888: el = self.append_child(
							πF.SetLineno(2888)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("text:p").ToObject()
							πTemp006 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:style-name").ToObject(), µstyle_name); πE != nil {
								continue
							}
							πTemp001 = πTemp006.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 2891: self.append_pending_ids(el)
							πF.SetLineno(2891)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_pending_ids, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label4
						Label4:
							// line 2892: self.set_current_element(el)
							πF.SetLineno(2892)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_paragraph.ToObject(), πTemp173); πE != nil {
						continue
					}
					// line 2894: def depart_paragraph(self, node):
					πF.SetLineno(2894)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp174 = πg.NewFunction(πg.NewCode("depart_paragraph", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2895: self.in_paragraph = False
							πF.SetLineno(2895)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_paragraph, πTemp002); πE != nil {
								continue
							}
							// line 2896: self.set_to_parent()
							πF.SetLineno(2896)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_header, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_footer, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label2
							}
							goto Label3
							// line 2897: if self.in_header:
							πF.SetLineno(2897)
						Label1:
							// line 2898: self.header_content.append( self.current_element[-1] )
							πF.SetLineno(2898)
							πTemp004 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßheader_content, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2899: self.current_element.remove( self.current_element[-1] )
							πF.SetLineno(2899)
							πTemp004 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßremove, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label3
							// line 2900: elif self.in_footer:
							πF.SetLineno(2900)
						Label2:
							// line 2901: self.footer_content.append( self.current_element[-1] )
							πF.SetLineno(2901)
							πTemp004 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfooter_content, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2902: self.current_element.remove( self.current_element[-1] )
							πF.SetLineno(2902)
							πTemp004 = πF.MakeArgs(1)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßremove, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_paragraph.ToObject(), πTemp174); πE != nil {
						continue
					}
					// line 2904: def visit_problematic(self, node):
					πF.SetLineno(2904)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp175 = πg.NewFunction(πg.NewCode("visit_problematic", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2905: pass
							πF.SetLineno(2905)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_problematic.ToObject(), πTemp175); πE != nil {
						continue
					}
					// line 2907: def depart_problematic(self, node):
					πF.SetLineno(2907)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp176 = πg.NewFunction(πg.NewCode("depart_problematic", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2908: pass
							πF.SetLineno(2908)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_problematic.ToObject(), πTemp176); πE != nil {
						continue
					}
					// line 2910: def visit_raw(self, node):
					πF.SetLineno(2910)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp177 = πg.NewFunction(πg.NewCode("visit_raw", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µformats *πg.Object = πg.UnboundLocal
						_ = µformats
						var µformatlist *πg.Object = πg.UnboundLocal
						_ = µformatlist
						var µrawstr *πg.Object = πg.UnboundLocal
						_ = µrawstr
						var µattrstr *πg.Object = πg.UnboundLocal
						_ = µattrstr
						var µcontentstr *πg.Object = πg.UnboundLocal
						_ = µcontentstr
						var µcontent *πg.Object = πg.UnboundLocal
						_ = µcontent
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []πg.Param
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, ßformat.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2911: if 'format' in node.attributes:
							πF.SetLineno(2911)
						Label1:
							// line 2912: formats = node.attributes['format']
							πF.SetLineno(2912)
							πTemp001 = ßformat.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µformats = πTemp002
							// line 2913: formatlist = formats.split()
							πF.SetLineno(2913)
							if πE = πg.CheckLocal(πF, µformats, "formats"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µformats, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µformatlist = πTemp002
							if πE = πg.CheckLocal(πF, µformatlist, "formatlist"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, µformatlist, ßodt.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 2914: if 'odt' in formatlist:
							πF.SetLineno(2914)
						Label3:
							// line 2915: rawstr = node.astext()
							πF.SetLineno(2915)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µrawstr = πTemp002
							// line 2916: attrstr = ' '.join([
							πF.SetLineno(2916)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µk *πg.Object = πg.UnboundLocal
								_ = µk
								var µv *πg.Object = πg.UnboundLocal
								_ = µv
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []*πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πTemp007 *πg.Object
								_ = πTemp007
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										πTemp002 = πF.MakeArgs(1)
										if πTemp003, πE = πg.ResolveGlobal(πF, ßCONTENT_NAMESPACE_ATTRIB); πE != nil {
											continue
										}
										if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßitems, nil); πE != nil {
											continue
										}
										if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
											continue
										}
										πTemp002[0] = πTemp003
										if πTemp003, πE = πg.ResolveGlobal(πF, ßlist); πE != nil {
											continue
										}
										if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp002)
										if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp005 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp005 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp006 = !isStop
										} else {
											πTemp006 = true
											if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp007}}}, πTemp003); πE != nil {
												continue
											}
											µk = πTemp004
											µv = πTemp007
										}
										if πE != nil || !πTemp006 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 2916: attrstr = ' '.join([
										πF.SetLineno(2916)
										if πE = πg.CheckLocal(πF, µk, "k"); πE != nil {
											continue
										}
										if πE = πg.CheckLocal(πF, µv, "v"); πE != nil {
											continue
										}
										πTemp004 = πg.NewTuple2(µk, µv).ToObject()
										if πTemp003, πE = πg.Mod(πF, πg.NewStr("%s=\"%s\"").ToObject(), πTemp004); πE != nil {
											continue
										}
										πF.PushCheckpoint(4)
										return πTemp003, nil
									Label4:
										πTemp004 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ListType.Call(πF, πg.Args{πTemp004}, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr(" ").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µattrstr = πTemp004
							// line 2919: contentstr = '<stuff %s>%s</stuff>' % (attrstr, rawstr, )
							πF.SetLineno(2919)
							if πE = πg.CheckLocal(πF, µattrstr, "attrstr"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µrawstr, "rawstr"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple2(µattrstr, µrawstr).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("<stuff %s>%s</stuff>").ToObject(), πTemp004); πE != nil {
								continue
							}
							µcontentstr = πTemp001
							// line 2920: contentstr = contentstr.encode("utf-8")
							πF.SetLineno(2920)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("utf-8").ToObject()
							if πE = πg.CheckLocal(πF, µcontentstr, "contentstr"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µcontentstr, ßencode, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µcontentstr = πTemp004
							// line 2921: content = etree.fromstring(contentstr)
							πF.SetLineno(2921)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcontentstr, "contentstr"); πE != nil {
								continue
							}
							πTemp005[0] = µcontentstr
							if πTemp001, πE = πg.ResolveGlobal(πF, ßetree); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßfromstring, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µcontent = πTemp001
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcontent, "content"); πE != nil {
								continue
							}
							πTemp005[0] = µcontent
							if πTemp004, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp001, πE = πg.GT(πF, πTemp007, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							goto Label6
							// line 2922: if len(content) > 0:
							πF.SetLineno(2922)
						Label5:
							// line 2923: el1 = content[0]
							πF.SetLineno(2923)
							πTemp001 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µcontent, "content"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µcontent, πTemp001); πE != nil {
								continue
							}
							µel1 = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_header, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label7
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_footer, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label8
							}
							goto Label9
							// line 2924: if self.in_header:
							πF.SetLineno(2924)
						Label7:
							// line 2925: pass
							πF.SetLineno(2925)
							goto Label10
							// line 2926: elif self.in_footer:
							πF.SetLineno(2926)
						Label8:
							// line 2927: pass
							πF.SetLineno(2927)
							goto Label10
						Label9:
							// line 2929: self.current_element.append(el1)
							πF.SetLineno(2929)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp005[0] = µel1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label10
						Label10:
							goto Label6
						Label6:
							goto Label4
						Label4:
							goto Label2
						Label2:
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßSkipChildren, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2930: raise nodes.SkipChildren()
							πF.SetLineno(2930)
							πE = πF.Raise(πTemp001, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_raw.ToObject(), πTemp177); πE != nil {
						continue
					}
					// line 2932: def depart_raw(self, node):
					πF.SetLineno(2932)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp178 = πg.NewFunction(πg.NewCode("depart_raw", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_header, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßin_footer, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							goto Label3
							// line 2933: if self.in_header:
							πF.SetLineno(2933)
						Label1:
							// line 2934: pass
							πF.SetLineno(2934)
							goto Label4
							// line 2935: elif self.in_footer:
							πF.SetLineno(2935)
						Label2:
							// line 2936: pass
							πF.SetLineno(2936)
							goto Label4
						Label3:
							// line 2938: pass
							πF.SetLineno(2938)
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_raw.ToObject(), πTemp178); πE != nil {
						continue
					}
					// line 2940: def visit_reference(self, node):
					πF.SetLineno(2940)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp179 = πg.NewFunction(πg.NewCode("visit_reference", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µhref *πg.Object = πg.UnboundLocal
						_ = µhref
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Dict
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_links, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2942: if self.settings.create_links:
							πF.SetLineno(2942)
						Label1:
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, µnode, ßrefuri.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, µnode, ßrefid.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label4
							}
							goto Label5
							// line 2943: if 'refuri' in node:
							πF.SetLineno(2943)
						Label3:
							// line 2944: href = node['refuri']
							πF.SetLineno(2944)
							πTemp001 = ßrefuri.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							µhref = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßcloak_email_addresses, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp004
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp003 {
								goto Label7
							}
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("mailto:").ToObject()
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µhref, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp004
						Label7:
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label8
							}
							goto Label9
							// line 2945: if (
							πF.SetLineno(2945)
						Label8:
							// line 2948: href = self.cloak_mailto(href)
							πF.SetLineno(2948)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							πTemp005[0] = µhref
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcloak_mailto, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µhref = πTemp002
							goto Label9
						Label9:
							// line 2949: el = self.append_child('text:a', attrib={
							πF.SetLineno(2949)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("text:a").ToObject()
							πTemp006 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), µhref); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("xlink:href").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("xlink:type").ToObject(), ßsimple.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp006.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µel = πTemp002
							// line 2953: self.set_current_element(el)
							πF.SetLineno(2953)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp005[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label6
							// line 2954: elif 'refid' in node:
							πF.SetLineno(2954)
						Label4:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_links, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label10
							}
							goto Label11
							// line 2955: if self.settings.create_links:
							πF.SetLineno(2955)
						Label10:
							// line 2956: href = node['refid']
							πF.SetLineno(2956)
							πTemp001 = ßrefid.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							µhref = πTemp002
							// line 2957: el = self.append_child('text:reference-ref', attrib={
							πF.SetLineno(2957)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("text:reference-ref").ToObject()
							πTemp006 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), µhref); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:ref-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πTemp006.SetItem(πF, πg.NewStr("text:reference-format").ToObject(), ßtext.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp006.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µel = πTemp002
							goto Label11
						Label11:
							goto Label6
						Label5:
							// line 2962: self.document.reporter.warning(
							πF.SetLineno(2962)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("References must have \"refuri\" or \"refid\" attribute.").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label6
						Label6:
							goto Label2
						Label2:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßin_table_of_contents, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp003 {
								goto Label12
							}
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßchildren, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp004.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp002, πE = πg.GE(πF, πTemp008, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp003 {
								goto Label12
							}
							πTemp005 = πF.MakeArgs(2)
							πTemp002 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µnode, ßchildren, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp008, πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp004
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp004, ßgenerated, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp004
						Label12:
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label13
							}
							goto Label14
							// line 2964: if (
							πF.SetLineno(2964)
						Label13:
							// line 2968: node.remove(node.children[0])
							πF.SetLineno(2968)
							πTemp005 = πF.MakeArgs(1)
							πTemp001 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßchildren, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßremove, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label14
						Label14:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_reference.ToObject(), πTemp179); πE != nil {
						continue
					}
					// line 2970: def depart_reference(self, node):
					πF.SetLineno(2970)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp180 = πg.NewFunction(πg.NewCode("depart_reference", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_links, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2971: if self.settings.create_links:
							πF.SetLineno(2971)
						Label1:
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, µnode, ßrefuri.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 2972: if 'refuri' in node:
							πF.SetLineno(2972)
						Label3:
							// line 2973: self.set_to_parent()
							πF.SetLineno(2973)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label4
						Label4:
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_reference.ToObject(), πTemp180); πE != nil {
						continue
					}
					// line 2975: def visit_rubric(self, node):
					πF.SetLineno(2975)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp181 = πg.NewFunction(πg.NewCode("visit_rubric", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µstyle_name *πg.Object = πg.UnboundLocal
						_ = µstyle_name
						var µclasses *πg.Object = πg.UnboundLocal
						_ = µclasses
						var µclass1 *πg.Object = πg.UnboundLocal
						_ = µclass1
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var µtext *πg.Object = πg.UnboundLocal
						_ = µtext
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2976: style_name = self.rststyle('rubric')
							πF.SetLineno(2976)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßrubric.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µstyle_name = πTemp003
							// line 2977: classes = node.get('classes')
							πF.SetLineno(2977)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µclasses = πTemp003
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, µclasses); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2978: if classes:
							πF.SetLineno(2978)
						Label1:
							// line 2979: class1 = classes[0]
							πF.SetLineno(2979)
							πTemp002 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µclasses, πTemp002); πE != nil {
								continue
							}
							µclass1 = πTemp003
							if πE = πg.CheckLocal(πF, µclass1, "class1"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, µclass1); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label3
							}
							goto Label4
							// line 2980: if class1:
							πF.SetLineno(2980)
						Label3:
							// line 2981: style_name = class1
							πF.SetLineno(2981)
							if πE = πg.CheckLocal(πF, µclass1, "class1"); πE != nil {
								continue
							}
							µstyle_name = µclass1
							goto Label4
						Label4:
							goto Label2
						Label2:
							// line 2982: el = SubElement(self.current_element, 'text:h', attrib={
							πF.SetLineno(2982)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("text:h").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µstyle_name, "style_name"); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("text:style-name").ToObject(), µstyle_name); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 2987: text = node.astext()
							πF.SetLineno(2987)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtext = πTemp003
							// line 2988: el.text = self.encode(text)
							πF.SetLineno(2988)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πTemp001[0] = µtext
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel, ßtext, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_rubric.ToObject(), πTemp181); πE != nil {
						continue
					}
					// line 2990: def depart_rubric(self, node):
					πF.SetLineno(2990)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp182 = πg.NewFunction(πg.NewCode("depart_rubric", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2991: pass
							πF.SetLineno(2991)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_rubric.ToObject(), πTemp182); πE != nil {
						continue
					}
					// line 2993: def visit_section(self, node, move_ids=1):
					πF.SetLineno(2993)
					πTemp003 = make([]πg.Param, 3)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "move_ids", Def: πg.NewInt(1).ToObject()}
					πTemp183 = πg.NewFunction(πg.NewCode("visit_section", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µmove_ids *πg.Object = πArgs[2]
						_ = µmove_ids
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2994: self.section_level += 1
							πF.SetLineno(2994)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_level, πTemp002); πE != nil {
								continue
							}
							// line 2995: self.section_count += 1
							πF.SetLineno(2995)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsection_count, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_count, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_sections, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2996: if self.settings.create_sections:
							πF.SetLineno(2996)
						Label1:
							// line 2997: el = self.append_child('text:section', attrib={
							πF.SetLineno(2997)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("text:section").ToObject()
							πTemp005 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsection_count, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Section%d").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("text:name").ToObject(), πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Sect%d").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp005.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp005.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µel = πTemp002
							// line 3001: self.set_current_element(el)
							πF.SetLineno(3001)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp004[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_section.ToObject(), πTemp183); πE != nil {
						continue
					}
					// line 3003: def depart_section(self, node):
					πF.SetLineno(3003)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp184 = πg.NewFunction(πg.NewCode("depart_section", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3004: self.section_level -= 1
							πF.SetLineno(3004)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_level, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcreate_sections, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 3005: if self.settings.create_sections:
							πF.SetLineno(3005)
						Label1:
							// line 3006: self.set_to_parent()
							πF.SetLineno(3006)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_section.ToObject(), πTemp184); πE != nil {
						continue
					}
					// line 3008: def visit_strong(self, node):
					πF.SetLineno(3008)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp185 = πg.NewFunction(πg.NewCode("visit_strong", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Dict
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3009: el = SubElement(self.current_element, 'text:span',
							πF.SetLineno(3009)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("text:span").ToObject()
							πTemp003 = πg.NewDict()
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßstrong.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πE = πTemp003.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp002 = πTemp003.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp005
							// line 3011: self.set_current_element(el)
							πF.SetLineno(3011)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_strong.ToObject(), πTemp185); πE != nil {
						continue
					}
					// line 3013: def depart_strong(self, node):
					πF.SetLineno(3013)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp186 = πg.NewFunction(πg.NewCode("depart_strong", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3014: self.set_to_parent()
							πF.SetLineno(3014)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_strong.ToObject(), πTemp186); πE != nil {
						continue
					}
					// line 3016: def visit_substitution_definition(self, node):
					πF.SetLineno(3016)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp187 = πg.NewFunction(πg.NewCode("visit_substitution_definition", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßSkipChildren, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 3017: raise nodes.SkipChildren()
							πF.SetLineno(3017)
							πE = πF.Raise(πTemp001, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_substitution_definition.ToObject(), πTemp187); πE != nil {
						continue
					}
					// line 3019: def depart_substitution_definition(self, node):
					πF.SetLineno(3019)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp188 = πg.NewFunction(πg.NewCode("depart_substitution_definition", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3020: pass
							πF.SetLineno(3020)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_substitution_definition.ToObject(), πTemp188); πE != nil {
						continue
					}
					// line 3022: def visit_system_message(self, node):
					πF.SetLineno(3022)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp189 = πg.NewFunction(πg.NewCode("visit_system_message", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3023: pass
							πF.SetLineno(3023)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_system_message.ToObject(), πTemp189); πE != nil {
						continue
					}
					// line 3025: def depart_system_message(self, node):
					πF.SetLineno(3025)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp190 = πg.NewFunction(πg.NewCode("depart_system_message", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3026: pass
							πF.SetLineno(3026)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_system_message.ToObject(), πTemp190); πE != nil {
						continue
					}
					// line 3028: def get_table_style(self, node):
					πF.SetLineno(3028)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp191 = πg.NewFunction(πg.NewCode("get_table_style", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µtable_style *πg.Object = πg.UnboundLocal
						_ = µtable_style
						var µtable_name *πg.Object = πg.UnboundLocal
						_ = µtable_name
						var µstr_classes *πg.Object = πg.UnboundLocal
						_ = µstr_classes
						var µstr_class *πg.Object = πg.UnboundLocal
						_ = µstr_class
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 3:
								goto Label3
							case 4:
								goto Label4
							default:
								panic("unexpected function state")
							}
							// line 3029: table_style = None
							πF.SetLineno(3029)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µtable_style = πTemp001
							// line 3030: table_name = None
							πF.SetLineno(3030)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µtable_name = πTemp001
							// line 3031: str_classes = node.get('classes')
							πF.SetLineno(3031)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µstr_classes = πTemp003
							if πE = πg.CheckLocal(πF, µstr_classes, "str_classes"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µstr_classes != πTemp003).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 3032: if str_classes is not None:
							πF.SetLineno(3032)
						Label1:
							if πE = πg.CheckLocal(πF, µstr_classes, "str_classes"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µstr_classes); πE != nil {
								continue
							}
							πF.PushCheckpoint(4)
							πTemp004 = false
						Label3:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label5
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µstr_class = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(3)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTABLESTYLEPREFIX); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µstr_class, "str_class"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µstr_class, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp005, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label6
							}
							goto Label7
							// line 3034: if str_class.startswith(TABLESTYLEPREFIX):
							πF.SetLineno(3034)
						Label6:
							// line 3035: table_name = str_class
							πF.SetLineno(3035)
							if πE = πg.CheckLocal(πF, µstr_class, "str_class"); πE != nil {
								continue
							}
							µtable_name = µstr_class
							// line 3036: break
							πF.SetLineno(3036)
							πTemp004 = true
							continue
							goto Label7
						Label7:
							continue
						Label4:
							if πE != nil || πR != nil {
								continue
							}
						Label5:
							goto Label2
						Label2:
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µtable_name != πTemp003).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label8
							}
							goto Label9
							// line 3037: if table_name is not None:
							πF.SetLineno(3037)
						Label8:
							// line 3038: table_style = self.table_styles.get(table_name)
							πF.SetLineno(3038)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							πTemp002[0] = µtable_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtable_styles, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßget, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µtable_style = πTemp001
							if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µtable_style == πTemp003).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label11
							}
							goto Label12
							// line 3039: if table_style is None:
							πF.SetLineno(3039)
						Label11:
							// line 3042: self.document.reporter.warning(
							πF.SetLineno(3042)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(µtable_name).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Can't find table style \"%s\".  Using default.").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 3045: table_name = TABLENAMEDEFAULT
							πF.SetLineno(3045)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTABLENAMEDEFAULT); πE != nil {
								continue
							}
							µtable_name = πTemp001
							// line 3046: table_style = self.table_styles.get(table_name)
							πF.SetLineno(3046)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							πTemp002[0] = µtable_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtable_styles, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßget, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µtable_style = πTemp001
							if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µtable_style == πTemp003).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label13
							}
							goto Label14
							// line 3047: if table_style is None:
							πF.SetLineno(3047)
						Label13:
							// line 3050: self.document.reporter.warning(
							πF.SetLineno(3050)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(µtable_name).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Can't find default table style \"%s\".  Using built-in default.").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 3054: table_style = BUILTIN_DEFAULT_TABLE_STYLE
							πF.SetLineno(3054)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßBUILTIN_DEFAULT_TABLE_STYLE); πE != nil {
								continue
							}
							µtable_style = πTemp001
							goto Label14
						Label14:
							goto Label12
						Label12:
							goto Label10
						Label9:
							// line 3056: table_name = TABLENAMEDEFAULT
							πF.SetLineno(3056)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTABLENAMEDEFAULT); πE != nil {
								continue
							}
							µtable_name = πTemp001
							// line 3057: table_style = self.table_styles.get(table_name)
							πF.SetLineno(3057)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							πTemp002[0] = µtable_name
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtable_styles, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßget, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µtable_style = πTemp001
							if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µtable_style == πTemp003).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label15
							}
							goto Label16
							// line 3058: if table_style is None:
							πF.SetLineno(3058)
						Label15:
							// line 3061: self.document.reporter.warning(
							πF.SetLineno(3061)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(µtable_name).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("Can't find default table style \"%s\".  Using built-in default.").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 3065: table_style = BUILTIN_DEFAULT_TABLE_STYLE
							πF.SetLineno(3065)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßBUILTIN_DEFAULT_TABLE_STYLE); πE != nil {
								continue
							}
							µtable_style = πTemp001
							goto Label16
						Label16:
							goto Label10
						Label10:
							// line 3066: return table_style
							πF.SetLineno(3066)
							if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
								continue
							}
							πR = µtable_style
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_table_style.ToObject(), πTemp191); πE != nil {
						continue
					}
					// line 3068: def visit_table(self, node):
					πF.SetLineno(3068)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp192 = πg.NewFunction(πg.NewCode("visit_table", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µtable_style *πg.Object = πg.UnboundLocal
						_ = µtable_style
						var µtable_name *πg.Object = πg.UnboundLocal
						_ = µtable_name
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µthickness *πg.Object = πg.UnboundLocal
						_ = µthickness
						var µline_style1 *πg.Object = πg.UnboundLocal
						_ = µline_style1
						var µtitle *πg.Object = πg.UnboundLocal
						_ = µtitle
						var µchild *πg.Object = πg.UnboundLocal
						_ = µchild
						var µel4 *πg.Object = πg.UnboundLocal
						_ = µel4
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 8:
								goto Label8
							case 7:
								goto Label7
							default:
								panic("unexpected function state")
							}
							// line 3069: self.table_count += 1
							πF.SetLineno(3069)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtable_count, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtable_count, πTemp002); πE != nil {
								continue
							}
							// line 3070: table_style = self.get_table_style(node)
							πF.SetLineno(3070)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_table_style, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µtable_style = πTemp002
							// line 3071: table_name = '%s%%d' % TABLESTYLEPREFIX
							πF.SetLineno(3071)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTABLESTYLEPREFIX); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s%%d").ToObject(), πTemp002); πE != nil {
								continue
							}
							µtable_name = πTemp001
							// line 3072: el1 = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(3072)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewStr("style:style").ToObject()
							πTemp004 = πg.NewDict()
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtable_count, nil); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple1(πTemp002).ToObject()
							πTemp005[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:family").ToObject(), ßtable.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp002
							if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtable_style, ßbackgroundcolor, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002 == πTemp007).ToObject()
							if πTemp008, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label1
							}
							goto Label2
							// line 3077: if table_style.backgroundcolor is None:
							πF.SetLineno(3077)
						Label1:
							// line 3078: SubElement(el1, 'style:table-properties', attrib={
							πF.SetLineno(3078)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp003[0] = µel1
							πTemp003[1] = πg.NewStr("style:table-properties").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("table:align").ToObject(), ßleft.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:margin-top").ToObject(), ß0in.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:margin-bottom").ToObject(), πg.NewStr("0.10in").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label3
						Label2:
							// line 3086: SubElement(el1, 'style:table-properties', attrib={
							πF.SetLineno(3086)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp003[0] = µel1
							πTemp003[1] = πg.NewStr("style:table-properties").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("table:align").ToObject(), ßmargins.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:margin-top").ToObject(), ß0in.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:margin-bottom").ToObject(), πg.NewStr("0.10in").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtable_style, ßbackgroundcolor, nil); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:background-color").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label3
						Label3:
							// line 3095: el2 = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(3095)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewStr("style:style").ToObject()
							πTemp004 = πg.NewDict()
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s.%%c%%d").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtable_count, nil); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple3(πTemp002, ßA.ToObject(), πg.NewInt(1).ToObject()).ToObject()
							πTemp005[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("style:family").ToObject(), πg.NewStr("table-cell").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel2 = πTemp002
							// line 3100: thickness = self.settings.table_border_thickness
							πF.SetLineno(3100)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtable_border_thickness, nil); πE != nil {
								continue
							}
							µthickness = πTemp002
							if πE = πg.CheckLocal(πF, µthickness, "thickness"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µthickness == πTemp002).ToObject()
							if πTemp008, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label4
							}
							goto Label5
							// line 3101: if thickness is None:
							πF.SetLineno(3101)
						Label4:
							// line 3102: line_style1 = table_style.border
							πF.SetLineno(3102)
							if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtable_style, ßborder, nil); πE != nil {
								continue
							}
							µline_style1 = πTemp001
							goto Label6
						Label5:
							// line 3104: line_style1 = '0.%03dcm solid #000000' % (thickness, )
							πF.SetLineno(3104)
							if πE = πg.CheckLocal(πF, µthickness, "thickness"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(µthickness).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("0.%03dcm solid #000000").ToObject(), πTemp002); πE != nil {
								continue
							}
							µline_style1 = πTemp001
							goto Label6
						Label6:
							// line 3105: SubElement(el2, 'style:table-cell-properties', attrib={
							πF.SetLineno(3105)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp003[0] = µel2
							πTemp003[1] = πg.NewStr("style:table-cell-properties").ToObject()
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:padding").ToObject(), πg.NewStr("0.049cm").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µline_style1, "line_style1"); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:border-left").ToObject(), µline_style1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µline_style1, "line_style1"); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:border-right").ToObject(), µline_style1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µline_style1, "line_style1"); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:border-top").ToObject(), µline_style1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µline_style1, "line_style1"); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("fo:border-bottom").ToObject(), µline_style1); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3112: title = None
							πF.SetLineno(3112)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µtitle = πTemp001
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßchildren, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(8)
							πTemp008 = false
						Label7:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp008 {
								πF.PopCheckpoint()
								goto Label9
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µchild = πTemp002
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(7)
							if πE = πg.CheckLocal(πF, µchild, "child"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µchild, ßtagname, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp007, ßtitle.ToObject()); πE != nil {
								continue
							}
							if πTemp009, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label10
							}
							goto Label11
							// line 3114: if child.tagname == 'title':
							πF.SetLineno(3114)
						Label10:
							// line 3115: title = child.astext()
							πF.SetLineno(3115)
							if πE = πg.CheckLocal(πF, µchild, "child"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µchild, ßastext, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtitle = πTemp007
							// line 3116: break
							πF.SetLineno(3116)
							πTemp008 = true
							continue
							goto Label11
						Label11:
							continue
						Label8:
							if πE != nil || πR != nil {
								continue
							}
						Label9:
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µtitle != πTemp002).ToObject()
							if πTemp008, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label12
							}
							goto Label13
							// line 3117: if title is not None:
							πF.SetLineno(3117)
						Label12:
							// line 3118: self.append_p('table-title', title)
							πF.SetLineno(3118)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewStr("table-title").ToObject()
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							πTemp003[1] = µtitle
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label14
						Label13:
							// line 3120: pass
							πF.SetLineno(3120)
							goto Label14
						Label14:
							// line 3121: el4 = SubElement(self.current_element, 'table:table', attrib={
							πF.SetLineno(3121)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewStr("table:table").ToObject()
							πTemp004 = πg.NewDict()
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtable_count, nil); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple1(πTemp002).ToObject()
							πTemp005[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πTemp004.SetItem(πF, πg.NewStr("table:name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtable_name, "table_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s").ToObject(), µtable_name); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtable_count, nil); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple1(πTemp002).ToObject()
							πTemp005[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πE = πTemp004.SetItem(πF, πg.NewStr("table:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel4 = πTemp002
							// line 3127: self.set_current_element(el4)
							πF.SetLineno(3127)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel4, "el4"); πE != nil {
								continue
							}
							πTemp003[0] = µel4
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3128: self.current_table_style = el1
							πF.SetLineno(3128)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µel1); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcurrent_table_style, πTemp001); πE != nil {
								continue
							}
							// line 3129: self.table_width = 0.0
							πF.SetLineno(3129)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewFloat(0.0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtable_width, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_table.ToObject(), πTemp192); πE != nil {
						continue
					}
					// line 3131: def depart_table(self, node):
					πF.SetLineno(3131)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp193 = πg.NewFunction(πg.NewCode("depart_table", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µattribkey *πg.Object = πg.UnboundLocal
						_ = µattribkey
						var µattribval *πg.Object = πg.UnboundLocal
						_ = µattribval
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 πg.KWArgs
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3132: attribkey = add_ns('style:width', nsdict=SNSD)
							πF.SetLineno(3132)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("style:width").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp003 = πg.KWArgs{
								{"nsdict", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßadd_ns); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µattribkey = πTemp004
							// line 3133: attribval = '%.4fin' % (self.table_width, )
							πF.SetLineno(3133)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßtable_width, nil); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple1(πTemp005).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%.4fin").ToObject(), πTemp004); πE != nil {
								continue
							}
							µattribval = πTemp002
							// line 3134: el1 = self.current_table_style
							πF.SetLineno(3134)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_table_style, nil); πE != nil {
								continue
							}
							µel1 = πTemp002
							// line 3135: el2 = el1[0]
							πF.SetLineno(3135)
							πTemp002 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µel1, πTemp002); πE != nil {
								continue
							}
							µel2 = πTemp004
							// line 3136: el2.attrib[attribkey] = attribval
							πF.SetLineno(3136)
							if πE = πg.CheckLocal(πF, µattribval, "attribval"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µattribval); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µel2, ßattrib, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattribkey, "attribkey"); πE != nil {
								continue
							}
							πTemp005 = µattribkey
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp002); πE != nil {
								continue
							}
							// line 3137: self.set_to_parent()
							πF.SetLineno(3137)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_table.ToObject(), πTemp193); πE != nil {
						continue
					}
					// line 3139: def visit_tgroup(self, node):
					πF.SetLineno(3139)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp194 = πg.NewFunction(πg.NewCode("visit_tgroup", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3140: self.column_count = ord('A') - 1
							πF.SetLineno(3140)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßA.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Sub(πF, πTemp004, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcolumn_count, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_tgroup.ToObject(), πTemp194); πE != nil {
						continue
					}
					// line 3142: def depart_tgroup(self, node):
					πF.SetLineno(3142)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp195 = πg.NewFunction(πg.NewCode("depart_tgroup", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3143: pass
							πF.SetLineno(3143)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_tgroup.ToObject(), πTemp195); πE != nil {
						continue
					}
					// line 3145: def visit_colspec(self, node):
					πF.SetLineno(3145)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp196 = πg.NewFunction(πg.NewCode("visit_colspec", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µcolspec_name *πg.Object = πg.UnboundLocal
						_ = µcolspec_name
						var µcolwidth *πg.Object = πg.UnboundLocal
						_ = µcolwidth
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Dict
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3146: self.column_count += 1
							πF.SetLineno(3146)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcolumn_count, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcolumn_count, πTemp002); πE != nil {
								continue
							}
							// line 3147: colspec_name = self.rststyle(
							πF.SetLineno(3147)
							πTemp003 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTABLESTYLEPREFIX); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s%%d.%%s").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtable_count, nil); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßcolumn_count, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßchr); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001 = πg.NewTuple2(πTemp002, πTemp006).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µcolspec_name = πTemp002
							// line 3151: colwidth = node['colwidth'] / 12.0
							πF.SetLineno(3151)
							πTemp002 = ßcolwidth.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Div(πF, πTemp005, πg.NewFloat(12.0).ToObject()); πE != nil {
								continue
							}
							µcolwidth = πTemp001
							// line 3152: el1 = SubElement(self.automatic_styles, 'style:style', attrib={
							πF.SetLineno(3152)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßautomatic_styles, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							πTemp003[1] = πg.NewStr("style:style").ToObject()
							πTemp007 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µcolspec_name, "colspec_name"); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:name").ToObject(), µcolspec_name); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:family").ToObject(), πg.NewStr("table-column").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp002
							// line 3156: SubElement(el1, 'style:table-column-properties',
							πF.SetLineno(3156)
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp003[0] = µel1
							πTemp003[1] = πg.NewStr("style:table-column-properties").ToObject()
							πTemp007 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µcolwidth, "colwidth"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%.4fin").ToObject(), µcolwidth); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:column-width").ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSNSD); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
								{"nsdict", πTemp002},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3159: self.append_child('table:table-column',
							πF.SetLineno(3159)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("table:table-column").ToObject()
							πTemp007 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µcolspec_name, "colspec_name"); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("table:style-name").ToObject(), µcolspec_name); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 3161: self.table_width += colwidth
							πF.SetLineno(3161)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtable_width, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcolwidth, "colwidth"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, µcolwidth); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtable_width, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_colspec.ToObject(), πTemp196); πE != nil {
						continue
					}
					// line 3163: def depart_colspec(self, node):
					πF.SetLineno(3163)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp197 = πg.NewFunction(πg.NewCode("depart_colspec", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3164: pass
							πF.SetLineno(3164)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_colspec.ToObject(), πTemp197); πE != nil {
						continue
					}
					// line 3166: def visit_thead(self, node):
					πF.SetLineno(3166)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp198 = πg.NewFunction(πg.NewCode("visit_thead", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3167: el = self.append_child('table:table-header-rows')
							πF.SetLineno(3167)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("table:table-header-rows").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp003
							// line 3168: self.set_current_element(el)
							πF.SetLineno(3168)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3169: self.in_thead = True
							πF.SetLineno(3169)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_thead, πTemp003); πE != nil {
								continue
							}
							// line 3170: self.paragraph_style_stack.append('Table_20_Heading')
							πF.SetLineno(3170)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßTable_20_Heading.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_thead.ToObject(), πTemp198); πE != nil {
						continue
					}
					// line 3172: def depart_thead(self, node):
					πF.SetLineno(3172)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp199 = πg.NewFunction(πg.NewCode("depart_thead", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3173: self.set_to_parent()
							πF.SetLineno(3173)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 3174: self.in_thead = False
							πF.SetLineno(3174)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_thead, πTemp002); πE != nil {
								continue
							}
							// line 3175: self.paragraph_style_stack.pop()
							πF.SetLineno(3175)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_thead.ToObject(), πTemp199); πE != nil {
						continue
					}
					// line 3177: def visit_row(self, node):
					πF.SetLineno(3177)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp200 = πg.NewFunction(πg.NewCode("visit_row", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3178: self.column_count = ord('A') - 1
							πF.SetLineno(3178)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = ßA.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Sub(πF, πTemp004, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcolumn_count, πTemp003); πE != nil {
								continue
							}
							// line 3179: el = self.append_child('table:table-row')
							πF.SetLineno(3179)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("table:table-row").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µel = πTemp003
							// line 3180: self.set_current_element(el)
							πF.SetLineno(3180)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp002[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_row.ToObject(), πTemp200); πE != nil {
						continue
					}
					// line 3182: def depart_row(self, node):
					πF.SetLineno(3182)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp201 = πg.NewFunction(πg.NewCode("depart_row", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3183: self.set_to_parent()
							πF.SetLineno(3183)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_row.ToObject(), πTemp201); πE != nil {
						continue
					}
					// line 3185: def visit_entry(self, node):
					πF.SetLineno(3185)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp202 = πg.NewFunction(πg.NewCode("visit_entry", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µcellspec_name *πg.Object = πg.UnboundLocal
						_ = µcellspec_name
						var µattrib *πg.Object = πg.UnboundLocal
						_ = µattrib
						var µmorecols *πg.Object = πg.UnboundLocal
						_ = µmorecols
						var µmorerows *πg.Object = πg.UnboundLocal
						_ = µmorerows
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3186: self.column_count += 1
							πF.SetLineno(3186)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcolumn_count, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcolumn_count, πTemp002); πE != nil {
								continue
							}
							// line 3187: cellspec_name = self.rststyle(
							πF.SetLineno(3187)
							πTemp003 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTABLESTYLEPREFIX); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s%%d.%%c%%d").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtable_count, nil); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple3(πTemp002, ßA.ToObject(), πg.NewInt(1).ToObject()).ToObject()
							πTemp003[1] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µcellspec_name = πTemp002
							// line 3191: attrib = {
							πF.SetLineno(3191)
							πTemp004 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µcellspec_name, "cellspec_name"); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("table:style-name").ToObject(), µcellspec_name); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, πg.NewStr("office:value-type").ToObject(), ßstring.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004.ToObject()
							µattrib = πTemp001
							// line 3195: morecols = node.get('morecols', 0)
							πF.SetLineno(3195)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = ßmorecols.ToObject()
							πTemp003[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µmorecols = πTemp002
							if πE = πg.CheckLocal(πF, µmorecols, "morecols"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GT(πF, µmorecols, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 3196: if morecols > 0:
							πF.SetLineno(3196)
						Label1:
							// line 3197: attrib['table:number-columns-spanned'] = '%d' % (morecols + 1,)
							πF.SetLineno(3197)
							if πE = πg.CheckLocal(πF, µmorecols, "morecols"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Add(πF, µmorecols, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(πTemp006).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%d").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp006 = πg.NewStr("table:number-columns-spanned").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp006, πTemp002); πE != nil {
								continue
							}
							// line 3198: self.column_count += morecols
							πF.SetLineno(3198)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcolumn_count, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmorecols, "morecols"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, µmorecols); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcolumn_count, πTemp002); πE != nil {
								continue
							}
							goto Label2
						Label2:
							// line 3199: morerows = node.get('morerows', 0)
							πF.SetLineno(3199)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = ßmorerows.ToObject()
							πTemp003[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µmorerows = πTemp002
							if πE = πg.CheckLocal(πF, µmorerows, "morerows"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GT(πF, µmorerows, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label3
							}
							goto Label4
							// line 3200: if morerows > 0:
							πF.SetLineno(3200)
						Label3:
							// line 3201: attrib['table:number-rows-spanned'] = '%d' % (morerows + 1,)
							πF.SetLineno(3201)
							if πE = πg.CheckLocal(πF, µmorerows, "morerows"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Add(πF, µmorerows, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(πTemp006).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%d").ToObject(), πTemp002); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp006 = πg.NewStr("table:number-rows-spanned").ToObject()
							if πE = πg.SetItem(πF, µattrib, πTemp006, πTemp002); πE != nil {
								continue
							}
							goto Label4
						Label4:
							// line 3202: el1 = self.append_child('table:table-cell', attrib=attrib)
							πF.SetLineno(3202)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("table:table-cell").ToObject()
							if πE = πg.CheckLocal(πF, µattrib, "attrib"); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"attrib", µattrib},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µel1 = πTemp002
							// line 3203: self.set_current_element(el1)
							πF.SetLineno(3203)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp003[0] = µel1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_entry.ToObject(), πTemp202); πE != nil {
						continue
					}
					// line 3205: def depart_entry(self, node):
					πF.SetLineno(3205)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp203 = πg.NewFunction(πg.NewCode("depart_entry", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3206: self.set_to_parent()
							πF.SetLineno(3206)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_entry.ToObject(), πTemp203); πE != nil {
						continue
					}
					// line 3208: def visit_tbody(self, node):
					πF.SetLineno(3208)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp204 = πg.NewFunction(πg.NewCode("visit_tbody", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3209: pass
							πF.SetLineno(3209)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_tbody.ToObject(), πTemp204); πE != nil {
						continue
					}
					// line 3211: def depart_tbody(self, node):
					πF.SetLineno(3211)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp205 = πg.NewFunction(πg.NewCode("depart_tbody", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3212: pass
							πF.SetLineno(3212)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_tbody.ToObject(), πTemp205); πE != nil {
						continue
					}
					// line 3214: def visit_target(self, node):
					πF.SetLineno(3214)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp206 = πg.NewFunction(πg.NewCode("visit_target", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µnode, ßrefuri.ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(πTemp005).ToObject()
							πTemp002 = πTemp004
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µnode, ßrefid.ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(πTemp005).ToObject()
							πTemp002 = πTemp004
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µnode, ßrefname.ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(πTemp005).ToObject()
							πTemp002 = πTemp004
						Label1:
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label2
							}
							goto Label3
							// line 3218: if not ('refuri' in node or
							πF.SetLineno(3218)
						Label2:
							// line 3221: pass
							πF.SetLineno(3221)
							goto Label4
						Label3:
							// line 3223: pass
							πF.SetLineno(3223)
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_target.ToObject(), πTemp206); πE != nil {
						continue
					}
					// line 3225: def depart_target(self, node):
					πF.SetLineno(3225)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp207 = πg.NewFunction(πg.NewCode("depart_target", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3226: pass
							πF.SetLineno(3226)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_target.ToObject(), πTemp207); πE != nil {
						continue
					}
					// line 3228: def visit_title(self, node, move_ids=1, title_type='title'):
					πF.SetLineno(3228)
					πTemp003 = make([]πg.Param, 4)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "move_ids", Def: πg.NewInt(1).ToObject()}
					πTemp003[3] = πg.Param{Name: "title_type", Def: ßtitle.ToObject()}
					πTemp208 = πg.NewFunction(πg.NewCode("visit_title", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µmove_ids *πg.Object = πArgs[2]
						_ = µmove_ids
						var µtitle_type *πg.Object = πArgs[3]
						_ = µtitle_type
						var µsection_level *πg.Object = πg.UnboundLocal
						_ = µsection_level
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µtext *πg.Object = πg.UnboundLocal
						_ = µtext
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Dict
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßsection, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßdocument, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							goto Label3
							// line 3229: if isinstance(node.parent, docutils.nodes.section):
							πF.SetLineno(3229)
						Label1:
							// line 3230: section_level = self.section_level
							πF.SetLineno(3230)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							µsection_level = πTemp002
							if πE = πg.CheckLocal(πF, µsection_level, "section_level"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, µsection_level, πg.NewInt(7).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 3231: if section_level > 7:
							πF.SetLineno(3231)
						Label4:
							// line 3232: self.document.reporter.warning(
							πF.SetLineno(3232)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("Heading/section levels greater than 7 not supported.").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3234: self.document.reporter.warning(
							πF.SetLineno(3234)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp006).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("    Reducing to heading level 7 for heading: \"%s\"").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3237: section_level = 7
							πF.SetLineno(3237)
							µsection_level = πg.NewInt(7).ToObject()
							goto Label5
						Label5:
							// line 3238: el1 = self.append_child(
							πF.SetLineno(3238)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:h").ToObject()
							πTemp007 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µsection_level, "section_level"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%d").ToObject(), µsection_level); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:outline-level").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp008 = πF.MakeArgs(2)
							πTemp008[0] = πg.NewStr("heading%d").ToObject()
							if πE = πg.CheckLocal(πF, µsection_level, "section_level"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(µsection_level).ToObject()
							πTemp008[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp002 = πTemp007.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 3245: self.append_pending_ids(el1)
							πF.SetLineno(3245)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_pending_ids, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3246: self.set_current_element(el1)
							πF.SetLineno(3246)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label3
							// line 3247: elif isinstance(node.parent, docutils.nodes.document):
							πF.SetLineno(3247)
						Label2:
							// line 3251: el1 = SubElement(self.current_element, 'text:p', attrib={
							πF.SetLineno(3251)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("text:p").ToObject()
							πTemp007 = πg.NewDict()
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtitle_type, "title_type"); πE != nil {
								continue
							}
							πTemp008[0] = µtitle_type
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp002 = πTemp007.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							// line 3254: self.append_pending_ids(el1)
							πF.SetLineno(3254)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_pending_ids, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3255: text = node.astext()
							πF.SetLineno(3255)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtext = πTemp003
							// line 3256: self.title = text
							πF.SetLineno(3256)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µtext); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtitle, πTemp002); πE != nil {
								continue
							}
							// line 3257: self.found_doc_title = True
							πF.SetLineno(3257)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfound_doc_title, πTemp003); πE != nil {
								continue
							}
							// line 3258: self.set_current_element(el1)
							πF.SetLineno(3258)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp001[0] = µel1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_title.ToObject(), πTemp208); πE != nil {
						continue
					}
					// line 3260: def depart_title(self, node):
					πF.SetLineno(3260)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp209 = πg.NewFunction(πg.NewCode("depart_title", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp005, ßsection, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp001 = πTemp005
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp005, ßdocument, nil); πE != nil {
								continue
							}
							πTemp003[1] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp001 = πTemp005
						Label1:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							goto Label3
							// line 3261: if (
							πF.SetLineno(3261)
						Label2:
							// line 3264: self.set_to_parent()
							πF.SetLineno(3264)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_title.ToObject(), πTemp209); πE != nil {
						continue
					}
					// line 3266: def visit_subtitle(self, node, move_ids=1):
					πF.SetLineno(3266)
					πTemp003 = make([]πg.Param, 3)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "move_ids", Def: πg.NewInt(1).ToObject()}
					πTemp210 = πg.NewFunction(πg.NewCode("visit_subtitle", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µmove_ids *πg.Object = πArgs[2]
						_ = µmove_ids
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 πg.KWArgs
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3267: self.visit_title(node, move_ids, title_type='subtitle')
							πF.SetLineno(3267)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µmove_ids, "move_ids"); πE != nil {
								continue
							}
							πTemp001[1] = µmove_ids
							πTemp002 = πg.KWArgs{
								{"title_type", ßsubtitle.ToObject()},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßvisit_title, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_subtitle.ToObject(), πTemp210); πE != nil {
						continue
					}
					// line 3269: def depart_subtitle(self, node):
					πF.SetLineno(3269)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp211 = πg.NewFunction(πg.NewCode("depart_subtitle", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3270: self.depart_title(node)
							πF.SetLineno(3270)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_title, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_subtitle.ToObject(), πTemp211); πE != nil {
						continue
					}
					// line 3272: def visit_title_reference(self, node):
					πF.SetLineno(3272)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp212 = πg.NewFunction(πg.NewCode("visit_title_reference", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3273: el = self.append_child('text:span', attrib={
							πF.SetLineno(3273)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:span").ToObject()
							πTemp002 = πg.NewDict()
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßquotation.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πTemp002.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp004 = πTemp002.ToObject()
							πTemp006 = πg.KWArgs{
								{"attrib", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp005
							// line 3275: el.text = self.encode(node.astext())
							πF.SetLineno(3275)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, πTemp005); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel, ßtext, πTemp004); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßSkipChildren, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 3276: raise nodes.SkipChildren()
							πF.SetLineno(3276)
							πE = πF.Raise(πTemp004, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_title_reference.ToObject(), πTemp212); πE != nil {
						continue
					}
					// line 3278: def depart_title_reference(self, node):
					πF.SetLineno(3278)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp213 = πg.NewFunction(πg.NewCode("depart_title_reference", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3279: pass
							πF.SetLineno(3279)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_title_reference.ToObject(), πTemp213); πE != nil {
						continue
					}
					// line 3281: def generate_table_of_content_entry_template(self, el1):
					πF.SetLineno(3281)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "el1", Def: nil}
					πTemp214 = πg.NewFunction(πg.NewCode("generate_table_of_content_entry_template", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µel1 *πg.Object = πArgs[1]
						_ = µel1
						var µidx *πg.Object = πg.UnboundLocal
						_ = µidx
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Dict
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(1).ToObject()
							πTemp002[1] = πg.NewInt(11).ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µidx = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 3283: el2 = SubElement(
							πF.SetLineno(3283)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp002[0] = µel1
							πTemp002[1] = πg.NewStr("text:table-of-content-entry-template").ToObject()
							πTemp007 = πg.NewDict()
							if πE = πg.CheckLocal(πF, µidx, "idx"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple1(µidx).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("%d").ToObject(), πTemp004); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:outline-level").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µidx, "idx"); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple1(µidx).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("contents-%d").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp008[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp003 = πTemp007.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp003},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µel2 = πTemp004
							// line 3290: SubElement(el2, 'text:index-entry-chapter')
							πF.SetLineno(3290)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp002[0] = µel2
							πTemp002[1] = πg.NewStr("text:index-entry-chapter").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 3291: SubElement(el2, 'text:index-entry-text')
							πF.SetLineno(3291)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp002[0] = µel2
							πTemp002[1] = πg.NewStr("text:index-entry-text").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 3292: SubElement(el2, 'text:index-entry-tab-stop', attrib={
							πF.SetLineno(3292)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp002[0] = µel2
							πTemp002[1] = πg.NewStr("text:index-entry-tab-stop").ToObject()
							πTemp007 = πg.NewDict()
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:leader-char").ToObject(), πg.NewStr(".").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("style:type").ToObject(), ßright.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp007.ToObject()
							πTemp009 = πg.KWArgs{
								{"attrib", πTemp003},
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 3296: SubElement(el2, 'text:index-entry-page-number')
							πF.SetLineno(3296)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp002[0] = µel2
							πTemp002[1] = πg.NewStr("text:index-entry-page-number").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßgenerate_table_of_content_entry_template.ToObject(), πTemp214); πE != nil {
						continue
					}
					// line 3298: def find_title_label(self, node, class_type, label_key):
					πF.SetLineno(3298)
					πTemp003 = make([]πg.Param, 4)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "class_type", Def: nil}
					πTemp003[3] = πg.Param{Name: "label_key", Def: nil}
					πTemp215 = πg.NewFunction(πg.NewCode("find_title_label", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µclass_type *πg.Object = πArgs[2]
						_ = µclass_type
						var µlabel_key *πg.Object = πArgs[3]
						_ = µlabel_key
						var µlabel *πg.Object = πg.UnboundLocal
						_ = µlabel
						var µtitle_node *πg.Object = πg.UnboundLocal
						_ = µtitle_node
						var µchild *πg.Object = πg.UnboundLocal
						_ = µchild
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 3299: label = ''
							πF.SetLineno(3299)
							µlabel = ß.ToObject()
							// line 3300: title_node = None
							πF.SetLineno(3300)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µtitle_node = πTemp001
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßchildren, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp003 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp003 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp004 = !isStop
							} else {
								πTemp004 = true
								µchild = πTemp002
							}
							if πE != nil || !πTemp004 {
								continue
							}
							πF.PushCheckpoint(1)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µchild, "child"); πE != nil {
								continue
							}
							πTemp005[0] = µchild
							if πE = πg.CheckLocal(πF, µclass_type, "class_type"); πE != nil {
								continue
							}
							πTemp005[1] = µclass_type
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp004, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 3302: if isinstance(child, class_type):
							πF.SetLineno(3302)
						Label4:
							// line 3303: title_node = child
							πF.SetLineno(3303)
							if πE = πg.CheckLocal(πF, µchild, "child"); πE != nil {
								continue
							}
							µtitle_node = µchild
							// line 3304: break
							πF.SetLineno(3304)
							πTemp003 = true
							continue
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πE = πg.CheckLocal(πF, µtitle_node, "title_node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µtitle_node != πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label6
							}
							goto Label7
							// line 3305: if title_node is not None:
							πF.SetLineno(3305)
						Label6:
							// line 3306: label = title_node.astext()
							πF.SetLineno(3306)
							if πE = πg.CheckLocal(πF, µtitle_node, "title_node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtitle_node, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µlabel = πTemp002
							goto Label8
						Label7:
							// line 3308: label = self.language.labels[label_key]
							πF.SetLineno(3308)
							if πE = πg.CheckLocal(πF, µlabel_key, "label_key"); πE != nil {
								continue
							}
							πTemp001 = µlabel_key
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßlanguage, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßlabels, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp007, πTemp001); πE != nil {
								continue
							}
							µlabel = πTemp002
							goto Label8
						Label8:
							// line 3309: return label
							πF.SetLineno(3309)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πR = µlabel
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßfind_title_label.ToObject(), πTemp215); πE != nil {
						continue
					}
					// line 3311: def visit_topic(self, node):
					πF.SetLineno(3311)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp216 = πg.NewFunction(πg.NewCode("visit_topic", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µlabel *πg.Object = πg.UnboundLocal
						_ = µlabel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var µel3 *πg.Object = πg.UnboundLocal
						_ = µel3
						var µel4 *πg.Object = πg.UnboundLocal
						_ = µel4
						var µel5 *πg.Object = πg.UnboundLocal
						_ = µel5
						var µel6 *πg.Object = πg.UnboundLocal
						_ = µel6
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Dict
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πTemp009 []*πg.Object
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, ßclasses.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 3312: if 'classes' in node.attributes:
							πF.SetLineno(3312)
						Label1:
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp004, ßcontents.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp004, ßabstract.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label4
							}
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp004, ßdedication.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							goto Label6
							// line 3313: if 'contents' in node.attributes['classes']:
							πF.SetLineno(3313)
						Label3:
							// line 3314: label = self.find_title_label(
							πF.SetLineno(3314)
							πTemp006 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp006[0] = µnode
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßtitle, nil); πE != nil {
								continue
							}
							πTemp006[1] = πTemp001
							πTemp006[2] = ßcontents.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfind_title_label, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µlabel = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßgenerate_oowriter_toc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label7
							}
							goto Label8
							// line 3316: if self.settings.generate_oowriter_toc:
							πF.SetLineno(3316)
						Label7:
							// line 3317: el1 = self.append_child('text:table-of-content', attrib={
							πF.SetLineno(3317)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewStr("text:table-of-content").ToObject()
							πTemp007 = πg.NewDict()
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:name").ToObject(), πg.NewStr("Table of Contents1").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:protected").ToObject(), ßtrue.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), ßSect1.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel1 = πTemp002
							// line 3322: el2 = SubElement(
							πF.SetLineno(3322)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp006[0] = µel1
							πTemp006[1] = πg.NewStr("text:table-of-content-source").ToObject()
							πTemp007 = πg.NewDict()
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:outline-level").ToObject(), ß10.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel2 = πTemp002
							// line 3328: el3 = SubElement(el2, 'text:index-title-template', attrib={
							πF.SetLineno(3328)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp006[0] = µel2
							πTemp006[1] = πg.NewStr("text:index-title-template").ToObject()
							πTemp007 = πg.NewDict()
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), ßContents_20_Heading.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel3 = πTemp002
							// line 3331: el3.text = label
							πF.SetLineno(3331)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlabel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel3, "el3"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel3, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 3332: self.generate_table_of_content_entry_template(el2)
							πF.SetLineno(3332)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							πTemp006[0] = µel2
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßgenerate_table_of_content_entry_template, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 3333: el4 = SubElement(el1, 'text:index-body')
							πF.SetLineno(3333)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp006[0] = µel1
							πTemp006[1] = πg.NewStr("text:index-body").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel4 = πTemp002
							// line 3334: el5 = SubElement(el4, 'text:index-title')
							πF.SetLineno(3334)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel4, "el4"); πE != nil {
								continue
							}
							πTemp006[0] = µel4
							πTemp006[1] = πg.NewStr("text:index-title").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel5 = πTemp002
							// line 3335: el6 = SubElement(el5, 'text:p', attrib={
							πF.SetLineno(3335)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel5, "el5"); πE != nil {
								continue
							}
							πTemp006[0] = µel5
							πTemp006[1] = πg.NewStr("text:p").ToObject()
							πTemp007 = πg.NewDict()
							πTemp009 = πF.MakeArgs(1)
							πTemp009[0] = πg.NewStr("contents-heading").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel6 = πTemp002
							// line 3338: el6.text = label
							πF.SetLineno(3338)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlabel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel6, "el6"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel6, ßtext, πTemp001); πE != nil {
								continue
							}
							// line 3339: self.save_current_element = self.current_element
							πF.SetLineno(3339)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsave_current_element, πTemp002); πE != nil {
								continue
							}
							// line 3340: self.table_of_content_index_body = el4
							πF.SetLineno(3340)
							if πE = πg.CheckLocal(πF, µel4, "el4"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µel4); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtable_of_content_index_body, πTemp001); πE != nil {
								continue
							}
							// line 3341: self.set_current_element(el4)
							πF.SetLineno(3341)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel4, "el4"); πE != nil {
								continue
							}
							πTemp006[0] = µel4
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label9
						Label8:
							// line 3343: el = self.append_p('horizontalline')
							πF.SetLineno(3343)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßhorizontalline.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel = πTemp002
							// line 3344: el = self.append_p('centeredtextbody')
							πF.SetLineno(3344)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßcenteredtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel = πTemp002
							// line 3345: el1 = SubElement(
							πF.SetLineno(3345)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp006[0] = µel
							πTemp006[1] = πg.NewStr("text:span").ToObject()
							πTemp007 = πg.NewDict()
							πTemp009 = πF.MakeArgs(1)
							πTemp009[0] = ßstrong.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel1 = πTemp002
							// line 3348: el1.text = label
							πF.SetLineno(3348)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlabel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp001); πE != nil {
								continue
							}
							goto Label9
						Label9:
							// line 3349: self.in_table_of_contents = True
							πF.SetLineno(3349)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_table_of_contents, πTemp002); πE != nil {
								continue
							}
							goto Label6
							// line 3350: elif 'abstract' in node.attributes['classes']:
							πF.SetLineno(3350)
						Label4:
							// line 3351: el = self.append_p('horizontalline')
							πF.SetLineno(3351)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßhorizontalline.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel = πTemp002
							// line 3352: el = self.append_p('centeredtextbody')
							πF.SetLineno(3352)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßcenteredtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel = πTemp002
							// line 3353: el1 = SubElement(
							πF.SetLineno(3353)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp006[0] = µel
							πTemp006[1] = πg.NewStr("text:span").ToObject()
							πTemp007 = πg.NewDict()
							πTemp009 = πF.MakeArgs(1)
							πTemp009[0] = ßstrong.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel1 = πTemp002
							// line 3356: label = self.find_title_label(
							πF.SetLineno(3356)
							πTemp006 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp006[0] = µnode
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßtitle, nil); πE != nil {
								continue
							}
							πTemp006[1] = πTemp001
							πTemp006[2] = ßabstract.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfind_title_label, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µlabel = πTemp002
							// line 3359: el1.text = label
							πF.SetLineno(3359)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlabel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp001); πE != nil {
								continue
							}
							goto Label6
							// line 3360: elif 'dedication' in node.attributes['classes']:
							πF.SetLineno(3360)
						Label5:
							// line 3361: el = self.append_p('horizontalline')
							πF.SetLineno(3361)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßhorizontalline.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel = πTemp002
							// line 3362: el = self.append_p('centeredtextbody')
							πF.SetLineno(3362)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßcenteredtextbody.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel = πTemp002
							// line 3363: el1 = SubElement(
							πF.SetLineno(3363)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp006[0] = µel
							πTemp006[1] = πg.NewStr("text:span").ToObject()
							πTemp007 = πg.NewDict()
							πTemp009 = πF.MakeArgs(1)
							πTemp009[0] = ßstrong.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp009, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp009)
							if πE = πTemp007.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp007.ToObject()
							πTemp008 = πg.KWArgs{
								{"attrib", πTemp001},
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µel1 = πTemp002
							// line 3366: label = self.find_title_label(
							πF.SetLineno(3366)
							πTemp006 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp006[0] = µnode
							if πTemp001, πE = πg.ResolveGlobal(πF, ßdocutils); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßnodes, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßtitle, nil); πE != nil {
								continue
							}
							πTemp006[1] = πTemp001
							πTemp006[2] = ßdedication.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfind_title_label, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µlabel = πTemp002
							// line 3369: el1.text = label
							πF.SetLineno(3369)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlabel); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp001); πE != nil {
								continue
							}
							goto Label6
						Label6:
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_topic.ToObject(), πTemp216); πE != nil {
						continue
					}
					// line 3371: def depart_topic(self, node):
					πF.SetLineno(3371)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp217 = πg.NewFunction(πg.NewCode("depart_topic", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, ßclasses.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 3372: if 'classes' in node.attributes:
							πF.SetLineno(3372)
						Label1:
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp005, πTemp002); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp004, ßcontents.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 3373: if 'contents' in node.attributes['classes']:
							πF.SetLineno(3373)
						Label3:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßgenerate_oowriter_toc, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							goto Label6
							// line 3374: if self.settings.generate_oowriter_toc:
							πF.SetLineno(3374)
						Label5:
							// line 3375: self.update_toc_page_numbers(
							πF.SetLineno(3375)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtable_of_content_index_body, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßupdate_toc_page_numbers, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 3377: self.set_current_element(self.save_current_element)
							πF.SetLineno(3377)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsave_current_element, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label7
						Label6:
							// line 3379: self.append_p('horizontalline')
							πF.SetLineno(3379)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßhorizontalline.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label7
						Label7:
							// line 3380: self.in_table_of_contents = False
							πF.SetLineno(3380)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßin_table_of_contents, πTemp002); πE != nil {
								continue
							}
							goto Label4
						Label4:
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_topic.ToObject(), πTemp217); πE != nil {
						continue
					}
					// line 3382: def update_toc_page_numbers(self, el):
					πF.SetLineno(3382)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "el", Def: nil}
					πTemp218 = πg.NewFunction(πg.NewCode("update_toc_page_numbers", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µel *πg.Object = πArgs[1]
						_ = µel
						var µcollection *πg.Object = πg.UnboundLocal
						_ = µcollection
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3383: collection = []
							πF.SetLineno(3383)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µcollection = πTemp002
							// line 3384: self.update_toc_collect(el, 0, collection)
							πF.SetLineno(3384)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							πTemp001[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µcollection, "collection"); πE != nil {
								continue
							}
							πTemp001[2] = µcollection
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßupdate_toc_collect, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3385: self.update_toc_add_numbers(collection)
							πF.SetLineno(3385)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcollection, "collection"); πE != nil {
								continue
							}
							πTemp001[0] = µcollection
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßupdate_toc_add_numbers, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßupdate_toc_page_numbers.ToObject(), πTemp218); πE != nil {
						continue
					}
					// line 3387: def update_toc_collect(self, el, level, collection):
					πF.SetLineno(3387)
					πTemp003 = make([]πg.Param, 4)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "el", Def: nil}
					πTemp003[2] = πg.Param{Name: "level", Def: nil}
					πTemp003[3] = πg.Param{Name: "collection", Def: nil}
					πTemp219 = πg.NewFunction(πg.NewCode("update_toc_collect", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µel *πg.Object = πArgs[1]
						_ = µel
						var µlevel *πg.Object = πArgs[2]
						_ = µlevel
						var µcollection *πg.Object = πArgs[3]
						_ = µcollection
						var µchild_el *πg.Object = πg.UnboundLocal
						_ = µchild_el
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 3388: collection.append((level, el))
							πF.SetLineno(3388)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(µlevel, µel).ToObject()
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µcollection, "collection"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µcollection, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3389: level += 1
							πF.SetLineno(3389)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, µlevel, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µlevel = πTemp002
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, µel); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µchild_el = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)
							if πE = πg.CheckLocal(πF, µchild_el, "child_el"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µchild_el, ßtag, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.NE(πF, πTemp006, πg.NewStr("text:index-body").ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							goto Label5
							// line 3391: if child_el.tag != 'text:index-body':
							πF.SetLineno(3391)
						Label4:
							// line 3392: self.update_toc_collect(child_el, level, collection)
							πF.SetLineno(3392)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µchild_el, "child_el"); πE != nil {
								continue
							}
							πTemp001[0] = µchild_el
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							πTemp001[1] = µlevel
							if πE = πg.CheckLocal(πF, µcollection, "collection"); πE != nil {
								continue
							}
							πTemp001[2] = µcollection
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßupdate_toc_collect, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßupdate_toc_collect.ToObject(), πTemp219); πE != nil {
						continue
					}
					// line 3394: def update_toc_add_numbers(self, collection):
					πF.SetLineno(3394)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "collection", Def: nil}
					πTemp220 = πg.NewFunction(πg.NewCode("update_toc_add_numbers", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µcollection *πg.Object = πArgs[1]
						_ = µcollection
						var µlevel *πg.Object = πg.UnboundLocal
						_ = µlevel
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µel2 *πg.Object = πg.UnboundLocal
						_ = µel2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µcollection, "collection"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µcollection); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp002 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp003 = !isStop
							} else {
								πTemp003 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}}}, πTemp004); πE != nil {
									continue
								}
								µlevel = πTemp005
								µel1 = πTemp006
							}
							if πE != nil || !πTemp003 {
								continue
							}
							πF.PushCheckpoint(1)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µel1, ßtag, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Eq(πF, πTemp006, πg.NewStr("text:p").ToObject()); πE != nil {
								continue
							}
							πTemp004 = πTemp005
							if πTemp003, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if !πTemp003 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µel1, ßtext, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.NE(πF, πTemp006, πg.NewStr("Table of Contents").ToObject()); πE != nil {
								continue
							}
							πTemp004 = πTemp005
						Label4:
							if πTemp003, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							goto Label6
							// line 3396: if (
							πF.SetLineno(3396)
						Label5:
							// line 3399: el2 = SubElement(el1, 'text:tab')
							πF.SetLineno(3399)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							πTemp007[0] = µel1
							πTemp007[1] = πg.NewStr("text:tab").ToObject()
							if πTemp004, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µel2 = πTemp005
							// line 3400: el2.tail = '9999'
							πF.SetLineno(3400)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, ß9999.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel2, "el2"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel2, ßtail, πTemp004); πE != nil {
								continue
							}
							goto Label6
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßupdate_toc_add_numbers.ToObject(), πTemp220); πE != nil {
						continue
					}
					// line 3402: def visit_transition(self, node):
					πF.SetLineno(3402)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp221 = πg.NewFunction(πg.NewCode("visit_transition", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3403: self.append_p('horizontalline')
							πF.SetLineno(3403)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßhorizontalline.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßappend_p, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_transition.ToObject(), πTemp221); πE != nil {
						continue
					}
					// line 3405: def depart_transition(self, node):
					πF.SetLineno(3405)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp222 = πg.NewFunction(πg.NewCode("depart_transition", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3406: pass
							πF.SetLineno(3406)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_transition.ToObject(), πTemp222); πE != nil {
						continue
					}
					// line 3411: def visit_warning(self, node):
					πF.SetLineno(3411)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp223 = πg.NewFunction(πg.NewCode("visit_warning", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3412: self.generate_admonition(node, 'warning')
							πF.SetLineno(3412)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßwarning.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_warning.ToObject(), πTemp223); πE != nil {
						continue
					}
					// line 3414: def depart_warning(self, node):
					πF.SetLineno(3414)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp224 = πg.NewFunction(πg.NewCode("depart_warning", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3415: self.paragraph_style_stack.pop()
							πF.SetLineno(3415)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_warning.ToObject(), πTemp224); πE != nil {
						continue
					}
					// line 3417: def visit_attention(self, node):
					πF.SetLineno(3417)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp225 = πg.NewFunction(πg.NewCode("visit_attention", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3418: self.generate_admonition(node, 'attention')
							πF.SetLineno(3418)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßattention.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_attention.ToObject(), πTemp225); πE != nil {
						continue
					}
					// line 3420: depart_attention = depart_warning
					πF.SetLineno(3420)
					if πTemp226, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_warning); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_attention.ToObject(), πTemp226); πE != nil {
						continue
					}
					// line 3422: def visit_caution(self, node):
					πF.SetLineno(3422)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp226 = πg.NewFunction(πg.NewCode("visit_caution", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3423: self.generate_admonition(node, 'caution')
							πF.SetLineno(3423)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßcaution.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_caution.ToObject(), πTemp226); πE != nil {
						continue
					}
					// line 3425: depart_caution = depart_warning
					πF.SetLineno(3425)
					if πTemp227, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_warning); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_caution.ToObject(), πTemp227); πE != nil {
						continue
					}
					// line 3427: def visit_danger(self, node):
					πF.SetLineno(3427)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp227 = πg.NewFunction(πg.NewCode("visit_danger", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3428: self.generate_admonition(node, 'danger')
							πF.SetLineno(3428)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßdanger.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_danger.ToObject(), πTemp227); πE != nil {
						continue
					}
					// line 3430: depart_danger = depart_warning
					πF.SetLineno(3430)
					if πTemp228, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_warning); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_danger.ToObject(), πTemp228); πE != nil {
						continue
					}
					// line 3432: def visit_error(self, node):
					πF.SetLineno(3432)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp228 = πg.NewFunction(πg.NewCode("visit_error", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3433: self.generate_admonition(node, 'error')
							πF.SetLineno(3433)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßerror.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_error.ToObject(), πTemp228); πE != nil {
						continue
					}
					// line 3435: depart_error = depart_warning
					πF.SetLineno(3435)
					if πTemp229, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_warning); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_error.ToObject(), πTemp229); πE != nil {
						continue
					}
					// line 3437: def visit_hint(self, node):
					πF.SetLineno(3437)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp229 = πg.NewFunction(πg.NewCode("visit_hint", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3438: self.generate_admonition(node, 'hint')
							πF.SetLineno(3438)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßhint.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_hint.ToObject(), πTemp229); πE != nil {
						continue
					}
					// line 3440: depart_hint = depart_warning
					πF.SetLineno(3440)
					if πTemp230, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_warning); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_hint.ToObject(), πTemp230); πE != nil {
						continue
					}
					// line 3442: def visit_important(self, node):
					πF.SetLineno(3442)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp230 = πg.NewFunction(πg.NewCode("visit_important", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3443: self.generate_admonition(node, 'important')
							πF.SetLineno(3443)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßimportant.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_important.ToObject(), πTemp230); πE != nil {
						continue
					}
					// line 3445: depart_important = depart_warning
					πF.SetLineno(3445)
					if πTemp231, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_warning); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_important.ToObject(), πTemp231); πE != nil {
						continue
					}
					// line 3447: def visit_note(self, node):
					πF.SetLineno(3447)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp231 = πg.NewFunction(πg.NewCode("visit_note", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3448: self.generate_admonition(node, 'note')
							πF.SetLineno(3448)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßnote.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_note.ToObject(), πTemp231); πE != nil {
						continue
					}
					// line 3450: depart_note = depart_warning
					πF.SetLineno(3450)
					if πTemp232, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_warning); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_note.ToObject(), πTemp232); πE != nil {
						continue
					}
					// line 3452: def visit_tip(self, node):
					πF.SetLineno(3452)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp232 = πg.NewFunction(πg.NewCode("visit_tip", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3453: self.generate_admonition(node, 'tip')
							πF.SetLineno(3453)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßtip.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_tip.ToObject(), πTemp232); πE != nil {
						continue
					}
					// line 3455: depart_tip = depart_warning
					πF.SetLineno(3455)
					if πTemp233, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_warning); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_tip.ToObject(), πTemp233); πE != nil {
						continue
					}
					// line 3457: def visit_admonition(self, node):
					πF.SetLineno(3457)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp233 = πg.NewFunction(πg.NewCode("visit_admonition", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µtitle *πg.Object = πg.UnboundLocal
						_ = µtitle
						var µchild *πg.Object = πg.UnboundLocal
						_ = µchild
						var µclasses1 *πg.Object = πg.UnboundLocal
						_ = µclasses1
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 3458: title = None
							πF.SetLineno(3458)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							µtitle = πTemp001
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßchildren, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp003 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp003 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp004 = !isStop
							} else {
								πTemp004 = true
								µchild = πTemp002
							}
							if πE != nil || !πTemp004 {
								continue
							}
							πF.PushCheckpoint(1)
							if πE = πg.CheckLocal(πF, µchild, "child"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µchild, ßtagname, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp005, ßtitle.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 3460: if child.tagname == 'title':
							πF.SetLineno(3460)
						Label4:
							// line 3461: title = child.astext()
							πF.SetLineno(3461)
							if πE = πg.CheckLocal(πF, µchild, "child"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µchild, ßastext, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtitle = πTemp005
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µtitle == πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label6
							}
							goto Label7
							// line 3462: if title is None:
							πF.SetLineno(3462)
						Label6:
							// line 3463: classes1 = node.get('classes')
							πF.SetLineno(3463)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µclasses1 = πTemp002
							if πE = πg.CheckLocal(πF, µclasses1, "classes1"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, µclasses1); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label8
							}
							goto Label9
							// line 3464: if classes1:
							πF.SetLineno(3464)
						Label8:
							// line 3465: title = classes1[0]
							πF.SetLineno(3465)
							πTemp001 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µclasses1, "classes1"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µclasses1, πTemp001); πE != nil {
								continue
							}
							µtitle = πTemp002
							goto Label9
						Label9:
							goto Label7
						Label7:
							// line 3466: self.generate_admonition(node, 'generic', title)
							πF.SetLineno(3466)
							πTemp006 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp006[0] = µnode
							πTemp006[1] = ßgeneric.ToObject()
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							πTemp006[2] = µtitle
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßgenerate_admonition, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_admonition.ToObject(), πTemp233); πE != nil {
						continue
					}
					// line 3468: depart_admonition = depart_warning
					πF.SetLineno(3468)
					if πTemp234, πE = πg.ResolveClass(πF, πClass, nil, ßdepart_warning); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßdepart_admonition.ToObject(), πTemp234); πE != nil {
						continue
					}
					// line 3470: def generate_admonition(self, node, label, title=None):
					πF.SetLineno(3470)
					πTemp003 = make([]πg.Param, 4)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp003[2] = πg.Param{Name: "label", Def: nil}
					if πTemp235, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp003[3] = πg.Param{Name: "title", Def: πTemp235}
					πTemp234 = πg.NewFunction(πg.NewCode("generate_admonition", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µlabel *πg.Object = πArgs[2]
						_ = µlabel
						var µtitle *πg.Object = πArgs[3]
						_ = µtitle
						var µtranslated_label *πg.Object = πg.UnboundLocal
						_ = µtranslated_label
						var µel1 *πg.Object = πg.UnboundLocal
						_ = µel1
						var µs1 *πg.Object = πg.UnboundLocal
						_ = µs1
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Dict
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßlanguage, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ßlabels.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßhasattr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 3471: if hasattr(self.language, 'labels'):
							πF.SetLineno(3471)
						Label1:
							// line 3472: translated_label = self.language.labels.get(label, label)
							πF.SetLineno(3472)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πTemp001[0] = µlabel
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πTemp001[1] = µlabel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßlanguage, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßlabels, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtranslated_label = πTemp003
							goto Label3
						Label2:
							// line 3474: translated_label = label
							πF.SetLineno(3474)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							µtranslated_label = µlabel
							goto Label3
						Label3:
							// line 3475: el1 = SubElement(self.current_element, 'text:p', attrib={
							πF.SetLineno(3475)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcurrent_element, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = πg.NewStr("text:p").ToObject()
							πTemp005 = πg.NewDict()
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = πg.NewStr("admon-%s-hdr").ToObject()
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(µlabel).ToObject()
							πTemp006[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πTemp005.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp002 = πTemp005.ToObject()
							πTemp007 = πg.KWArgs{
								{"attrib", πTemp002},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSubElement); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel1 = πTemp003
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, µtitle); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 3479: if title:
							πF.SetLineno(3479)
						Label4:
							// line 3480: el1.text = title
							πF.SetLineno(3480)
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µtitle); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp002); πE != nil {
								continue
							}
							goto Label6
						Label5:
							// line 3482: el1.text = '%s!' % (translated_label.capitalize(), )
							πF.SetLineno(3482)
							if πE = πg.CheckLocal(πF, µtranslated_label, "translated_label"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µtranslated_label, ßcapitalize, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp008.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple1(πTemp009).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%s!").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µel1, "el1"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µel1, ßtext, πTemp003); πE != nil {
								continue
							}
							goto Label6
						Label6:
							// line 3483: s1 = self.rststyle('admon-%s-body', (label, ))
							πF.SetLineno(3483)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("admon-%s-body").ToObject()
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple1(µlabel).ToObject()
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrststyle, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µs1 = πTemp003
							// line 3484: self.paragraph_style_stack.append(s1)
							πF.SetLineno(3484)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µs1, "s1"); πE != nil {
								continue
							}
							πTemp001[0] = µs1
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparagraph_style_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßgenerate_admonition.ToObject(), πTemp234); πE != nil {
						continue
					}
					// line 3489: def visit_subscript(self, node):
					πF.SetLineno(3489)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp235 = πg.NewFunction(πg.NewCode("visit_subscript", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3490: el = self.append_child('text:span', attrib={
							πF.SetLineno(3490)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:span").ToObject()
							πTemp002 = πg.NewDict()
							if πE = πTemp002.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πg.NewStr("rststyle-subscript").ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp002.ToObject()
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp005
							// line 3493: self.set_current_element(el)
							πF.SetLineno(3493)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_subscript.ToObject(), πTemp235); πE != nil {
						continue
					}
					// line 3495: def depart_subscript(self, node):
					πF.SetLineno(3495)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp236 = πg.NewFunction(πg.NewCode("depart_subscript", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3496: self.set_to_parent()
							πF.SetLineno(3496)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_subscript.ToObject(), πTemp236); πE != nil {
						continue
					}
					// line 3498: def visit_superscript(self, node):
					πF.SetLineno(3498)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp237 = πg.NewFunction(πg.NewCode("visit_superscript", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µel *πg.Object = πg.UnboundLocal
						_ = µel
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Dict
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3499: el = self.append_child('text:span', attrib={
							πF.SetLineno(3499)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("text:span").ToObject()
							πTemp002 = πg.NewDict()
							if πE = πTemp002.SetItem(πF, πg.NewStr("text:style-name").ToObject(), πg.NewStr("rststyle-superscript").ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp002.ToObject()
							πTemp004 = πg.KWArgs{
								{"attrib", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßappend_child, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µel = πTemp005
							// line 3502: self.set_current_element(el)
							πF.SetLineno(3502)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µel, "el"); πE != nil {
								continue
							}
							πTemp001[0] = µel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßset_current_element, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_superscript.ToObject(), πTemp237); πE != nil {
						continue
					}
					// line 3504: def depart_superscript(self, node):
					πF.SetLineno(3504)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp238 = πg.NewFunction(πg.NewCode("depart_superscript", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3505: self.set_to_parent()
							πF.SetLineno(3505)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_to_parent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_superscript.ToObject(), πTemp238); πE != nil {
						continue
					}
					// line 3507: def visit_abbreviation(self, node):
					πF.SetLineno(3507)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp239 = πg.NewFunction(πg.NewCode("visit_abbreviation", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3508: pass
							πF.SetLineno(3508)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_abbreviation.ToObject(), πTemp239); πE != nil {
						continue
					}
					// line 3510: def depart_abbreviation(self, node):
					πF.SetLineno(3510)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp240 = πg.NewFunction(πg.NewCode("depart_abbreviation", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3511: pass
							πF.SetLineno(3511)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_abbreviation.ToObject(), πTemp240); πE != nil {
						continue
					}
					// line 3513: def visit_acronym(self, node):
					πF.SetLineno(3513)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp241 = πg.NewFunction(πg.NewCode("visit_acronym", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3514: pass
							πF.SetLineno(3514)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_acronym.ToObject(), πTemp241); πE != nil {
						continue
					}
					// line 3516: def depart_acronym(self, node):
					πF.SetLineno(3516)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp242 = πg.NewFunction(πg.NewCode("depart_acronym", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3517: pass
							πF.SetLineno(3517)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_acronym.ToObject(), πTemp242); πE != nil {
						continue
					}
					// line 3519: def visit_sidebar(self, node):
					πF.SetLineno(3519)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp243 = πg.NewFunction(πg.NewCode("visit_sidebar", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3520: pass
							πF.SetLineno(3520)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_sidebar.ToObject(), πTemp243); πE != nil {
						continue
					}
					// line 3522: def depart_sidebar(self, node):
					πF.SetLineno(3522)
					πTemp003 = make([]πg.Param, 2)
					πTemp003[0] = πg.Param{Name: "self", Def: nil}
					πTemp003[1] = πg.Param{Name: "node", Def: nil}
					πTemp244 = πg.NewFunction(πg.NewCode("depart_sidebar", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3523: pass
							πF.SetLineno(3523)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_sidebar.ToObject(), πTemp244); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp016, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp016 == nil {
				πTemp016 = πg.TypeType.ToObject()
			}
			if πTemp017, πE = πTemp016.Call(πF, []*πg.Object{πg.NewStr("ODFTranslator").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßODFTranslator.ToObject(), πTemp017); πE != nil {
				continue
			}
			// line 3527: class Reader(standalone.Reader):
			πF.SetLineno(3527)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp017, πE = πg.ResolveGlobal(πF, ßstandalone); πE != nil {
				continue
			}
			if πTemp019, πE = πg.GetAttr(πF, πTemp017, ßReader, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp019
			πTemp008 = πg.NewDict()
			if πTemp015, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp015); πE != nil {
				continue
			}
			_, πE = πg.NewCode("Reader", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 3529: def get_transforms(self):
					πF.SetLineno(3529)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("get_transforms", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µdefault *πg.Object = πg.UnboundLocal
						_ = µdefault
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []πg.Param
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3530: default = standalone.Reader.get_transforms(self)
							πF.SetLineno(3530)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstandalone); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßReader, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßget_transforms, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µdefault = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcreate_links, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 3531: if self.settings.create_links:
							πF.SetLineno(3531)
						Label1:
							// line 3532: return default
							πF.SetLineno(3532)
							if πE = πg.CheckLocal(πF, µdefault, "default"); πE != nil {
								continue
							}
							πR = µdefault
							continue
							goto Label2
						Label2:
							// line 3533: return [i for i in default
							πF.SetLineno(3533)
							πTemp005 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/odf_odt/__init__.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µi *πg.Object = πg.UnboundLocal
								_ = µi
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 bool
								_ = πTemp002
								var πTemp003 bool
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 6:
											goto Label6
										default:
											panic("unexpected function state")
										}
										if πE = πg.CheckLocal(πF, µdefault, "default"); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, µdefault); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp002 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp002 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp003 = !isStop
										} else {
											πTemp003 = true
											µi = πTemp004
										}
										if πE != nil || !πTemp003 {
											continue
										}
										πF.PushCheckpoint(1)
										if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
											continue
										}
										if πTemp005, πE = πg.ResolveGlobal(πF, ßreferences); πE != nil {
											continue
										}
										if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßDanglingReferences, nil); πE != nil {
											continue
										}
										πTemp004 = πg.GetBool(µi != πTemp006).ToObject()
										if πTemp003, πE = πg.IsTrue(πF, πTemp004); πE != nil {
											continue
										}
										if πTemp003 {
											goto Label4
										}
										goto Label5
										// line 3533: return [i for i in default
										πF.SetLineno(3533)
									Label4:
										// line 3533: return [i for i in default
										πF.SetLineno(3533)
										if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
											continue
										}
										πF.PushCheckpoint(6)
										return µi, nil
									Label6:
										πTemp004 = πSent
										goto Label5
									Label5:
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ListType.Call(πF, πg.Args{πTemp006}, nil); πE != nil {
								continue
							}
							πR = πTemp002
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_transforms.ToObject(), πTemp001); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp016, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp016 == nil {
				πTemp016 = πg.TypeType.ToObject()
			}
			if πTemp017, πE = πTemp016.Call(πF, []*πg.Object{πg.NewStr("Reader").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßReader.ToObject(), πTemp017); πE != nil {
				continue
			}
		}
		return nil, πE
	})
	πg.RegisterModule("odf_odt", Code)
}

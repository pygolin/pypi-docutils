package latex2e

import (
	_ "github.com/pygolin/pypi-docutils"
	πg "github.com/pygolin/runtime"
	_ "github.com/pygolin/stdlib/pkg/os"
	_ "github.com/pygolin/stdlib/pkg/re"
	_ "github.com/pygolin/stdlib/pkg/roman"
	_ "github.com/pygolin/stdlib/pkg/string"
	_ "github.com/pygolin/stdlib/pkg/sys"
	_ "github.com/pygolin/stdlib/pkg/urllib"
	_ "github.com/pygolin/stdlib/pkg/urllib/request"
)

var Code *πg.Code

func init() {
	Code = πg.NewCode("<module>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
		var πR *πg.Object
		_ = πR
		var πE *πg.BaseException
		_ = πE
		ß := πg.InternStr("")
		ß0 := πg.InternStr("0")
		ßAdmonitions := πg.InternStr("Admonitions")
		ßAlph := πg.InternStr("Alph")
		ßAssertionError := πg.InternStr("AssertionError")
		ßBCOR := πg.InternStr("BCOR")
		ßBabel := πg.InternStr("Babel")
		ßCharMaps := πg.InternStr("CharMaps")
		ßContents := πg.InternStr("Contents")
		ßDIV := πg.InternStr("DIV")
		ßDUclass := πg.InternStr("DUclass")
		ßDocumentClass := πg.InternStr("DocumentClass")
		ßFalse := πg.InternStr("False")
		ßFileInput := πg.InternStr("FileInput")
		ßIOError := πg.InternStr("IOError")
		ßImportError := πg.InternStr("ImportError")
		ßIndexError := πg.InternStr("IndexError")
		ßKeyError := πg.InternStr("KeyError")
		ßLaTeXTranslator := πg.InternStr("LaTeXTranslator")
		ßNodeVisitor := πg.InternStr("NodeVisitor")
		ßNone := πg.InternStr("None")
		ßNotImplementedError := πg.InternStr("NotImplementedError")
		ßOT1 := πg.InternStr("OT1")
		ßPreambleCmds := πg.InternStr("PreambleCmds")
		ßRoman := πg.InternStr("Roman")
		ßSafeString := πg.InternStr("SafeString")
		ßSkipNode := πg.InternStr("SkipNode")
		ßSortableDict := πg.InternStr("SortableDict")
		ßT1 := πg.InternStr("T1")
		ßT2A := πg.InternStr("T2A")
		ßT2B := πg.InternStr("T2B")
		ßT2C := πg.InternStr("T2C")
		ßT4 := πg.InternStr("T4")
		ßT5 := πg.InternStr("T5")
		ßTable := πg.InternStr("Table")
		ßTemplate := πg.InternStr("Template")
		ßText := πg.InternStr("Text")
		ßTextElement := πg.InternStr("TextElement")
		ßTrue := πg.InternStr("True")
		ßVerbatim := πg.InternStr("Verbatim")
		ßWriter := πg.InternStr("Writer")
		ß_ := πg.InternStr("_")
		ß__call__ := πg.InternStr("__call__")
		ß__class__ := πg.InternStr("__class__")
		ß__doc__ := πg.InternStr("__doc__")
		ß__docformat__ := πg.InternStr("__docformat__")
		ß__file__ := πg.InternStr("__file__")
		ß__init__ := πg.InternStr("__init__")
		ß__metaclass__ := πg.InternStr("__metaclass__")
		ß__module__ := πg.InternStr("__module__")
		ß__name__ := πg.InternStr("__name__")
		ß__static := πg.InternStr("__static")
		ß_attrs := πg.InternStr("_attrs")
		ß_bibitems := πg.InternStr("_bibitems")
		ß_cell_in_row := πg.InternStr("_cell_in_row")
		ß_col_specs := πg.InternStr("_col_specs")
		ß_col_width := πg.InternStr("_col_width")
		ß_destination := πg.InternStr("_destination")
		ß_enumeration_counters := πg.InternStr("_enumeration_counters")
		ß_fontenc := πg.InternStr("_fontenc")
		ß_in_head := πg.InternStr("_in_head")
		ß_in_thead := πg.InternStr("_in_thead")
		ß_inputenc := πg.InternStr("_inputenc")
		ß_latex_type := πg.InternStr("_latex_type")
		ß_max_enumeration_counters := πg.InternStr("_max_enumeration_counters")
		ß_open := πg.InternStr("_open")
		ß_providelength := πg.InternStr("_providelength")
		ß_reference_label := πg.InternStr("_reference_label")
		ß_rowspan := πg.InternStr("_rowspan")
		ß_section_number := πg.InternStr("_section_number")
		ß_textquotedbl := πg.InternStr("_textquotedbl")
		ß_textquotedblOT1 := πg.InternStr("_textquotedblOT1")
		ß_thead_depth := πg.InternStr("_thead_depth")
		ß_translator := πg.InternStr("_translator")
		ß_use_latex_citations := πg.InternStr("_use_latex_citations")
		ß_with_part := πg.InternStr("_with_part")
		ßa4paper := πg.InternStr("a4paper")
		ßabbreviation := πg.InternStr("abbreviation")
		ßabspath := πg.InternStr("abspath")
		ßabstract := πg.InternStr("abstract")
		ßacronym := πg.InternStr("acronym")
		ßaction := πg.InternStr("action")
		ßactive_chars := πg.InternStr("active_chars")
		ßactive_table := πg.InternStr("active_table")
		ßadd := πg.InternStr("add")
		ßaddress := πg.InternStr("address")
		ßadmonition := πg.InternStr("admonition")
		ßaf := πg.InternStr("af")
		ßafrikaans := πg.InternStr("afrikaans")
		ßalbanian := πg.InternStr("albanian")
		ßalign := πg.InternStr("align")
		ßalltt := πg.InternStr("alltt")
		ßalph := πg.InternStr("alph")
		ßamerican := πg.InternStr("american")
		ßamsmath := πg.InternStr("amsmath")
		ßappend := πg.InternStr("append")
		ßappend_hypertargets := πg.InternStr("append_hypertargets")
		ßar := πg.InternStr("ar")
		ßarabic := πg.InternStr("arabic")
		ßarticle := πg.InternStr("article")
		ßascii := πg.InternStr("ascii")
		ßassemble_parts := πg.InternStr("assemble_parts")
		ßastext := πg.InternStr("astext")
		ßattributes := πg.InternStr("attributes")
		ßattribution := πg.InternStr("attribution")
		ßattribution_formats := πg.InternStr("attribution_formats")
		ßattval := πg.InternStr("attval")
		ßaustralian := πg.InternStr("australian")
		ßaustrian := πg.InternStr("austrian")
		ßauthor := πg.InternStr("author")
		ßauthor_separator := πg.InternStr("author_separator")
		ßauthor_separators := πg.InternStr("author_separators")
		ßauthor_stack := πg.InternStr("author_stack")
		ßauto := πg.InternStr("auto")
		ßbabel := πg.InternStr("babel")
		ßbackrefs := πg.InternStr("backrefs")
		ßbahasai := πg.InternStr("bahasai")
		ßbahasam := πg.InternStr("bahasam")
		ßbasque := πg.InternStr("basque")
		ßbg := πg.InternStr("bg")
		ßbibtex := πg.InternStr("bibtex")
		ßblue := πg.InternStr("blue")
		ßbody := πg.InternStr("body")
		ßbody_pre_docinfo := πg.InternStr("body_pre_docinfo")
		ßbook := πg.InternStr("book")
		ßbooktabs := πg.InternStr("booktabs")
		ßborderless := πg.InternStr("borderless")
		ßborders := πg.InternStr("borders")
		ßbottom := πg.InternStr("bottom")
		ßbr := πg.InternStr("br")
		ßbrackets := πg.InternStr("brackets")
		ßbrazil := πg.InternStr("brazil")
		ßbreton := πg.InternStr("breton")
		ßbritish := πg.InternStr("british")
		ßbulgarian := πg.InternStr("bulgarian")
		ßc := πg.InternStr("c")
		ßca := πg.InternStr("ca")
		ßcanadian := πg.InternStr("canadian")
		ßcanadien := πg.InternStr("canadien")
		ßcaption := πg.InternStr("caption")
		ßcatalan := πg.InternStr("catalan")
		ßcenter := πg.InternStr("center")
		ßchapter := πg.InternStr("chapter")
		ßchoices := πg.InternStr("choices")
		ßcitation := πg.InternStr("citation")
		ßcitation_reference := πg.InternStr("citation_reference")
		ßclasses := πg.InternStr("classes")
		ßclose := πg.InternStr("close")
		ßcode := πg.InternStr("code")
		ßcolor := πg.InternStr("color")
		ßcolwidth := πg.InternStr("colwidth")
		ßcolwidths_auto := πg.InternStr("colwidths_auto")
		ßcompile := πg.InternStr("compile")
		ßcompound := πg.InternStr("compound")
		ßcompound_enumerators := πg.InternStr("compound_enumerators")
		ßconfig_section := πg.InternStr("config_section")
		ßconfig_section_dependencies := πg.InternStr("config_section_dependencies")
		ßcontact := πg.InternStr("contact")
		ßcontents := πg.InternStr("contents")
		ßcontext := πg.InternStr("context")
		ßcopy := πg.InternStr("copy")
		ßcopyright := πg.InternStr("copyright")
		ßcp1250 := πg.InternStr("cp1250")
		ßcp1251 := πg.InternStr("cp1251")
		ßcp1252 := πg.InternStr("cp1252")
		ßcroatian := πg.InternStr("croatian")
		ßcs := πg.InternStr("cs")
		ßcy := πg.InternStr("cy")
		ßczech := πg.InternStr("czech")
		ßd_class := πg.InternStr("d_class")
		ßda := πg.InternStr("da")
		ßdanish := πg.InternStr("danish")
		ßdash := πg.InternStr("dash")
		ßdate := πg.InternStr("date")
		ßde := πg.InternStr("de")
		ßdedication := πg.InternStr("dedication")
		ßdefault := πg.InternStr("default")
		ßdefault_preamble := πg.InternStr("default_preamble")
		ßdefault_template := πg.InternStr("default_template")
		ßdefault_template_path := πg.InternStr("default_template_path")
		ßdelimiter := πg.InternStr("delimiter")
		ßdepart_Text := πg.InternStr("depart_Text")
		ßdepart_abbreviation := πg.InternStr("depart_abbreviation")
		ßdepart_acronym := πg.InternStr("depart_acronym")
		ßdepart_address := πg.InternStr("depart_address")
		ßdepart_admonition := πg.InternStr("depart_admonition")
		ßdepart_attribution := πg.InternStr("depart_attribution")
		ßdepart_author := πg.InternStr("depart_author")
		ßdepart_authors := πg.InternStr("depart_authors")
		ßdepart_block_quote := πg.InternStr("depart_block_quote")
		ßdepart_bullet_list := πg.InternStr("depart_bullet_list")
		ßdepart_caption := πg.InternStr("depart_caption")
		ßdepart_citation := πg.InternStr("depart_citation")
		ßdepart_citation_reference := πg.InternStr("depart_citation_reference")
		ßdepart_classifier := πg.InternStr("depart_classifier")
		ßdepart_colspec := πg.InternStr("depart_colspec")
		ßdepart_comment := πg.InternStr("depart_comment")
		ßdepart_compound := πg.InternStr("depart_compound")
		ßdepart_contact := πg.InternStr("depart_contact")
		ßdepart_container := πg.InternStr("depart_container")
		ßdepart_copyright := πg.InternStr("depart_copyright")
		ßdepart_date := πg.InternStr("depart_date")
		ßdepart_decoration := πg.InternStr("depart_decoration")
		ßdepart_definition := πg.InternStr("depart_definition")
		ßdepart_definition_list := πg.InternStr("depart_definition_list")
		ßdepart_definition_list_item := πg.InternStr("depart_definition_list_item")
		ßdepart_description := πg.InternStr("depart_description")
		ßdepart_docinfo := πg.InternStr("depart_docinfo")
		ßdepart_docinfo_item := πg.InternStr("depart_docinfo_item")
		ßdepart_doctest_block := πg.InternStr("depart_doctest_block")
		ßdepart_document := πg.InternStr("depart_document")
		ßdepart_emphasis := πg.InternStr("depart_emphasis")
		ßdepart_entry := πg.InternStr("depart_entry")
		ßdepart_enumerated_list := πg.InternStr("depart_enumerated_list")
		ßdepart_field := πg.InternStr("depart_field")
		ßdepart_field_body := πg.InternStr("depart_field_body")
		ßdepart_field_list := πg.InternStr("depart_field_list")
		ßdepart_field_name := πg.InternStr("depart_field_name")
		ßdepart_figure := πg.InternStr("depart_figure")
		ßdepart_footer := πg.InternStr("depart_footer")
		ßdepart_footnote := πg.InternStr("depart_footnote")
		ßdepart_footnote_reference := πg.InternStr("depart_footnote_reference")
		ßdepart_generated := πg.InternStr("depart_generated")
		ßdepart_header := πg.InternStr("depart_header")
		ßdepart_image := πg.InternStr("depart_image")
		ßdepart_inline := πg.InternStr("depart_inline")
		ßdepart_label := πg.InternStr("depart_label")
		ßdepart_legend := πg.InternStr("depart_legend")
		ßdepart_line := πg.InternStr("depart_line")
		ßdepart_line_block := πg.InternStr("depart_line_block")
		ßdepart_list_item := πg.InternStr("depart_list_item")
		ßdepart_literal := πg.InternStr("depart_literal")
		ßdepart_literal_block := πg.InternStr("depart_literal_block")
		ßdepart_math := πg.InternStr("depart_math")
		ßdepart_math_block := πg.InternStr("depart_math_block")
		ßdepart_option := πg.InternStr("depart_option")
		ßdepart_option_argument := πg.InternStr("depart_option_argument")
		ßdepart_option_group := πg.InternStr("depart_option_group")
		ßdepart_option_list := πg.InternStr("depart_option_list")
		ßdepart_option_list_item := πg.InternStr("depart_option_list_item")
		ßdepart_option_string := πg.InternStr("depart_option_string")
		ßdepart_organization := πg.InternStr("depart_organization")
		ßdepart_paragraph := πg.InternStr("depart_paragraph")
		ßdepart_problematic := πg.InternStr("depart_problematic")
		ßdepart_raw := πg.InternStr("depart_raw")
		ßdepart_reference := πg.InternStr("depart_reference")
		ßdepart_revision := πg.InternStr("depart_revision")
		ßdepart_row := πg.InternStr("depart_row")
		ßdepart_rubric := πg.InternStr("depart_rubric")
		ßdepart_section := πg.InternStr("depart_section")
		ßdepart_sidebar := πg.InternStr("depart_sidebar")
		ßdepart_status := πg.InternStr("depart_status")
		ßdepart_strong := πg.InternStr("depart_strong")
		ßdepart_subscript := πg.InternStr("depart_subscript")
		ßdepart_subtitle := πg.InternStr("depart_subtitle")
		ßdepart_superscript := πg.InternStr("depart_superscript")
		ßdepart_system_message := πg.InternStr("depart_system_message")
		ßdepart_table := πg.InternStr("depart_table")
		ßdepart_target := πg.InternStr("depart_target")
		ßdepart_tbody := πg.InternStr("depart_tbody")
		ßdepart_term := πg.InternStr("depart_term")
		ßdepart_tgroup := πg.InternStr("depart_tgroup")
		ßdepart_thead := πg.InternStr("depart_thead")
		ßdepart_title := πg.InternStr("depart_title")
		ßdepart_title_reference := πg.InternStr("depart_title_reference")
		ßdepart_topic := πg.InternStr("depart_topic")
		ßdepart_transition := πg.InternStr("depart_transition")
		ßdepart_version := πg.InternStr("depart_version")
		ßdepth := πg.InternStr("depth")
		ßdescription := πg.InternStr("description")
		ßdest := πg.InternStr("dest")
		ßdict := πg.InternStr("dict")
		ßdirname := πg.InternStr("dirname")
		ßdocinfo := πg.InternStr("docinfo")
		ßdocument := πg.InternStr("document")
		ßdocument_class := πg.InternStr("document_class")
		ßdocumentclass := πg.InternStr("documentclass")
		ßdocumentoptions := πg.InternStr("documentoptions")
		ßdocumentsubtitle := πg.InternStr("documentsubtitle")
		ßdocutils_footnotes := πg.InternStr("docutils_footnotes")
		ßdsb := πg.InternStr("dsb")
		ßduclass := πg.InternStr("duclass")
		ßduclass_close := πg.InternStr("duclass_close")
		ßduclass_open := πg.InternStr("duclass_open")
		ßdutch := πg.InternStr("dutch")
		ßel := πg.InternStr("el")
		ßembed_stylesheet := πg.InternStr("embed_stylesheet")
		ßen := πg.InternStr("en")
		ßencode := πg.InternStr("encode")
		ßendswith := πg.InternStr("endswith")
		ßenglish := πg.InternStr("english")
		ßenum := πg.InternStr("enum")
		ßenumerate := πg.InternStr("enumerate")
		ßenumtype := πg.InternStr("enumtype")
		ßeo := πg.InternStr("eo")
		ßerror := πg.InternStr("error")
		ßes := πg.InternStr("es")
		ßesperanto := πg.InternStr("esperanto")
		ßestonian := πg.InternStr("estonian")
		ßet := πg.InternStr("et")
		ßeu := πg.InternStr("eu")
		ßextend := πg.InternStr("extend")
		ßfallbacks := πg.InternStr("fallbacks")
		ßfalse := πg.InternStr("false")
		ßfi := πg.InternStr("fi")
		ßfieldlist := πg.InternStr("fieldlist")
		ßfigure := πg.InternStr("figure")
		ßfilter := πg.InternStr("filter")
		ßfind := πg.InternStr("find")
		ßfinnish := πg.InternStr("finnish")
		ßfloat := πg.InternStr("float")
		ßfloat_settings := πg.InternStr("float_settings")
		ßfont_encoding := πg.InternStr("font_encoding")
		ßfootnote := πg.InternStr("footnote")
		ßfootnote_references := πg.InternStr("footnote_references")
		ßfootnotes := πg.InternStr("footnotes")
		ßformat := πg.InternStr("format")
		ßfr := πg.InternStr("fr")
		ßfrench := πg.InternStr("french")
		ßfrontend := πg.InternStr("frontend")
		ßga := πg.InternStr("ga")
		ßgalician := πg.InternStr("galician")
		ßgerman := πg.InternStr("german")
		ßget := πg.InternStr("get")
		ßget_caption := πg.InternStr("get_caption")
		ßget_closing := πg.InternStr("get_closing")
		ßget_colspecs := πg.InternStr("get_colspecs")
		ßget_column_width := πg.InternStr("get_column_width")
		ßget_entry_number := πg.InternStr("get_entry_number")
		ßget_language := πg.InternStr("get_language")
		ßget_latex_type := πg.InternStr("get_latex_type")
		ßget_multicolumn_width := πg.InternStr("get_multicolumn_width")
		ßget_opening := πg.InternStr("get_opening")
		ßget_rowspan := πg.InternStr("get_rowspan")
		ßget_stylesheet_list := πg.InternStr("get_stylesheet_list")
		ßget_transforms := πg.InternStr("get_transforms")
		ßget_vertical_bar := πg.InternStr("get_vertical_bar")
		ßgetattr := πg.InternStr("getattr")
		ßgl := πg.InternStr("gl")
		ßgraphicx := πg.InternStr("graphicx")
		ßgraphicx_auto := πg.InternStr("graphicx_auto")
		ßgraphicx_option := πg.InternStr("graphicx_option")
		ßgraphicx_package := πg.InternStr("graphicx_package")
		ßgreek := πg.InternStr("greek")
		ßgroups := πg.InternStr("groups")
		ßhas_latex_toc := πg.InternStr("has_latex_toc")
		ßhas_unbalanced_braces := πg.InternStr("has_unbalanced_braces")
		ßhasattr := πg.InternStr("hasattr")
		ßhe := πg.InternStr("he")
		ßhead_parts := πg.InternStr("head_parts")
		ßhead_prefix := πg.InternStr("head_prefix")
		ßhebrew := πg.InternStr("hebrew")
		ßheight := πg.InternStr("height")
		ßhighlight_rules := πg.InternStr("highlight_rules")
		ßhr := πg.InternStr("hr")
		ßhsb := πg.InternStr("hsb")
		ßhu := πg.InternStr("hu")
		ßhyperlink_color := πg.InternStr("hyperlink_color")
		ßhyperref_options := πg.InternStr("hyperref_options")
		ßia := πg.InternStr("ia")
		ßibycus := πg.InternStr("ibycus")
		ßicelandic := πg.InternStr("icelandic")
		ßid := πg.InternStr("id")
		ßids := πg.InternStr("ids")
		ßids_to_labels := πg.InternStr("ids_to_labels")
		ßindex := πg.InternStr("index")
		ßinline := πg.InternStr("inline")
		ßinsert := πg.InternStr("insert")
		ßinsert_additional_table_colum_delimiters := πg.InternStr("insert_additional_table_colum_delimiters")
		ßinsert_align_declaration := πg.InternStr("insert_align_declaration")
		ßinsert_newline := πg.InternStr("insert_newline")
		ßinsert_non_breaking_blanks := πg.InternStr("insert_non_breaking_blanks")
		ßinside_citation_reference_label := πg.InternStr("inside_citation_reference_label")
		ßinterlingua := πg.InternStr("interlingua")
		ßio := πg.InternStr("io")
		ßirish := πg.InternStr("irish")
		ßis := πg.InternStr("is")
		ßis_inline := πg.InternStr("is_inline")
		ßis_open := πg.InternStr("is_open")
		ßis_plaintext := πg.InternStr("is_plaintext")
		ßis_stub_column := πg.InternStr("is_stub_column")
		ßis_toc_list := πg.InternStr("is_toc_list")
		ßis_xetex := πg.InternStr("is_xetex")
		ßisinstance := πg.InternStr("isinstance")
		ßiso88595 := πg.InternStr("iso88595")
		ßit := πg.InternStr("it")
		ßitalian := πg.InternStr("italian")
		ßitems := πg.InternStr("items")
		ßja := πg.InternStr("ja")
		ßjapanese := πg.InternStr("japanese")
		ßjoin := πg.InternStr("join")
		ßkazakh := πg.InternStr("kazakh")
		ßkeys := πg.InternStr("keys")
		ßkk := πg.InternStr("kk")
		ßl := πg.InternStr("l")
		ßla := πg.InternStr("la")
		ßlabel_delim := πg.InternStr("label_delim")
		ßlabels := πg.InternStr("labels")
		ßlanguage := πg.InternStr("language")
		ßlanguage_code := πg.InternStr("language_code")
		ßlanguage_codes := πg.InternStr("language_codes")
		ßlanguage_label := πg.InternStr("language_label")
		ßlanguage_module := πg.InternStr("language_module")
		ßlanguage_name := πg.InternStr("language_name")
		ßlanguages := πg.InternStr("languages")
		ßlatex := πg.InternStr("latex")
		ßlatex2e := πg.InternStr("latex2e")
		ßlatex_encoding := πg.InternStr("latex_encoding")
		ßlatex_preamble := πg.InternStr("latex_preamble")
		ßlatin := πg.InternStr("latin")
		ßlatin1 := πg.InternStr("latin1")
		ßlatin2 := πg.InternStr("latin2")
		ßlatin3 := πg.InternStr("latin3")
		ßlatin4 := πg.InternStr("latin4")
		ßlatin5 := πg.InternStr("latin5")
		ßlatin9 := πg.InternStr("latin9")
		ßlatvian := πg.InternStr("latvian")
		ßleft := πg.InternStr("left")
		ßlegend := πg.InternStr("legend")
		ßlen := πg.InternStr("len")
		ßlevel := πg.InternStr("level")
		ßline := πg.InternStr("line")
		ßline_block := πg.InternStr("line_block")
		ßlineblock := πg.InternStr("lineblock")
		ßlinking := πg.InternStr("linking")
		ßlist_item := πg.InternStr("list_item")
		ßlisting := πg.InternStr("listing")
		ßliteral := πg.InternStr("literal")
		ßliteral_block := πg.InternStr("literal_block")
		ßliteral_block_env := πg.InternStr("literal_block_env")
		ßliteral_block_options := πg.InternStr("literal_block_options")
		ßlithuanian := πg.InternStr("lithuanian")
		ßlocal := πg.InternStr("local")
		ßlongtable := πg.InternStr("longtable")
		ßlower := πg.InternStr("lower")
		ßloweralpha := πg.InternStr("loweralpha")
		ßlowerroman := πg.InternStr("lowerroman")
		ßlowersorbian := πg.InternStr("lowersorbian")
		ßlstlisting := πg.InternStr("lstlisting")
		ßlstrip := πg.InternStr("lstrip")
		ßlt := πg.InternStr("lt")
		ßlv := πg.InternStr("lv")
		ßmac_cyrillic := πg.InternStr("mac_cyrillic")
		ßmaccyr := πg.InternStr("maccyr")
		ßmagyar := πg.InternStr("magyar")
		ßmatch := πg.InternStr("match")
		ßmax := πg.InternStr("max")
		ßmemoir := πg.InternStr("memoir")
		ßmetavar := πg.InternStr("metavar")
		ßmiddle := πg.InternStr("middle")
		ßmin := πg.InternStr("min")
		ßmini := πg.InternStr("mini")
		ßminitoc := πg.InternStr("minitoc")
		ßmn := πg.InternStr("mn")
		ßmongolian := πg.InternStr("mongolian")
		ßmorecols := πg.InternStr("morecols")
		ßmorerows := πg.InternStr("morerows")
		ßms := πg.InternStr("ms")
		ßmultirow := πg.InternStr("multirow")
		ßnameids := πg.InternStr("nameids")
		ßnames := πg.InternStr("names")
		ßnaustrian := πg.InternStr("naustrian")
		ßnb := πg.InternStr("nb")
		ßneed_recurse := πg.InternStr("need_recurse")
		ßnewzealand := πg.InternStr("newzealand")
		ßnext_node := πg.InternStr("next_node")
		ßngerman := πg.InternStr("ngerman")
		ßnl := πg.InternStr("nl")
		ßnn := πg.InternStr("nn")
		ßno := πg.InternStr("no")
		ßnodes := πg.InternStr("nodes")
		ßnolines := πg.InternStr("nolines")
		ßnone := πg.InternStr("none")
		ßnormalize_language_tag := πg.InternStr("normalize_language_tag")
		ßnorsk := πg.InternStr("norsk")
		ßnynorsk := πg.InternStr("nynorsk")
		ßobject := πg.InternStr("object")
		ßopen := πg.InternStr("open")
		ßoptionlist := πg.InternStr("optionlist")
		ßord := πg.InternStr("ord")
		ßorganization := πg.InternStr("organization")
		ßos := πg.InternStr("os")
		ßotherlanguages := πg.InternStr("otherlanguages")
		ßout := πg.InternStr("out")
		ßout_stack := πg.InternStr("out_stack")
		ßoutput := πg.InternStr("output")
		ßoutput_encoding := πg.InternStr("output_encoding")
		ßoverrides := πg.InternStr("overrides")
		ßparagraph := πg.InternStr("paragraph")
		ßparens := πg.InternStr("parens")
		ßparent := πg.InternStr("parent")
		ßparentheses := πg.InternStr("parentheses")
		ßpart := πg.InternStr("part")
		ßparts := πg.InternStr("parts")
		ßpath := πg.InternStr("path")
		ßpdfauthor := πg.InternStr("pdfauthor")
		ßpdfinfo := πg.InternStr("pdfinfo")
		ßpdfsetup := πg.InternStr("pdfsetup")
		ßpick_math_environment := πg.InternStr("pick_math_environment")
		ßpifont := πg.InternStr("pifont")
		ßpl := πg.InternStr("pl")
		ßpolish := πg.InternStr("polish")
		ßpolutonikogreek := πg.InternStr("polutonikogreek")
		ßpop := πg.InternStr("pop")
		ßpop_output_collector := πg.InternStr("pop_output_collector")
		ßportuges := πg.InternStr("portuges")
		ßprefix := πg.InternStr("prefix")
		ßprovidelength := πg.InternStr("providelength")
		ßpt := πg.InternStr("pt")
		ßpush_output_collector := πg.InternStr("push_output_collector")
		ßpx := πg.InternStr("px")
		ßr := πg.InternStr("r")
		ßrange := πg.InternStr("range")
		ßrb := πg.InternStr("rb")
		ßre := πg.InternStr("re")
		ßreStructuredText := πg.InternStr("reStructuredText")
		ßread := πg.InternStr("read")
		ßrecord_dependencies := πg.InternStr("record_dependencies")
		ßreference_label := πg.InternStr("reference_label")
		ßrefid := πg.InternStr("refid")
		ßrefname := πg.InternStr("refname")
		ßrefuri := πg.InternStr("refuri")
		ßrelative_path := πg.InternStr("relative_path")
		ßreplace := πg.InternStr("replace")
		ßreport := πg.InternStr("report")
		ßreporter := πg.InternStr("reporter")
		ßrequirements := πg.InternStr("requirements")
		ßreverse := πg.InternStr("reverse")
		ßreversed := πg.InternStr("reversed")
		ßrevision := πg.InternStr("revision")
		ßright := πg.InternStr("right")
		ßro := πg.InternStr("ro")
		ßroman := πg.InternStr("roman")
		ßromanian := πg.InternStr("romanian")
		ßru := πg.InternStr("ru")
		ßrubric := πg.InternStr("rubric")
		ßrussian := πg.InternStr("russian")
		ßsamin := πg.InternStr("samin")
		ßscale := πg.InternStr("scale")
		ßscr := πg.InternStr("scr")
		ßscrbook := πg.InternStr("scrbook")
		ßscrreprt := πg.InternStr("scrreprt")
		ßse := πg.InternStr("se")
		ßsecnumdepth := πg.InternStr("secnumdepth")
		ßsect := πg.InternStr("sect")
		ßsection := πg.InternStr("section")
		ßsection_enumerator_separator := πg.InternStr("section_enumerator_separator")
		ßsection_level := πg.InternStr("section_level")
		ßsection_prefix_for_enumerators := πg.InternStr("section_prefix_for_enumerators")
		ßsections := πg.InternStr("sections")
		ßsectnum_depth := πg.InternStr("sectnum_depth")
		ßsectnum_start := πg.InternStr("sectnum_start")
		ßsectnum_xform := πg.InternStr("sectnum_xform")
		ßserbian := πg.InternStr("serbian")
		ßserbianc := πg.InternStr("serbianc")
		ßset := πg.InternStr("set")
		ßset_align_from_classes := πg.InternStr("set_align_from_classes")
		ßset_rowspan := πg.InternStr("set_rowspan")
		ßset_table_style := πg.InternStr("set_table_style")
		ßsetattr := πg.InternStr("setattr")
		ßsettings := πg.InternStr("settings")
		ßsettings_defaults := πg.InternStr("settings_defaults")
		ßsettings_spec := πg.InternStr("settings_spec")
		ßsetup := πg.InternStr("setup")
		ßsidebar := πg.InternStr("sidebar")
		ßsk := πg.InternStr("sk")
		ßsl := πg.InternStr("sl")
		ßslovak := πg.InternStr("slovak")
		ßslovene := πg.InternStr("slovene")
		ßsorted := πg.InternStr("sorted")
		ßsortedkeys := πg.InternStr("sortedkeys")
		ßsortedvalues := πg.InternStr("sortedvalues")
		ßsource := πg.InternStr("source")
		ßspanish := πg.InternStr("spanish")
		ßspecial := πg.InternStr("special")
		ßsplit := πg.InternStr("split")
		ßsplitext := πg.InternStr("splitext")
		ßsq := πg.InternStr("sq")
		ßsr := πg.InternStr("sr")
		ßstandard := πg.InternStr("standard")
		ßstart := πg.InternStr("start")
		ßstartswith := πg.InternStr("startswith")
		ßstatus := πg.InternStr("status")
		ßstderr := πg.InternStr("stderr")
		ßstore_false := πg.InternStr("store_false")
		ßstore_true := πg.InternStr("store_true")
		ßstr := πg.InternStr("str")
		ßstrerror := πg.InternStr("strerror")
		ßstring := πg.InternStr("string")
		ßstrip := πg.InternStr("strip")
		ßstub := πg.InternStr("stub")
		ßstubs := πg.InternStr("stubs")
		ßstylesheet := πg.InternStr("stylesheet")
		ßstylesheet_call := πg.InternStr("stylesheet_call")
		ßstylesheet_path := πg.InternStr("stylesheet_path")
		ßsub := πg.InternStr("sub")
		ßsubparagraph := πg.InternStr("subparagraph")
		ßsubsection := πg.InternStr("subsection")
		ßsubstitute := πg.InternStr("substitute")
		ßsubsubsection := πg.InternStr("subsubsection")
		ßsubtitle := πg.InternStr("subtitle")
		ßsubtitle_labels := πg.InternStr("subtitle_labels")
		ßsuffix := πg.InternStr("suffix")
		ßsum := πg.InternStr("sum")
		ßsuperscript := πg.InternStr("superscript")
		ßsupported := πg.InternStr("supported")
		ßsv := πg.InternStr("sv")
		ßswedish := πg.InternStr("swedish")
		ßsyntax_highlight := πg.InternStr("syntax_highlight")
		ßsys := πg.InternStr("sys")
		ßtab_width := πg.InternStr("tab_width")
		ßtable := πg.InternStr("table")
		ßtable_stack := πg.InternStr("table_stack")
		ßtable_style := πg.InternStr("table_style")
		ßtable_style_values := πg.InternStr("table_style_values")
		ßtabular := πg.InternStr("tabular")
		ßtabularx := πg.InternStr("tabularx")
		ßtagname := πg.InternStr("tagname")
		ßtemplate := πg.InternStr("template")
		ßtextcomp := πg.InternStr("textcomp")
		ßtextsubscript := πg.InternStr("textsubscript")
		ßthead := πg.InternStr("thead")
		ßthead_depth := πg.InternStr("thead_depth")
		ßtitle := πg.InternStr("title")
		ßtitle_labels := πg.InternStr("title_labels")
		ßtitledata := πg.InternStr("titledata")
		ßtitlereference := πg.InternStr("titlereference")
		ßtoRoman := πg.InternStr("toRoman")
		ßto_latex_encoding := πg.InternStr("to_latex_encoding")
		ßto_latex_length := πg.InternStr("to_latex_length")
		ßtop := πg.InternStr("top")
		ßtopic := πg.InternStr("topic")
		ßtr := πg.InternStr("tr")
		ßtransition := πg.InternStr("transition")
		ßtranslate := πg.InternStr("translate")
		ßtranslator_class := πg.InternStr("translator_class")
		ßtrim_footnote_reference_space := πg.InternStr("trim_footnote_reference_space")
		ßttem := πg.InternStr("ttem")
		ßturkish := πg.InternStr("turkish")
		ßtype := πg.InternStr("type")
		ßtypearea := πg.InternStr("typearea")
		ßuk := πg.InternStr("uk")
		ßukrainian := πg.InternStr("ukrainian")
		ßuni2tex_table := πg.InternStr("uni2tex_table")
		ßunichar2tex := πg.InternStr("unichar2tex")
		ßunicode := πg.InternStr("unicode")
		ßunimplemented_visit := πg.InternStr("unimplemented_visit")
		ßunsupported_unicode := πg.InternStr("unsupported_unicode")
		ßupdate := πg.InternStr("update")
		ßupperalpha := πg.InternStr("upperalpha")
		ßupperroman := πg.InternStr("upperroman")
		ßuppersorbian := πg.InternStr("uppersorbian")
		ßuri := πg.InternStr("uri")
		ßurl2pathname := πg.InternStr("url2pathname")
		ßuse_bibtex := πg.InternStr("use_bibtex")
		ßuse_latex_abstract := πg.InternStr("use_latex_abstract")
		ßuse_latex_citations := πg.InternStr("use_latex_citations")
		ßuse_latex_docinfo := πg.InternStr("use_latex_docinfo")
		ßuse_latex_toc := πg.InternStr("use_latex_toc")
		ßuse_part_section := πg.InternStr("use_part_section")
		ßuse_verbatim_when_possible := πg.InternStr("use_verbatim_when_possible")
		ßutf8 := πg.InternStr("utf8")
		ßutf8_supported_unicode := πg.InternStr("utf8_supported_unicode")
		ßutils := πg.InternStr("utils")
		ßvalidate_boolean := πg.InternStr("validate_boolean")
		ßvalidate_comma_separated_list := πg.InternStr("validate_comma_separated_list")
		ßvalidator := πg.InternStr("validator")
		ßverbatim := πg.InternStr("verbatim")
		ßverbatimtab := πg.InternStr("verbatimtab")
		ßversion := πg.InternStr("version")
		ßversion_info := πg.InternStr("version_info")
		ßvi := πg.InternStr("vi")
		ßvietnam := πg.InternStr("vietnam")
		ßvisit_Text := πg.InternStr("visit_Text")
		ßvisit_abbreviation := πg.InternStr("visit_abbreviation")
		ßvisit_acronym := πg.InternStr("visit_acronym")
		ßvisit_address := πg.InternStr("visit_address")
		ßvisit_admonition := πg.InternStr("visit_admonition")
		ßvisit_attribution := πg.InternStr("visit_attribution")
		ßvisit_author := πg.InternStr("visit_author")
		ßvisit_authors := πg.InternStr("visit_authors")
		ßvisit_block_quote := πg.InternStr("visit_block_quote")
		ßvisit_bullet_list := πg.InternStr("visit_bullet_list")
		ßvisit_caption := πg.InternStr("visit_caption")
		ßvisit_citation := πg.InternStr("visit_citation")
		ßvisit_citation_reference := πg.InternStr("visit_citation_reference")
		ßvisit_classifier := πg.InternStr("visit_classifier")
		ßvisit_colspec := πg.InternStr("visit_colspec")
		ßvisit_comment := πg.InternStr("visit_comment")
		ßvisit_compound := πg.InternStr("visit_compound")
		ßvisit_contact := πg.InternStr("visit_contact")
		ßvisit_container := πg.InternStr("visit_container")
		ßvisit_copyright := πg.InternStr("visit_copyright")
		ßvisit_date := πg.InternStr("visit_date")
		ßvisit_decoration := πg.InternStr("visit_decoration")
		ßvisit_definition := πg.InternStr("visit_definition")
		ßvisit_definition_list := πg.InternStr("visit_definition_list")
		ßvisit_definition_list_item := πg.InternStr("visit_definition_list_item")
		ßvisit_description := πg.InternStr("visit_description")
		ßvisit_docinfo := πg.InternStr("visit_docinfo")
		ßvisit_docinfo_item := πg.InternStr("visit_docinfo_item")
		ßvisit_doctest_block := πg.InternStr("visit_doctest_block")
		ßvisit_document := πg.InternStr("visit_document")
		ßvisit_emphasis := πg.InternStr("visit_emphasis")
		ßvisit_entry := πg.InternStr("visit_entry")
		ßvisit_enumerated_list := πg.InternStr("visit_enumerated_list")
		ßvisit_field := πg.InternStr("visit_field")
		ßvisit_field_body := πg.InternStr("visit_field_body")
		ßvisit_field_list := πg.InternStr("visit_field_list")
		ßvisit_field_name := πg.InternStr("visit_field_name")
		ßvisit_figure := πg.InternStr("visit_figure")
		ßvisit_footer := πg.InternStr("visit_footer")
		ßvisit_footnote := πg.InternStr("visit_footnote")
		ßvisit_footnote_reference := πg.InternStr("visit_footnote_reference")
		ßvisit_generated := πg.InternStr("visit_generated")
		ßvisit_header := πg.InternStr("visit_header")
		ßvisit_image := πg.InternStr("visit_image")
		ßvisit_inline := πg.InternStr("visit_inline")
		ßvisit_label := πg.InternStr("visit_label")
		ßvisit_legend := πg.InternStr("visit_legend")
		ßvisit_line := πg.InternStr("visit_line")
		ßvisit_line_block := πg.InternStr("visit_line_block")
		ßvisit_list_item := πg.InternStr("visit_list_item")
		ßvisit_literal := πg.InternStr("visit_literal")
		ßvisit_literal_block := πg.InternStr("visit_literal_block")
		ßvisit_math := πg.InternStr("visit_math")
		ßvisit_math_block := πg.InternStr("visit_math_block")
		ßvisit_option := πg.InternStr("visit_option")
		ßvisit_option_argument := πg.InternStr("visit_option_argument")
		ßvisit_option_group := πg.InternStr("visit_option_group")
		ßvisit_option_list := πg.InternStr("visit_option_list")
		ßvisit_option_list_item := πg.InternStr("visit_option_list_item")
		ßvisit_option_string := πg.InternStr("visit_option_string")
		ßvisit_organization := πg.InternStr("visit_organization")
		ßvisit_paragraph := πg.InternStr("visit_paragraph")
		ßvisit_problematic := πg.InternStr("visit_problematic")
		ßvisit_raw := πg.InternStr("visit_raw")
		ßvisit_reference := πg.InternStr("visit_reference")
		ßvisit_revision := πg.InternStr("visit_revision")
		ßvisit_row := πg.InternStr("visit_row")
		ßvisit_rubric := πg.InternStr("visit_rubric")
		ßvisit_section := πg.InternStr("visit_section")
		ßvisit_sidebar := πg.InternStr("visit_sidebar")
		ßvisit_status := πg.InternStr("visit_status")
		ßvisit_strong := πg.InternStr("visit_strong")
		ßvisit_subscript := πg.InternStr("visit_subscript")
		ßvisit_substitution_definition := πg.InternStr("visit_substitution_definition")
		ßvisit_substitution_reference := πg.InternStr("visit_substitution_reference")
		ßvisit_subtitle := πg.InternStr("visit_subtitle")
		ßvisit_superscript := πg.InternStr("visit_superscript")
		ßvisit_system_message := πg.InternStr("visit_system_message")
		ßvisit_table := πg.InternStr("visit_table")
		ßvisit_target := πg.InternStr("visit_target")
		ßvisit_tbody := πg.InternStr("visit_tbody")
		ßvisit_term := πg.InternStr("visit_term")
		ßvisit_tgroup := πg.InternStr("visit_tgroup")
		ßvisit_thead := πg.InternStr("visit_thead")
		ßvisit_title := πg.InternStr("visit_title")
		ßvisit_title_reference := πg.InternStr("visit_title_reference")
		ßvisit_topic := πg.InternStr("visit_topic")
		ßvisit_transition := πg.InternStr("visit_transition")
		ßvisit_version := πg.InternStr("visit_version")
		ßvisitor_attributes := πg.InternStr("visitor_attributes")
		ßwalkabout := πg.InternStr("walkabout")
		ßwarn := πg.InternStr("warn")
		ßwarn_msg := πg.InternStr("warn_msg")
		ßwarning := πg.InternStr("warning")
		ßwelsh := πg.InternStr("welsh")
		ßwidth := πg.InternStr("width")
		ßwrite := πg.InternStr("write")
		ßwriter_aux := πg.InternStr("writer_aux")
		ßwriters := πg.InternStr("writers")
		var πTemp001 *πg.Object
		_ = πTemp001
		var πTemp002 []*πg.Object
		_ = πTemp002
		var πTemp003 *πg.BaseException
		_ = πTemp003
		var πTemp004 *πg.Traceback
		_ = πTemp004
		var πTemp005 bool
		_ = πTemp005
		var πTemp006 *πg.Object
		_ = πTemp006
		var πTemp007 *πg.Object
		_ = πTemp007
		var πTemp008 *πg.Dict
		_ = πTemp008
		var πTemp009 *πg.Object
		_ = πTemp009
		for ; πF.State() >= 0; πF.PopCheckpoint() {
			switch πF.State() {
			case 0:
			case 2:
				goto Label2
			default:
				panic("unexpected function state")
			}
			// line 7: """LaTeX2e document tree Writer."""
			πF.SetLineno(7)
			// line 7: """LaTeX2e document tree Writer."""
			πF.SetLineno(7)
			if πE = πF.Globals().SetItem(πF, ß__doc__.ToObject(), πg.NewStr("LaTeX2e document tree Writer.").ToObject()); πE != nil {
				continue
			}
			// line 9: __docformat__ = 'reStructuredText'
			πF.SetLineno(9)
			if πE = πF.Globals().SetItem(πF, ß__docformat__.ToObject(), ßreStructuredText.ToObject()); πE != nil {
				continue
			}
			// line 16: import sys
			πF.SetLineno(16)
			if πTemp002, πE = πg.ImportModule(πF, "sys"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßsys.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 17: import os
			πF.SetLineno(17)
			if πTemp002, πE = πg.ImportModule(πF, "os"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßos.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 18: import re
			πF.SetLineno(18)
			if πTemp002, πE = πg.ImportModule(πF, "re"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßre.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 19: import string
			πF.SetLineno(19)
			if πTemp002, πE = πg.ImportModule(πF, "string"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßstring.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 21: try:
			πF.SetLineno(21)
			πF.PushCheckpoint(2)
			// line 22: import roman
			πF.SetLineno(22)
			if πTemp002, πE = πg.ImportModule(πF, "roman"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πE = πF.Globals().SetItem(πF, ßroman.ToObject(), πTemp001); πE != nil {
				continue
			}
			πF.PopCheckpoint()
			goto Label1
		Label2:
			if πE == nil {
				continue
			}
			πE = nil
			πTemp003, πTemp004 = πF.ExcInfo()
			if πTemp001, πE = πg.ResolveGlobal(πF, ßImportError); πE != nil {
				continue
			}
			if πTemp005, πE = πg.IsInstance(πF, πTemp003.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp005 {
				goto Label3
			}
			πE = πF.Raise(πTemp003.ToObject(), nil, πTemp004.ToObject())
			continue
			// line 23: except ImportError:
			πF.SetLineno(23)
		Label3:
			// line 24: import docutils.utils.roman as roman
			πF.SetLineno(24)
			if πTemp002, πE = πg.ImportModule(πF, "docutils.utils.roman"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[2]
			if πE = πF.Globals().SetItem(πF, ßroman.ToObject(), πTemp001); πE != nil {
				continue
			}
			πF.RestoreExc(nil, nil)
			goto Label1
		Label1:
			// line 26: from docutils import frontend, nodes, languages, writers, utils, io
			πF.SetLineno(26)
			if πTemp002, πE = πg.ImportModule(πF, "docutils.frontend"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßfrontend.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.nodes"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßnodes.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.languages"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßlanguages.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.writers"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßwriters.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.utils"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßutils.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.io"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πE = πF.Globals().SetItem(πF, ßio.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 27: from docutils.utils.error_reporting import SafeString
			πF.SetLineno(27)
			if πTemp002, πE = πg.ImportModule(πF, "docutils.utils.error_reporting"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[2]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßSafeString); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßSafeString.ToObject(), πTemp006); πE != nil {
				continue
			}
			// line 28: from docutils.transforms import writer_aux
			πF.SetLineno(28)
			if πTemp002, πE = πg.ImportModule(πF, "docutils.transforms.writer_aux"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[2]
			if πE = πF.Globals().SetItem(πF, ßwriter_aux.ToObject(), πTemp001); πE != nil {
				continue
			}
			// line 29: from docutils.utils.math import pick_math_environment, unichar2tex
			πF.SetLineno(29)
			if πTemp002, πE = πg.ImportModule(πF, "docutils.utils.math"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[2]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßpick_math_environment); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßpick_math_environment.ToObject(), πTemp006); πE != nil {
				continue
			}
			if πTemp002, πE = πg.ImportModule(πF, "docutils.utils.math.unichar2tex"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[3]
			if πE = πF.Globals().SetItem(πF, ßunichar2tex.ToObject(), πTemp001); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
				continue
			}
			if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßversion_info, nil); πE != nil {
				continue
			}
			πTemp006 = πg.NewTuple2(πg.NewInt(3).ToObject(), πg.NewInt(0).ToObject()).ToObject()
			if πTemp001, πE = πg.GE(πF, πTemp007, πTemp006); πE != nil {
				continue
			}
			if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
				continue
			}
			if πTemp005 {
				goto Label4
			}
			goto Label5
			// line 31: if sys.version_info >= (3, 0):
			πF.SetLineno(31)
		Label4:
			// line 32: from urllib.request import url2pathname
			πF.SetLineno(32)
			if πTemp002, πE = πg.ImportModule(πF, "urllib.request"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[1]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßurl2pathname); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßurl2pathname.ToObject(), πTemp006); πE != nil {
				continue
			}
			goto Label6
		Label5:
			// line 34: from urllib import url2pathname
			πF.SetLineno(34)
			if πTemp002, πE = πg.ImportModule(πF, "urllib"); πE != nil {
				continue
			}
			πTemp001 = πTemp002[0]
			if πTemp006, πE = πg.GetAttrImport(πF, πTemp001, ßurl2pathname); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßurl2pathname.ToObject(), πTemp006); πE != nil {
				continue
			}
			goto Label6
		Label6:
			if πTemp006, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
				continue
			}
			if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßversion_info, nil); πE != nil {
				continue
			}
			πTemp006 = πg.NewTuple2(πg.NewInt(3).ToObject(), πg.NewInt(0).ToObject()).ToObject()
			if πTemp001, πE = πg.GE(πF, πTemp007, πTemp006); πE != nil {
				continue
			}
			if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
				continue
			}
			if πTemp005 {
				goto Label7
			}
			goto Label8
			// line 36: if sys.version_info >= (3, 0):
			πF.SetLineno(36)
		Label7:
			// line 37: unicode = str  # noqa
			πF.SetLineno(37)
			if πTemp001, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßunicode.ToObject(), πTemp001); πE != nil {
				continue
			}
			goto Label8
		Label8:
			// line 40: class Writer(writers.Writer):
			πF.SetLineno(40)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ßwriters); πE != nil {
				continue
			}
			if πTemp009, πE = πg.GetAttr(πF, πTemp007, ßWriter, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp009
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("Writer", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Dict
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 []πg.Param
				_ = πTemp011
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 42: supported = ('latex', 'latex2e')
					πF.SetLineno(42)
					πTemp001 = πg.NewTuple2(ßlatex.ToObject(), ßlatex2e.ToObject()).ToObject()
					if πE = πClass.SetItem(πF, ßsupported.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 43: """Formats this writer supports."""
					πF.SetLineno(43)
					// line 43: """Formats this writer supports."""
					πF.SetLineno(43)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("Formats this writer supports.").ToObject()); πE != nil {
						continue
					}
					// line 45: default_template = 'default.tex'
					πF.SetLineno(45)
					if πE = πClass.SetItem(πF, ßdefault_template.ToObject(), πg.NewStr("default.tex").ToObject()); πE != nil {
						continue
					}
					// line 46: default_template_path = os.path.dirname(os.path.abspath(__file__))
					πF.SetLineno(46)
					πTemp002 = πF.MakeArgs(1)
					πTemp003 = πF.MakeArgs(1)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ß__file__); πE != nil {
						continue
					}
					πTemp003[0] = πTemp001
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßpath, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßabspath, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					πTemp002[0] = πTemp004
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßos); πE != nil {
						continue
					}
					if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßpath, nil); πE != nil {
						continue
					}
					if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßdirname, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πClass.SetItem(πF, ßdefault_template_path.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 47: default_preamble = '\n'.join([r'% PDF Standard Fonts',
					πF.SetLineno(47)
					πTemp002 = πF.MakeArgs(1)
					πTemp003 = make([]*πg.Object, 4)
					πTemp003[0] = πg.NewStr("% PDF Standard Fonts").ToObject()
					πTemp003[1] = πg.NewStr("\\usepackage{mathptmx} % Times").ToObject()
					πTemp003[2] = πg.NewStr("\\usepackage[scaled=.90]{helvet}").ToObject()
					πTemp003[3] = πg.NewStr("\\usepackage{courier}").ToObject()
					πTemp001 = πg.NewList(πTemp003...).ToObject()
					πTemp002[0] = πTemp001
					if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("\n").ToObject(), ßjoin, nil); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πClass.SetItem(πF, ßdefault_preamble.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 51: table_style_values = ('standard', 'booktabs', 'nolines', 'borderless',
					πF.SetLineno(51)
					πTemp001 = πg.NewTuple6(ßstandard.ToObject(), ßbooktabs.ToObject(), ßnolines.ToObject(), ßborderless.ToObject(), πg.NewStr("colwidths-auto").ToObject(), πg.NewStr("colwidths-given").ToObject()).ToObject()
					if πE = πClass.SetItem(πF, ßtable_style_values.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 54: settings_spec = (
					πF.SetLineno(54)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 35)
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--documentclass").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ßarticle.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Specify LaTeX documentclass.  Default: \"article\".").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[0] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--documentoptions").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ßa4paper.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Specify document options.  Multiple options can be given, separated by commas.  Default: \"a4paper\".").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[1] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--footnote-references").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					πTemp003 = make([]*πg.Object, 2)
					πTemp003[0] = ßsuperscript.ToObject()
					πTemp003[1] = ßbrackets.ToObject()
					πTemp009 = πg.NewList(πTemp003...).ToObject()
					if πE = πTemp008.SetItem(πF, ßchoices.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ßsuperscript.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßmetavar.ToObject(), πg.NewStr("<format>").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßoverrides.ToObject(), ßtrim_footnote_reference_space.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Format for footnote references: one of \"superscript\" or \"brackets\".  Default: \"superscript\".").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[2] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--use-latex-citations").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Use \\cite command for citations. (future default)").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[3] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--figure-citations").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdest.ToObject(), ßuse_latex_citations.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Use figure floats for citations (might get mixed with real figures). (current default)").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[4] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--attribution").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					πTemp003 = make([]*πg.Object, 4)
					πTemp003[0] = ßdash.ToObject()
					πTemp003[1] = ßparentheses.ToObject()
					πTemp003[2] = ßparens.ToObject()
					πTemp003[3] = ßnone.ToObject()
					πTemp009 = πg.NewList(πTemp003...).ToObject()
					if πE = πTemp008.SetItem(πF, ßchoices.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ßdash.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßmetavar.ToObject(), πg.NewStr("<format>").ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Format for block quote attributions: one of \"dash\" (em-dash prefix), \"parentheses\"/\"parens\", or \"none\".  Default: \"dash\".").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[5] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--stylesheet").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßmetavar.ToObject(), πg.NewStr("<file[,file,...]>").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßoverrides.ToObject(), ßstylesheet_path.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_comma_separated_list, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Specify LaTeX packages/stylesheets. A style is referenced with \"\\usepackage\" if extension is \".sty\" or omitted and with \"\\input\" else.  Overrides previous --stylesheet and --stylesheet-path settings.").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[6] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--stylesheet-path").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßmetavar.ToObject(), πg.NewStr("<file[,file,...]>").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßoverrides.ToObject(), ßstylesheet.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_comma_separated_list, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Comma separated list of LaTeX packages/stylesheets. Relative paths are expanded if a matching file is found in the --stylesheet-dirs. With --link-stylesheet, the path is rewritten relative to the output *.tex file. ").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[7] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--link-stylesheet").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdest.ToObject(), ßembed_stylesheet.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Link to the stylesheet(s) in the output file. (default)").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[8] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--embed-stylesheet").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Embed the stylesheet(s) in the output file. Stylesheets must be accessible during processing. ").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[9] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--stylesheet-dirs").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßmetavar.ToObject(), πg.NewStr("<dir[,dir,...]>").ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_comma_separated_list, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr(".").ToObject()
					πTemp009 = πg.NewList(πTemp003...).ToObject()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Comma-separated list of directories where stylesheets are found. Used by --stylesheet-path when expanding relative path arguments. Default: \".\".").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[10] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--latex-preamble").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßdefault_preamble); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Customization by LaTeX code in the preamble. Default: select PDF standard fonts (Times, Helvetica, Courier).").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[11] = πTemp006
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßdefault_template); πE != nil {
						continue
					}
					if πTemp007, πE = πg.Mod(πF, πg.NewStr("Specify the template file. Default: \"%s\".").ToObject(), πTemp009); πE != nil {
						continue
					}
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--template").ToObject()
					πTemp009 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßdefault_template); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp010); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßmetavar.ToObject(), πg.NewStr("<file>").ToObject()); πE != nil {
						continue
					}
					πTemp010 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πTemp007, πTemp009, πTemp010).ToObject()
					πTemp002[12] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--use-latex-toc").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Table of contents by LaTeX. (default)").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[13] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--use-docutils-toc").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdest.ToObject(), ßuse_latex_toc.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Table of contents by Docutils (without page numbers).").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[14] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--use-part-section").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Add parts on top of the section hierarchy.").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[15] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--use-docutils-docinfo").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdest.ToObject(), ßuse_latex_docinfo.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Attach author and date to the document info table. (default)").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[16] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--use-latex-docinfo").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Attach author and date to the document title.").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[17] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--topic-abstract").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdest.ToObject(), ßuse_latex_abstract.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Typeset abstract as topic. (default)").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[18] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--use-latex-abstract").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Use LaTeX abstract environment for the document's abstract.").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[19] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--hyperlink-color").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ßblue.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Color of any hyperlinks embedded in text. Default: \"blue\" (use \"false\" to disable).").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[20] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--hyperref-options").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Additional options to the \"hyperref\" package.").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[21] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--compound-enumerators").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Enable compound enumerators for nested enumerated lists (e.g. \"1.2.a.ii\").").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[22] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--no-compound-enumerators").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdest.ToObject(), ßcompound_enumerators.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Disable compound enumerators for nested enumerated lists. (default)").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[23] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--section-prefix-for-enumerators").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Enable section (\".\" subsection ...) prefixes for compound enumerators.  This has no effect without --compound-enumerators.").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[24] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--no-section-prefix-for-enumerators").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_false.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdest.ToObject(), ßsection_prefix_for_enumerators.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Disable section prefixes for compound enumerators. (default)").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[25] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--section-enumerator-separator").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πg.NewStr("-").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßmetavar.ToObject(), πg.NewStr("<char>").ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Set the separator between section number and enumerator for compound enumerated lists.  Default: \"-\".").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[26] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--literal-block-env").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("When possible, use the specified environment for literal-blocks. Default: \"\" (fall back to \"alltt\").").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[27] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--use-verbatim-when-possible").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("When possible, use \"verbatim\" for literal-blocks. Compatibility alias for \"--literal-block-env=verbatim\".").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[28] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--table-style").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = ßstandard.ToObject()
					πTemp009 = πg.NewList(πTemp003...).ToObject()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßmetavar.ToObject(), πg.NewStr("<format>").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßappend.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_comma_separated_list, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßtable_style_values); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßchoices.ToObject(), πTemp009); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Table style. \"standard\" with horizontal and vertical lines, \"booktabs\" (LaTeX booktabs style) only horizontal lines above and below the table and below the header, or \"borderless\". Default: \"standard\"").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[29] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--graphicx-option").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("LaTeX graphicx package option. Possible values are \"dvips\", \"pdftex\". \"auto\" includes LaTeX code to use \"pdftex\" if processing with pdf(la)tex and dvips otherwise. Default: \"\".").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[30] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--font-encoding").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ßT1.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("LaTeX font encoding. Possible values are \"\", \"T1\" (default), \"OT1\", \"LGR,T1\" or any other combination of options to the `fontenc` package. ").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[31] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--reference-label").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Per default the latex-writer puts the reference title into hyperreferences. Specify \"ref*\" or \"pageref*\" to get the section number or the page number.").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[32] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--use-bibtex").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), ß.ToObject()); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Specify style and database for bibtex, for example \"--use-bibtex=mystyle,mydb1,mydb2\".").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[33] = πTemp006
					πTemp003 = make([]*πg.Object, 1)
					πTemp003[0] = πg.NewStr("--docutils-footnotes").ToObject()
					πTemp007 = πg.NewList(πTemp003...).ToObject()
					πTemp008 = πg.NewDict()
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßdefault.ToObject(), πTemp009); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßaction.ToObject(), ßstore_true.ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßfrontend); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp009, ßvalidate_boolean, nil); πE != nil {
						continue
					}
					if πE = πTemp008.SetItem(πF, ßvalidator.ToObject(), πTemp010); πE != nil {
						continue
					}
					πTemp009 = πTemp008.ToObject()
					πTemp006 = πg.NewTuple3(πg.NewStr("Footnotes with numbers/symbols by Docutils. (default) (The alternative, --latex-footnotes, is not implemented yet.)").ToObject(), πTemp007, πTemp009).ToObject()
					πTemp002[34] = πTemp006
					πTemp005 = πg.NewTuple(πTemp002...).ToObject()
					πTemp001 = πg.NewTuple3(πg.NewStr("LaTeX-Specific Options").ToObject(), πTemp004, πTemp005).ToObject()
					if πE = πClass.SetItem(πF, ßsettings_spec.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 223: settings_defaults = {'sectnum_depth': 0 # updated by SectNum transform
					πF.SetLineno(223)
					πTemp008 = πg.NewDict()
					if πE = πTemp008.SetItem(πF, ßsectnum_depth.ToObject(), πg.NewInt(0).ToObject()); πE != nil {
						continue
					}
					πTemp001 = πTemp008.ToObject()
					if πE = πClass.SetItem(πF, ßsettings_defaults.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 225: config_section = 'latex2e writer'
					πF.SetLineno(225)
					if πE = πClass.SetItem(πF, ßconfig_section.ToObject(), πg.NewStr("latex2e writer").ToObject()); πE != nil {
						continue
					}
					// line 226: config_section_dependencies = ('writers', 'latex writers')
					πF.SetLineno(226)
					πTemp001 = πg.NewTuple2(ßwriters.ToObject(), πg.NewStr("latex writers").ToObject()).ToObject()
					if πE = πClass.SetItem(πF, ßconfig_section_dependencies.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 228: head_parts = ('head_prefix', 'requirements', 'latex_preamble',
					πF.SetLineno(228)
					πTemp002 = make([]*πg.Object, 7)
					πTemp002[0] = ßhead_prefix.ToObject()
					πTemp002[1] = ßrequirements.ToObject()
					πTemp002[2] = ßlatex_preamble.ToObject()
					πTemp002[3] = ßstylesheet.ToObject()
					πTemp002[4] = ßfallbacks.ToObject()
					πTemp002[5] = ßpdfsetup.ToObject()
					πTemp002[6] = ßtitledata.ToObject()
					πTemp001 = πg.NewTuple(πTemp002...).ToObject()
					if πE = πClass.SetItem(πF, ßhead_parts.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 230: visitor_attributes = head_parts + ('title', 'subtitle',
					πF.SetLineno(230)
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßhead_parts); πE != nil {
						continue
					}
					πTemp002 = make([]*πg.Object, 7)
					πTemp002[0] = ßtitle.ToObject()
					πTemp002[1] = ßsubtitle.ToObject()
					πTemp002[2] = ßbody_pre_docinfo.ToObject()
					πTemp002[3] = ßdocinfo.ToObject()
					πTemp002[4] = ßdedication.ToObject()
					πTemp002[5] = ßabstract.ToObject()
					πTemp002[6] = ßbody.ToObject()
					πTemp005 = πg.NewTuple(πTemp002...).ToObject()
					if πTemp001, πE = πg.Add(πF, πTemp004, πTemp005); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßvisitor_attributes.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 234: output = None
					πF.SetLineno(234)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßoutput.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 235: """Final translated form of `document`."""
					πF.SetLineno(235)
					// line 237: def __init__(self):
					πF.SetLineno(237)
					πTemp011 = make([]πg.Param, 1)
					πTemp011[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp011, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 238: writers.Writer.__init__(self)
							πF.SetLineno(238)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßwriters); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßWriter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ß__init__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 239: self.translator_class = LaTeXTranslator
							πF.SetLineno(239)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßLaTeXTranslator); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtranslator_class, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 242: def get_transforms(self):
					πF.SetLineno(242)
					πTemp011 = make([]πg.Param, 1)
					πTemp011[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("get_transforms", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp011, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 243: return writers.Writer.get_transforms(self) + [
							πF.SetLineno(243)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp002[0] = µself
							if πTemp003, πE = πg.ResolveGlobal(πF, ßwriters); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßWriter, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßget_transforms, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp002 = make([]*πg.Object, 1)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßwriter_aux); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßAdmonitions, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp005
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							if πTemp001, πE = πg.Add(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_transforms.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 249: def translate(self):
					πF.SetLineno(249)
					πTemp011 = make([]πg.Param, 1)
					πTemp011[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("translate", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp011, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µvisitor *πg.Object = πg.UnboundLocal
						_ = µvisitor
						var µpart *πg.Object = πg.UnboundLocal
						_ = µpart
						var µtemplate_file *πg.Object = πg.UnboundLocal
						_ = µtemplate_file
						var µtemplate *πg.Object = πg.UnboundLocal
						_ = µtemplate
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.BaseException
						_ = πTemp008
						var πTemp009 *πg.Traceback
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							case 5:
								goto Label5
							default:
								panic("unexpected function state")
							}
							// line 250: visitor = self.translator_class(self.document)
							πF.SetLineno(250)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtranslator_class, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µvisitor = πTemp003
							// line 251: self.document.walkabout(visitor)
							πF.SetLineno(251)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µvisitor, "visitor"); πE != nil {
								continue
							}
							πTemp001[0] = µvisitor
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßwalkabout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßvisitor_attributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µpart = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 254: setattr(self, part, getattr(visitor, part))
							πF.SetLineno(254)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πE = πg.CheckLocal(πF, µpart, "part"); πE != nil {
								continue
							}
							πTemp001[1] = µpart
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µvisitor, "visitor"); πE != nil {
								continue
							}
							πTemp006[0] = µvisitor
							if πE = πg.CheckLocal(πF, µpart, "part"); πE != nil {
								continue
							}
							πTemp006[1] = µpart
							if πTemp003, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001[2] = πTemp007
							if πTemp003, πE = πg.ResolveGlobal(πF, ßsetattr); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 256: try:
							πF.SetLineno(256)
							πF.PushCheckpoint(5)
							// line 257: template_file = open(self.document.settings.template, 'rb')
							πF.SetLineno(257)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßtemplate, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp001[1] = ßrb.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßopen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtemplate_file = πTemp003
							πF.PopCheckpoint()
							goto Label4
						Label5:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp008, πTemp009 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßIOError); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsInstance(πF, πTemp008.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label6
							}
							πE = πF.Raise(πTemp008.ToObject(), nil, πTemp009.ToObject())
							continue
							// line 258: except IOError:
							πF.SetLineno(258)
						Label6:
							// line 259: template_file = open(os.path.join(self.default_template_path,
							πF.SetLineno(259)
							πTemp001 = πF.MakeArgs(2)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdefault_template_path, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßtemplate, nil); πE != nil {
								continue
							}
							πTemp006[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpath, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001[0] = πTemp003
							πTemp001[1] = ßrb.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßopen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtemplate_file = πTemp003
							πF.RestoreExc(nil, nil)
							goto Label4
						Label4:
							// line 261: template = string.Template(unicode(template_file.read(), 'utf-8'))
							πF.SetLineno(261)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µtemplate_file, "template_file"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtemplate_file, ßread, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp003
							πTemp006[1] = πg.NewStr("utf-8").ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßunicode); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßstring); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßTemplate, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µtemplate = πTemp002
							// line 262: template_file.close()
							πF.SetLineno(262)
							if πE = πg.CheckLocal(πF, µtemplate_file, "template_file"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtemplate_file, ßclose, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 264: self.assemble_parts() # create dictionary of parts
							πF.SetLineno(264)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßassemble_parts, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 265: self.output = template.substitute(self.parts)
							πF.SetLineno(265)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßparts, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µtemplate, "template"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µtemplate, ßsubstitute, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßoutput, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßtranslate.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 267: def assemble_parts(self):
					πF.SetLineno(267)
					πTemp011 = make([]πg.Param, 1)
					πTemp011[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("assemble_parts", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp011, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µpart *πg.Object = πg.UnboundLocal
						_ = µpart
						var µlines *πg.Object = πg.UnboundLocal
						_ = µlines
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 268: """Assemble the `self.parts` dictionary of output fragments."""
							πF.SetLineno(268)
							// line 269: writers.Writer.assemble_parts(self)
							πF.SetLineno(269)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πTemp002, πE = πg.ResolveGlobal(πF, ßwriters); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßWriter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßassemble_parts, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßvisitor_attributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µpart = πTemp003
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 271: lines = getattr(self, part)
							πF.SetLineno(271)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πE = πg.CheckLocal(πF, µpart, "part"); πE != nil {
								continue
							}
							πTemp001[1] = µpart
							if πTemp003, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µlines = πTemp006
							if πE = πg.CheckLocal(πF, µpart, "part"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßhead_parts, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, πTemp006, µpart); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							goto Label5
							// line 272: if part in self.head_parts:
							πF.SetLineno(272)
						Label4:
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, µlines); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label7
							}
							goto Label8
							// line 273: if lines:
							πF.SetLineno(273)
						Label7:
							// line 274: lines.append('') # to get a trailing newline
							πF.SetLineno(274)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µlines, ßappend, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label8
						Label8:
							// line 275: self.parts[part] = '\n'.join(lines)
							πF.SetLineno(275)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							πTemp001[0] = µlines
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßparts, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µpart, "part"); πE != nil {
								continue
							}
							πTemp008 = µpart
							if πE = πg.SetItem(πF, πTemp007, πTemp008, πTemp003); πE != nil {
								continue
							}
							goto Label6
						Label5:
							// line 278: self.parts[part] = ''.join(lines)
							πF.SetLineno(278)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							πTemp001[0] = µlines
							if πTemp003, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßparts, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µpart, "part"); πE != nil {
								continue
							}
							πTemp008 = µpart
							if πE = πg.SetItem(πF, πTemp007, πTemp008, πTemp003); πE != nil {
								continue
							}
							goto Label6
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßassemble_parts.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 268: """Assemble the `self.parts` dictionary of output fragments."""
					πF.SetLineno(268)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp007}, πg.NewStr("Assemble the `self.parts` dictionary of output fragments.").ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßassemble_parts); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp009, ß__doc__, πTemp007); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("Writer").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßWriter.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 281: class Babel(object):
			πF.SetLineno(281)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp007
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("Babel", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Dict
				_ = πTemp001
				var πTemp002 *πg.Object
				_ = πTemp002
				var πTemp003 []*πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 []πg.Param
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 282: """Language specifics for LaTeX."""
					πF.SetLineno(282)
					// line 282: """Language specifics for LaTeX."""
					πF.SetLineno(282)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("Language specifics for LaTeX.").ToObject()); πE != nil {
						continue
					}
					// line 295: language_codes = {
					πF.SetLineno(295)
					πTemp001 = πg.NewDict()
					if πE = πTemp001.SetItem(πF, ßaf.ToObject(), ßafrikaans.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßar.ToObject(), ßarabic.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßbg.ToObject(), ßbulgarian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßbr.ToObject(), ßbreton.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßca.ToObject(), ßcatalan.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßcs.ToObject(), ßczech.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßcy.ToObject(), ßwelsh.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßda.ToObject(), ßdanish.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßde.ToObject(), ßngerman.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("de-1901").ToObject(), ßgerman.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("de-AT").ToObject(), ßnaustrian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("de-AT-1901").ToObject(), ßaustrian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßdsb.ToObject(), ßlowersorbian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßel.ToObject(), ßgreek.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("el-polyton").ToObject(), ßpolutonikogreek.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßen.ToObject(), ßenglish.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("en-AU").ToObject(), ßaustralian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("en-CA").ToObject(), ßcanadian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("en-GB").ToObject(), ßbritish.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("en-NZ").ToObject(), ßnewzealand.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("en-US").ToObject(), ßamerican.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßeo.ToObject(), ßesperanto.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßes.ToObject(), ßspanish.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßet.ToObject(), ßestonian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßeu.ToObject(), ßbasque.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßfi.ToObject(), ßfinnish.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßfr.ToObject(), ßfrench.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("fr-CA").ToObject(), ßcanadien.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßga.ToObject(), ßirish.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("grc-ibycus").ToObject(), ßibycus.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßgl.ToObject(), ßgalician.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßhe.ToObject(), ßhebrew.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßhr.ToObject(), ßcroatian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßhsb.ToObject(), ßuppersorbian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßhu.ToObject(), ßmagyar.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßia.ToObject(), ßinterlingua.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßid.ToObject(), ßbahasai.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßis.ToObject(), ßicelandic.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßit.ToObject(), ßitalian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßja.ToObject(), ßjapanese.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßkk.ToObject(), ßkazakh.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßla.ToObject(), ßlatin.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßlt.ToObject(), ßlithuanian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßlv.ToObject(), ßlatvian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßmn.ToObject(), ßmongolian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßms.ToObject(), ßbahasam.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßnb.ToObject(), ßnorsk.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßnl.ToObject(), ßdutch.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßnn.ToObject(), ßnynorsk.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßno.ToObject(), ßnorsk.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßpl.ToObject(), ßpolish.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßpt.ToObject(), ßportuges.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("pt-BR").ToObject(), ßbrazil.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßro.ToObject(), ßromanian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßru.ToObject(), ßrussian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßse.ToObject(), ßsamin.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("sh-Cyrl").ToObject(), ßserbianc.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("sh-Latn").ToObject(), ßserbian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßsk.ToObject(), ßslovak.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßsl.ToObject(), ßslovene.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßsq.ToObject(), ßalbanian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßsr.ToObject(), ßserbianc.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewStr("sr-Latn").ToObject(), ßserbian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßsv.ToObject(), ßswedish.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßtr.ToObject(), ßturkish.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßuk.ToObject(), ßukrainian.ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßvi.ToObject(), ßvietnam.ToObject()); πE != nil {
						continue
					}
					πTemp002 = πTemp001.ToObject()
					if πE = πClass.SetItem(πF, ßlanguage_codes.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 372: language_codes = dict([(k.lower(), v) for (k, v) in language_codes.items()])
					πF.SetLineno(372)
					πTemp003 = πF.MakeArgs(1)
					πTemp005 = make([]πg.Param, 0)
					πTemp004 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µk *πg.Object = πg.UnboundLocal
						_ = µk
						var µv *πg.Object = πg.UnboundLocal
						_ = µv
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
							for ; πF.State() >= 0; πF.PopCheckpoint() {
								switch πF.State() {
								case 0:
								case 1:
									goto Label1
								case 2:
									goto Label2
								case 4:
									goto Label4
								default:
									panic("unexpected function state")
								}
								if πTemp002, πE = πg.ResolveGlobal(πF, ßlanguage_codes); πE != nil {
									continue
								}
								if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßitems, nil); πE != nil {
									continue
								}
								if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
									continue
								}
								if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
									continue
								}
								πF.PushCheckpoint(2)
								πTemp004 = false
							Label1:
								if πE != nil || πR != nil {
									continue
								}
								if πTemp004 {
									πF.PopCheckpoint()
									goto Label3
								}
								if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
									isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
									if exc != nil {
										πE = exc
									} else if isStop {
										πE = nil
										πF.RestoreExc(nil, nil)
									}
									πTemp005 = !isStop
								} else {
									πTemp005 = true
									if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp003}, πg.TieTarget{Target: &πTemp006}}}, πTemp002); πE != nil {
										continue
									}
									µk = πTemp003
									µv = πTemp006
								}
								if πE != nil || !πTemp005 {
									continue
								}
								πF.PushCheckpoint(1)
								// line 372: language_codes = dict([(k.lower(), v) for (k, v) in language_codes.items()])
								πF.SetLineno(372)
								if πE = πg.CheckLocal(πF, µk, "k"); πE != nil {
									continue
								}
								if πTemp003, πE = πg.GetAttr(πF, µk, ßlower, nil); πE != nil {
									continue
								}
								if πTemp006, πE = πTemp003.Call(πF, nil, nil); πE != nil {
									continue
								}
								if πE = πg.CheckLocal(πF, µv, "v"); πE != nil {
									continue
								}
								πTemp002 = πg.NewTuple2(πTemp006, µv).ToObject()
								πF.PushCheckpoint(4)
								return πTemp002, nil
							Label4:
								πTemp003 = πSent
								continue
							Label2:
								if πE != nil || πR != nil {
									continue
								}
							Label3:
							}
							return nil, πE
						}).ToObject(), nil
					}), πF.Globals()).ToObject()
					if πTemp006, πE = πTemp004.Call(πF, nil, nil); πE != nil {
						continue
					}
					if πTemp002, πE = πg.ListType.Call(πF, πg.Args{πTemp006}, nil); πE != nil {
						continue
					}
					πTemp003[0] = πTemp002
					if πTemp002, πE = πg.ResolveClass(πF, πClass, nil, ßdict); πE != nil {
						continue
					}
					if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp003)
					if πE = πClass.SetItem(πF, ßlanguage_codes.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 374: warn_msg = 'Language "%s" not supported by LaTeX (babel)'
					πF.SetLineno(374)
					if πE = πClass.SetItem(πF, ßwarn_msg.ToObject(), πg.NewStr("Language \"%s\" not supported by LaTeX (babel)").ToObject()); πE != nil {
						continue
					}
					// line 389: active_chars = {# TeX/Babel-name:  active characters to deactivate
					πF.SetLineno(389)
					πTemp001 = πg.NewDict()
					if πE = πTemp001.SetItem(πF, ßgalician.ToObject(), πg.NewStr(".<>").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, ßspanish.ToObject(), πg.NewStr(".<>").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πTemp001.ToObject()
					if πE = πClass.SetItem(πF, ßactive_chars.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 400: def __init__(self, language_code, reporter=None):
					πF.SetLineno(400)
					πTemp005 = make([]πg.Param, 3)
					πTemp005[0] = πg.Param{Name: "self", Def: nil}
					πTemp005[1] = πg.Param{Name: "language_code", Def: nil}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp005[2] = πg.Param{Name: "reporter", Def: πTemp006}
					πTemp002 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µlanguage_code *πg.Object = πArgs[1]
						_ = µlanguage_code
						var µreporter *πg.Object = πArgs[2]
						_ = µreporter
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 401: self.reporter = reporter
							πF.SetLineno(401)
							if πE = πg.CheckLocal(πF, µreporter, "reporter"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µreporter); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßreporter, πTemp001); πE != nil {
								continue
							}
							// line 402: self.language = self.language_name(language_code)
							πF.SetLineno(402)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							πTemp002[0] = µlanguage_code
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlanguage_name, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlanguage, πTemp001); πE != nil {
								continue
							}
							// line 403: self.otherlanguages = {}
							πF.SetLineno(403)
							πTemp004 = πg.NewDict()
							πTemp001 = πTemp004.ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßotherlanguages, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp002); πE != nil {
						continue
					}
					// line 405: def __call__(self):
					πF.SetLineno(405)
					πTemp005 = make([]πg.Param, 1)
					πTemp005[0] = πg.Param{Name: "self", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("__call__", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µlanguages *πg.Object = πg.UnboundLocal
						_ = µlanguages
						var µshorthands *πg.Object = πg.UnboundLocal
						_ = µshorthands
						var µc *πg.Object = πg.UnboundLocal
						_ = µc
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 []πg.Param
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2:
								goto Label2
							case 3:
								goto Label3
							default:
								panic("unexpected function state")
							}
							// line 406: """Return the babel call with correct options and settings"""
							πF.SetLineno(406)
							// line 407: languages = sorted(self.otherlanguages.keys())
							πF.SetLineno(407)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßotherlanguages, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßkeys, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsorted); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µlanguages = πTemp003
							// line 408: languages.append(self.language or 'english')
							πF.SetLineno(408)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßlanguage, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							πTemp002 = ßenglish.ToObject()
						Label1:
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µlanguages, "languages"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µlanguages, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 409: self.setup = [r'\usepackage[%s]{babel}' % ','.join(languages)]
							πF.SetLineno(409)
							πTemp001 = make([]*πg.Object, 1)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlanguages, "languages"); πE != nil {
								continue
							}
							πTemp005[0] = µlanguages
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr(",").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\usepackage[%s]{babel}").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsetup, πTemp003); πE != nil {
								continue
							}
							// line 411: shorthands = []
							πF.SetLineno(411)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µshorthands = πTemp002
							πTemp001 = πF.MakeArgs(1)
							πTemp007 = make([]πg.Param, 0)
							πTemp006 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp007, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µl *πg.Object = πg.UnboundLocal
								_ = µl
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 bool
								_ = πTemp002
								var πTemp003 bool
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 []*πg.Object
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										if πE = πg.CheckLocal(πF, µlanguages, "languages"); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, µlanguages); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp002 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp002 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp003 = !isStop
										} else {
											πTemp003 = true
											µl = πTemp004
										}
										if πE != nil || !πTemp003 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 412: for c in ''.join([self.active_chars.get(l, '') for l in languages]):
										πF.SetLineno(412)
										πTemp005 = πF.MakeArgs(2)
										if πE = πg.CheckLocal(πF, µl, "l"); πE != nil {
											continue
										}
										πTemp005[0] = µl
										πTemp005[1] = ß.ToObject()
										if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
											continue
										}
										if πTemp004, πE = πg.GetAttr(πF, µself, ßactive_chars, nil); πE != nil {
											continue
										}
										if πTemp006, πE = πg.GetAttr(πF, πTemp004, ßget, nil); πE != nil {
											continue
										}
										if πTemp004, πE = πTemp006.Call(πF, πTemp005, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp005)
										πF.PushCheckpoint(4)
										return πTemp004, nil
									Label4:
										πTemp006 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp008, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ListType.Call(πF, πg.Args{πTemp008}, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Iter(πF, πTemp008); πE != nil {
								continue
							}
							πF.PushCheckpoint(3)
							πTemp004 = false
						Label2:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label4
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µc = πTemp003
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(2)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µshorthands, "shorthands"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.Contains(πF, µshorthands, µc); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp009).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label5
							}
							goto Label6
							// line 413: if c not in shorthands:
							πF.SetLineno(413)
						Label5:
							// line 414: shorthands.append(c)
							πF.SetLineno(414)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µc, "c"); πE != nil {
								continue
							}
							πTemp001[0] = µc
							if πE = πg.CheckLocal(πF, µshorthands, "shorthands"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µshorthands, ßappend, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label6
						Label6:
							continue
						Label3:
							if πE != nil || πR != nil {
								continue
							}
						Label4:
							if πE = πg.CheckLocal(πF, µshorthands, "shorthands"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, µshorthands); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label7
							}
							goto Label8
							// line 415: if shorthands:
							πF.SetLineno(415)
						Label7:
							// line 416: self.setup.append(r'\AtBeginDocument{\shorthandoff{%s}}'
							πF.SetLineno(416)
							πTemp001 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µshorthands, "shorthands"); πE != nil {
								continue
							}
							πTemp005[0] = µshorthands
							if πTemp003, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\AtBeginDocument{\\shorthandoff{%s}}").ToObject(), πTemp008); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsetup, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label8
						Label8:
							if πE = πg.CheckLocal(πF, µlanguages, "languages"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µlanguages, ßgalician.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label9
							}
							goto Label10
							// line 419: if 'galician' in languages:
							πF.SetLineno(419)
						Label9:
							// line 420: self.setup.append(r'\deactivatetilden % restore ~ in Galician')
							πF.SetLineno(420)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\deactivatetilden % restore ~ in Galician").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsetup, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label10
						Label10:
							if πE = πg.CheckLocal(πF, µlanguages, "languages"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µlanguages, ßestonian.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label11
							}
							goto Label12
							// line 421: if 'estonian' in languages:
							πF.SetLineno(421)
						Label11:
							// line 422: self.setup.extend([r'\makeatletter',
							πF.SetLineno(422)
							πTemp001 = πF.MakeArgs(1)
							πTemp005 = make([]*πg.Object, 3)
							πTemp005[0] = πg.NewStr("\\makeatletter").ToObject()
							πTemp005[1] = πg.NewStr("  \\addto\\extrasestonian{\\bbl@deactivate{~}}").ToObject()
							πTemp005[2] = πg.NewStr("\\makeatother").ToObject()
							πTemp002 = πg.NewList(πTemp005...).ToObject()
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsetup, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßextend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label12
						Label12:
							if πE = πg.CheckLocal(πF, µlanguages, "languages"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µlanguages, ßbasque.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label13
							}
							goto Label14
							// line 425: if 'basque' in languages:
							πF.SetLineno(425)
						Label13:
							// line 426: self.setup.extend([r'\makeatletter',
							πF.SetLineno(426)
							πTemp001 = πF.MakeArgs(1)
							πTemp005 = make([]*πg.Object, 3)
							πTemp005[0] = πg.NewStr("\\makeatletter").ToObject()
							πTemp005[1] = πg.NewStr("  \\addto\\extrasbasque{\\bbl@deactivate{~}}").ToObject()
							πTemp005[2] = πg.NewStr("\\makeatother").ToObject()
							πTemp002 = πg.NewList(πTemp005...).ToObject()
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsetup, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßextend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label14
						Label14:
							if πTemp010, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp008 = πTemp010
							if πE = πg.CheckLocal(πF, µlanguages, "languages"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.GetItem(πF, µlanguages, πTemp008); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp010, ßenglish.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label15
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µself, ßotherlanguages, nil); πE != nil {
								continue
							}
							if πTemp010, πE = πg.GetAttr(πF, πTemp008, ßkeys, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp010.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πg.Contains(πF, πTemp008, ßfrench.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp009).ToObject()
							πTemp002 = πTemp003
						Label15:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label16
							}
							goto Label17
							// line 429: if (languages[-1] == 'english' and
							πF.SetLineno(429)
						Label16:
							// line 431: self.setup += ['% Prevent side-effects if French hyphenation '
							πF.SetLineno(431)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsetup, nil); πE != nil {
								continue
							}
							πTemp001 = make([]*πg.Object, 3)
							πTemp001[0] = πg.NewStr("% Prevent side-effects if French hyphenation patterns are not loaded:").ToObject()
							πTemp001[1] = πg.NewStr("\\frenchbsetup{StandardLayout}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µself, ßlanguage, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\AtBeginDocument{\\selectlanguage{%s}\\noextrasfrench}").ToObject(), πTemp008); πE != nil {
								continue
							}
							πTemp001[2] = πTemp003
							πTemp003 = πg.NewList(πTemp001...).ToObject()
							if πTemp008, πE = πg.IAdd(πF, πTemp002, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsetup, πTemp008); πE != nil {
								continue
							}
							goto Label17
						Label17:
							// line 436: return '\n'.join(self.setup)
							πF.SetLineno(436)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsetup, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πR = πTemp003
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__call__.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 406: """Return the babel call with correct options and settings"""
					πF.SetLineno(406)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp007}, πg.NewStr("Return the babel call with correct options and settings").ToObject()); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ß__call__); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp008, ß__doc__, πTemp007); πE != nil {
						continue
					}
					// line 438: def language_name(self, language_code):
					πF.SetLineno(438)
					πTemp005 = make([]πg.Param, 2)
					πTemp005[0] = πg.Param{Name: "self", Def: nil}
					πTemp005[1] = πg.Param{Name: "language_code", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("language_name", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µlanguage_code *πg.Object = πArgs[1]
						_ = µlanguage_code
						var µtag *πg.Object = πg.UnboundLocal
						_ = µtag
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.BaseException
						_ = πTemp008
						var πTemp009 *πg.Traceback
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							case 5:
								goto Label5
							default:
								panic("unexpected function state")
							}
							// line 439: """Return TeX language name for `language_code`"""
							πF.SetLineno(439)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							πTemp002[0] = µlanguage_code
							if πTemp003, πE = πg.ResolveGlobal(πF, ßutils); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßnormalize_language_tag, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µtag = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 441: try:
							πF.SetLineno(441)
							πF.PushCheckpoint(5)
							// line 442: return self.language_codes[tag]
							πF.SetLineno(442)
							if πE = πg.CheckLocal(πF, µtag, "tag"); πE != nil {
								continue
							}
							πTemp003 = µtag
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßlanguage_codes, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp007, πTemp003); πE != nil {
								continue
							}
							πR = πTemp004
							continue
							πF.PopCheckpoint()
							goto Label4
						Label5:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp008, πTemp009 = πF.ExcInfo()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßKeyError); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsInstance(πF, πTemp008.ToObject(), πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label6
							}
							πE = πF.Raise(πTemp008.ToObject(), nil, πTemp009.ToObject())
							continue
							// line 443: except KeyError:
							πF.SetLineno(443)
						Label6:
							// line 444: pass
							πF.SetLineno(444)
							πF.RestoreExc(nil, nil)
							goto Label4
						Label4:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003 != πTemp004).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label7
							}
							goto Label8
							// line 445: if self.reporter is not None:
							πF.SetLineno(445)
						Label7:
							// line 446: self.reporter.warning(self.warn_msg % language_code)
							πF.SetLineno(446)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßwarn_msg, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µlanguage_code, "language_code"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πTemp003, µlanguage_code); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßwarning, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label8
						Label8:
							// line 447: return ''
							πF.SetLineno(447)
							πR = ß.ToObject()
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßlanguage_name.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 439: """Return TeX language name for `language_code`"""
					πF.SetLineno(439)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp008}, πg.NewStr("Return TeX language name for `language_code`").ToObject()); πE != nil {
						continue
					}
					if πTemp009, πE = πg.ResolveClass(πF, πClass, nil, ßlanguage_name); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp009, ß__doc__, πTemp008); πE != nil {
						continue
					}
					// line 449: def get_language(self):
					πF.SetLineno(449)
					πTemp005 = make([]πg.Param, 1)
					πTemp005[0] = πg.Param{Name: "self", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("get_language", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 451: return self.language
							πF.SetLineno(451)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßlanguage, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_language.ToObject(), πTemp008); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("Babel").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßBabel.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 457: class SortableDict(dict):
			πF.SetLineno(457)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ßdict); πE != nil {
				continue
			}
			πTemp002[0] = πTemp007
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("SortableDict", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 458: """Dictionary with additional sorting methods
					πF.SetLineno(458)
					// line 458: """Dictionary with additional sorting methods
					πF.SetLineno(458)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("Dictionary with additional sorting methods\n\n    Tip: use key starting with with '_' for sorting before small letters\n         and with '~' for sorting after small letters.\n    ").ToObject()); πE != nil {
						continue
					}
					// line 463: def sortedkeys(self):
					πF.SetLineno(463)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("sortedkeys", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µkeys *πg.Object = πg.UnboundLocal
						_ = µkeys
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 464: """Return sorted list of keys"""
							πF.SetLineno(464)
							// line 465: keys = sorted(self.keys())
							πF.SetLineno(465)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßkeys, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsorted); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µkeys = πTemp003
							// line 466: return keys
							πF.SetLineno(466)
							if πE = πg.CheckLocal(πF, µkeys, "keys"); πE != nil {
								continue
							}
							πR = µkeys
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsortedkeys.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 464: """Return sorted list of keys"""
					πF.SetLineno(464)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πg.NewStr("Return sorted list of keys").ToObject()); πE != nil {
						continue
					}
					if πTemp004, πE = πg.ResolveClass(πF, πClass, nil, ßsortedkeys); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp004, ß__doc__, πTemp003); πE != nil {
						continue
					}
					// line 468: def sortedvalues(self):
					πF.SetLineno(468)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("sortedvalues", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []πg.Param
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 469: """Return list of values sorted by keys"""
							πF.SetLineno(469)
							// line 470: return [self[key] for key in self.sortedkeys()]
							πF.SetLineno(470)
							πTemp003 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µkey *πg.Object = πg.UnboundLocal
								_ = µkey
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 bool
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
											continue
										}
										if πTemp002, πE = πg.GetAttr(πF, µself, ßsortedkeys, nil); πE != nil {
											continue
										}
										if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp004 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp004 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp005 = !isStop
										} else {
											πTemp005 = true
											µkey = πTemp002
										}
										if πE != nil || !πTemp005 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 470: return [self[key] for key in self.sortedkeys()]
										πF.SetLineno(470)
										if πE = πg.CheckLocal(πF, µkey, "key"); πE != nil {
											continue
										}
										πTemp002 = µkey
										if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetItem(πF, µself, πTemp002); πE != nil {
											continue
										}
										πF.PushCheckpoint(4)
										return πTemp003, nil
									Label4:
										πTemp002 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ListType.Call(πF, πg.Args{πTemp004}, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsortedvalues.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 469: """Return list of values sorted by keys"""
					πF.SetLineno(469)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, πg.NewStr("Return list of values sorted by keys").ToObject()); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßsortedvalues); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp005, ß__doc__, πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("SortableDict").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßSortableDict.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 482: class PreambleCmds(object):
			πF.SetLineno(482)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp007
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("PreambleCmds", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 483: """Building blocks for the latex preamble."""
					πF.SetLineno(483)
					// line 483: """Building blocks for the latex preamble."""
					πF.SetLineno(483)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("Building blocks for the latex preamble.").ToObject()); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("PreambleCmds").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßPreambleCmds.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 485: PreambleCmds.abstract = r"""
			πF.SetLineno(485)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% abstract title\n\\providecommand*{\\DUtitleabstract}[1]{\\centerline{\\textbf{#1}}}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßabstract, πTemp001); πE != nil {
				continue
			}
			// line 489: PreambleCmds.admonition = r"""
			πF.SetLineno(489)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% admonition (specially marked topic)\n\\providecommand{\\DUadmonition}[2][class-arg]{%\n  % try \\DUadmonition#1{#2}:\n  \\ifcsname DUadmonition#1\\endcsname%\n    \\csname DUadmonition#1\\endcsname{#2}%\n  \\else\n    \\begin{center}\n      \\fbox{\\parbox{0.9\\linewidth}{#2}}\n    \\end{center}\n  \\fi\n}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßadmonition, πTemp001); πE != nil {
				continue
			}
			// line 506: PreambleCmds.color = r"""\usepackage{color}"""
			πF.SetLineno(506)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\\usepackage{color}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßcolor, πTemp001); πE != nil {
				continue
			}
			// line 508: PreambleCmds.docinfo = r"""
			πF.SetLineno(508)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% docinfo (width of docinfo table)\n\\DUprovidelength{\\DUdocinfowidth}{0.9\\linewidth}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßdocinfo, πTemp001); πE != nil {
				continue
			}
			// line 513: PreambleCmds.dedication = r"""
			πF.SetLineno(513)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% dedication topic\n\\providecommand*{\\DUCLASSdedication}{%\n  \\renewenvironment{quote}{\\begin{center}}{\\end{center}}%\n}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßdedication, πTemp001); πE != nil {
				continue
			}
			// line 519: PreambleCmds.duclass = r"""
			πF.SetLineno(519)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% class handling for environments (block-level elements)\n% \\begin{DUclass}{spam} tries \\DUCLASSspam and\n% \\end{DUclass}{spam} tries \\endDUCLASSspam\n\\ifx\\DUclass\\undefined % poor man's \"provideenvironment\"\n \\newenvironment{DUclass}[1]%\n  {\\def\\DocutilsClassFunctionName{DUCLASS#1}% arg cannot be used in end-part of environment.\n     \\csname \\DocutilsClassFunctionName \\endcsname}%\n  {\\csname end\\DocutilsClassFunctionName \\endcsname}%\n\\fi").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßduclass, πTemp001); πE != nil {
				continue
			}
			// line 530: PreambleCmds.error = r"""
			πF.SetLineno(530)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% error admonition title\n\\providecommand*{\\DUtitleerror}[1]{\\DUtitle{\\color{red}#1}}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßerror, πTemp001); πE != nil {
				continue
			}
			// line 534: PreambleCmds.fieldlist = r"""
			πF.SetLineno(534)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% fieldlist environment\n\\ifthenelse{\\isundefined{\\DUfieldlist}}{\n  \\newenvironment{DUfieldlist}%\n    {\\quote\\description}\n    {\\enddescription\\endquote}\n}{}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßfieldlist, πTemp001); πE != nil {
				continue
			}
			// line 542: PreambleCmds.float_settings = r"""\usepackage{float} % float configuration
			πF.SetLineno(542)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\\usepackage{float} % float configuration\n\\floatplacement{figure}{H} % place figures here definitely").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßfloat_settings, πTemp001); πE != nil {
				continue
			}
			// line 545: PreambleCmds.footnotes = r"""% numeric or symbol footnotes with hyperlinks
			πF.SetLineno(545)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("% numeric or symbol footnotes with hyperlinks\n\\providecommand*{\\DUfootnotemark}[3]{%\n  \\raisebox{1em}{\\hypertarget{#1}{}}%\n  \\hyperlink{#2}{\\textsuperscript{#3}}%\n}\n\\providecommand{\\DUfootnotetext}[4]{%\n  \\begingroup%\n  \\renewcommand{\\thefootnote}{%\n    \\protect\\raisebox{1em}{\\protect\\hypertarget{#1}{}}%\n    \\protect\\hyperlink{#2}{#3}}%\n  \\footnotetext{#4}%\n  \\endgroup%\n}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßfootnotes, πTemp001); πE != nil {
				continue
			}
			// line 559: PreambleCmds.graphicx_auto = r"""% Check output format
			πF.SetLineno(559)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("% Check output format\n\\ifx\\pdftexversion\\undefined\n  \\usepackage{graphicx}\n\\else\n  \\usepackage[pdftex]{graphicx}\n\\fi").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßgraphicx_auto, πTemp001); πE != nil {
				continue
			}
			// line 566: PreambleCmds.highlight_rules = r"""% basic code highlight:
			πF.SetLineno(566)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("% basic code highlight:\n\\providecommand*\\DUrolecomment[1]{\\textcolor[rgb]{0.40,0.40,0.40}{#1}}\n\\providecommand*\\DUroledeleted[1]{\\textcolor[rgb]{0.40,0.40,0.40}{#1}}\n\\providecommand*\\DUrolekeyword[1]{\\textbf{#1}}\n\\providecommand*\\DUrolestring[1]{\\textit{#1}}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßhighlight_rules, πTemp001); πE != nil {
				continue
			}
			// line 572: PreambleCmds.inline = r"""
			πF.SetLineno(572)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% inline markup (custom roles)\n% \\DUrole{#1}{#2} tries \\DUrole#1{#2}\n\\providecommand*{\\DUrole}[2]{%\n  \\ifcsname DUrole#1\\endcsname%\n    \\csname DUrole#1\\endcsname{#2}%\n  \\else\n    % backwards compatibility: try \\docutilsrole#1{#2}\n    \\ifcsname docutilsrole#1\\endcsname%\n      \\PackageWarningNoLine{docutils}{Command prefix \"docutilsrole\" is\n         deprecated, \\MessageBreak use `\\protect\\DUrole #1`}\n      \\csname docutilsrole#1\\endcsname{#2}%\n    \\else%\n      #2%\n    \\fi%\n  \\fi%\n}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßinline, πTemp001); πE != nil {
				continue
			}
			// line 590: PreambleCmds.legend = r"""
			πF.SetLineno(590)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% legend environment\n\\ifthenelse{\\isundefined{\\DUlegend}}{\n  \\newenvironment{DUlegend}{\\small}{}\n}{}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßlegend, πTemp001); πE != nil {
				continue
			}
			// line 596: PreambleCmds.lineblock = r"""
			πF.SetLineno(596)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% lineblock environment\n\\DUprovidelength{\\DUlineblockindent}{2.5em}\n\\ifthenelse{\\isundefined{\\DUlineblock}}{\n  \\newenvironment{DUlineblock}[1]{%\n    \\list{}{\\setlength{\\partopsep}{\\parskip}\n            \\addtolength{\\partopsep}{\\baselineskip}\n            \\setlength{\\topsep}{0pt}\n            \\setlength{\\itemsep}{0.15\\baselineskip}\n            \\setlength{\\parsep}{0pt}\n            \\setlength{\\leftmargin}{#1}}\n    \\raggedright\n  }\n  {\\endlist}\n}{}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßlineblock, πTemp001); πE != nil {
				continue
			}
			// line 613: PreambleCmds.linking = r"""%% hyperlinks:
			πF.SetLineno(613)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("%% hyperlinks:\n\\ifthenelse{\\isundefined{\\hypersetup}}{\n  \\usepackage[%s]{hyperref}\n  \\usepackage{bookmark}\n  \\urlstyle{same} %% normal text font (alternatives: tt, rm, sf)\n}{}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßlinking, πTemp001); πE != nil {
				continue
			}
			// line 620: PreambleCmds.minitoc = r"""%% local table of contents
			πF.SetLineno(620)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("%% local table of contents\n\\usepackage{minitoc}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßminitoc, πTemp001); πE != nil {
				continue
			}
			// line 623: PreambleCmds.optionlist = r"""
			πF.SetLineno(623)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% optionlist environment\n\\providecommand*{\\DUoptionlistlabel}[1]{\\bf #1 \\hfill}\n\\DUprovidelength{\\DUoptionlistindent}{3cm}\n\\ifthenelse{\\isundefined{\\DUoptionlist}}{\n  \\newenvironment{DUoptionlist}{%\n    \\list{}{\\setlength{\\labelwidth}{\\DUoptionlistindent}\n            \\setlength{\\rightmargin}{1cm}\n            \\setlength{\\leftmargin}{\\rightmargin}\n            \\addtolength{\\leftmargin}{\\labelwidth}\n            \\addtolength{\\leftmargin}{\\labelsep}\n            \\renewcommand{\\makelabel}{\\DUoptionlistlabel}}\n  }\n  {\\endlist}\n}{}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßoptionlist, πTemp001); πE != nil {
				continue
			}
			// line 640: PreambleCmds.providelength = r"""
			πF.SetLineno(640)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% providelength (provide a length variable and set default, if it is new)\n\\providecommand*{\\DUprovidelength}[2]{\n  \\ifthenelse{\\isundefined{#1}}{\\newlength{#1}\\setlength{#1}{#2}}{}\n}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßprovidelength, πTemp001); πE != nil {
				continue
			}
			// line 646: PreambleCmds.rubric = r"""
			πF.SetLineno(646)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% rubric (informal heading)\n\\providecommand*{\\DUrubric}[1]{\\subsubsection*{\\emph{#1}}}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßrubric, πTemp001); πE != nil {
				continue
			}
			// line 650: PreambleCmds.sidebar = r"""
			πF.SetLineno(650)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% sidebar (text outside the main text flow)\n\\providecommand{\\DUsidebar}[1]{%\n  \\begin{center}\n    \\colorbox[gray]{0.80}{\\parbox{0.9\\linewidth}{#1}}\n  \\end{center}\n}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßsidebar, πTemp001); πE != nil {
				continue
			}
			// line 658: PreambleCmds.subtitle = r"""
			πF.SetLineno(658)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% subtitle (for sidebar)\n\\providecommand*{\\DUsubtitle}[1]{\\par\\emph{#1}\\smallskip}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßsubtitle, πTemp001); πE != nil {
				continue
			}
			// line 662: PreambleCmds.documentsubtitle = r"""
			πF.SetLineno(662)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% subtitle (in document title)\n\\providecommand*{\\DUdocumentsubtitle}[1]{{\\large #1}}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßdocumentsubtitle, πTemp001); πE != nil {
				continue
			}
			// line 666: PreambleCmds.table = r"""\usepackage{longtable,ltcaption,array}
			πF.SetLineno(666)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\\usepackage{longtable,ltcaption,array}\n\\setlength{\\extrarowheight}{2pt}\n\\newlength{\\DUtablewidth} % internal use in tables").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßtable, πTemp001); πE != nil {
				continue
			}
			// line 672: PreambleCmds.textcomp = """\
			πF.SetLineno(672)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\\usepackage{textcomp} % text symbol macros").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßtextcomp, πTemp001); πE != nil {
				continue
			}
			// line 675: PreambleCmds.textsubscript = r"""
			πF.SetLineno(675)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% text mode subscript\n\\ifx\\textsubscript\\undefined\n  \\usepackage{fixltx2e} % since 2015 loaded by default\n\\fi").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßtextsubscript, πTemp001); πE != nil {
				continue
			}
			// line 681: PreambleCmds.titlereference = r"""
			πF.SetLineno(681)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% titlereference role\n\\providecommand*{\\DUroletitlereference}[1]{\\textsl{#1}}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßtitlereference, πTemp001); πE != nil {
				continue
			}
			// line 685: PreambleCmds.title = r"""
			πF.SetLineno(685)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% title for topics, admonitions, unsupported section levels, and sidebar\n\\providecommand*{\\DUtitle}[2][class-arg]{%\n  % call \\DUtitle#1{#2} if it exists:\n  \\ifcsname DUtitle#1\\endcsname%\n    \\csname DUtitle#1\\endcsname{#2}%\n  \\else\n    \\smallskip\\noindent\\textbf{#2}\\smallskip%\n  \\fi\n}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßtitle, πTemp001); πE != nil {
				continue
			}
			// line 696: PreambleCmds.transition = r"""
			πF.SetLineno(696)
			if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n% transition (break, fancybreak, anonymous section)\n\\providecommand*{\\DUtransition}{%\n  \\hspace*{\\fill}\\hrulefill\\hspace*{\\fill}\n  \\vskip 0.5\\baselineskip\n}").ToObject()); πE != nil {
				continue
			}
			if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
				continue
			}
			if πE = πg.SetAttr(πF, πTemp006, ßtransition, πTemp001); πE != nil {
				continue
			}
			// line 708: class CharMaps(object):
			πF.SetLineno(708)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp007
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("CharMaps", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Dict
				_ = πTemp001
				var πTemp002 []*πg.Object
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 709: """LaTeX representations for active and Unicode characters."""
					πF.SetLineno(709)
					// line 709: """LaTeX representations for active and Unicode characters."""
					πF.SetLineno(709)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("LaTeX representations for active and Unicode characters.").ToObject()); πE != nil {
						continue
					}
					// line 712: alltt = {
					πF.SetLineno(712)
					πTemp001 = πg.NewDict()
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("\\").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\textbackslash{}").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("{").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\{").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("}").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\}").ToObject()); πE != nil {
						continue
					}
					πTemp003 = πTemp001.ToObject()
					if πE = πClass.SetItem(πF, ßalltt.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 718: special = {
					πF.SetLineno(718)
					πTemp001 = πg.NewDict()
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("#").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\#").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("$").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\$").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("%").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\%").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("&").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\&").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("~").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\textasciitilde{}").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = ß_.ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\_").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("^").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\textasciicircum{}").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("\"").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\textquotedbl{}").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("[").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("{[}").ToObject()); πE != nil {
						continue
					}
					πTemp002 = πF.MakeArgs(1)
					πTemp002[0] = πg.NewStr("]").ToObject()
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßord); πE != nil {
						continue
					}
					if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp002)
					if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("{]}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(173).ToObject(), πg.NewUnicode("\\-").ToObject()); πE != nil {
						continue
					}
					πTemp003 = πTemp001.ToObject()
					if πE = πClass.SetItem(πF, ßspecial.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 741: unsupported_unicode = {
					πF.SetLineno(741)
					πTemp001 = πg.NewDict()
					if πE = πTemp001.SetItem(πF, πg.NewInt(8192).ToObject(), πg.NewUnicode("\\enskip").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8193).ToObject(), πg.NewUnicode("\\quad").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8194).ToObject(), πg.NewUnicode("\\enskip").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8195).ToObject(), πg.NewUnicode("\\quad").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8200).ToObject(), πg.NewUnicode("\\,").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8203).ToObject(), πg.NewUnicode("\\hspace{0pt}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8239).ToObject(), πg.NewUnicode("\\,").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8209).ToObject(), πg.NewUnicode("\\hbox{-}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8491).ToObject(), πg.NewUnicode("\\AA").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8660).ToObject(), πg.NewUnicode("\\ensuremath{\\Leftrightarrow}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9824).ToObject(), πg.NewUnicode("\\ensuremath{\\spadesuit}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9827).ToObject(), πg.NewUnicode("\\ensuremath{\\clubsuit}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(64256).ToObject(), πg.NewUnicode("ff").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(64257).ToObject(), πg.NewUnicode("fi").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(64258).ToObject(), πg.NewUnicode("fl").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(64259).ToObject(), πg.NewUnicode("ffi").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(64260).ToObject(), πg.NewUnicode("ffl").ToObject()); πE != nil {
						continue
					}
					πTemp003 = πTemp001.ToObject()
					if πE = πClass.SetItem(πF, ßunsupported_unicode.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 765: utf8_supported_unicode = {
					πF.SetLineno(765)
					πTemp001 = πg.NewDict()
					if πE = πTemp001.SetItem(πF, πg.NewInt(160).ToObject(), πg.NewUnicode("~").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(171).ToObject(), πg.NewUnicode("\\guillemotleft{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(187).ToObject(), πg.NewUnicode("\\guillemotright{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8204).ToObject(), πg.NewUnicode("\\textcompwordmark{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8211).ToObject(), πg.NewUnicode("\\textendash{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8212).ToObject(), πg.NewUnicode("\\textemdash{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8216).ToObject(), πg.NewUnicode("\\textquoteleft{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8217).ToObject(), πg.NewUnicode("\\textquoteright{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8218).ToObject(), πg.NewUnicode("\\quotesinglbase{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8220).ToObject(), πg.NewUnicode("\\textquotedblleft{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8221).ToObject(), πg.NewUnicode("\\textquotedblright{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8222).ToObject(), πg.NewUnicode("\\quotedblbase{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8240).ToObject(), πg.NewUnicode("\\textperthousand{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8241).ToObject(), πg.NewUnicode("\\textpertenthousand{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8249).ToObject(), πg.NewUnicode("\\guilsinglleft{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8250).ToObject(), πg.NewUnicode("\\guilsinglright{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9251).ToObject(), πg.NewUnicode("\\textvisiblespace{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8224).ToObject(), πg.NewUnicode("\\dag{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8225).ToObject(), πg.NewUnicode("\\ddag{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8230).ToObject(), πg.NewUnicode("\\dots{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8482).ToObject(), πg.NewUnicode("\\texttrademark{}").ToObject()); πE != nil {
						continue
					}
					πTemp003 = πTemp001.ToObject()
					if πE = πClass.SetItem(πF, ßutf8_supported_unicode.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 789: textcomp = {
					πF.SetLineno(789)
					πTemp001 = πg.NewDict()
					if πE = πTemp001.SetItem(πF, πg.NewInt(162).ToObject(), πg.NewUnicode("\\textcent{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(164).ToObject(), πg.NewUnicode("\\textcurrency{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(165).ToObject(), πg.NewUnicode("\\textyen{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(166).ToObject(), πg.NewUnicode("\\textbrokenbar{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(167).ToObject(), πg.NewUnicode("\\textsection{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(168).ToObject(), πg.NewUnicode("\\textasciidieresis{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(169).ToObject(), πg.NewUnicode("\\textcopyright{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(170).ToObject(), πg.NewUnicode("\\textordfeminine{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(172).ToObject(), πg.NewUnicode("\\textlnot{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(174).ToObject(), πg.NewUnicode("\\textregistered{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(175).ToObject(), πg.NewUnicode("\\textasciimacron{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(176).ToObject(), πg.NewUnicode("\\textdegree{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(177).ToObject(), πg.NewUnicode("\\textpm{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(178).ToObject(), πg.NewUnicode("\\texttwosuperior{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(179).ToObject(), πg.NewUnicode("\\textthreesuperior{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(180).ToObject(), πg.NewUnicode("\\textasciiacute{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(181).ToObject(), πg.NewUnicode("\\textmu{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(182).ToObject(), πg.NewUnicode("\\textparagraph{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(185).ToObject(), πg.NewUnicode("\\textonesuperior{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(186).ToObject(), πg.NewUnicode("\\textordmasculine{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(188).ToObject(), πg.NewUnicode("\\textonequarter{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(189).ToObject(), πg.NewUnicode("\\textonehalf{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(190).ToObject(), πg.NewUnicode("\\textthreequarters{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(215).ToObject(), πg.NewUnicode("\\texttimes{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(247).ToObject(), πg.NewUnicode("\\textdiv{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(402).ToObject(), πg.NewUnicode("\\textflorin{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(697).ToObject(), πg.NewUnicode("\\textasciiacute{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(698).ToObject(), πg.NewUnicode("\\textacutedbl{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8214).ToObject(), πg.NewUnicode("\\textbardbl{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8226).ToObject(), πg.NewUnicode("\\textbullet{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8242).ToObject(), πg.NewUnicode("\\textasciiacute{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8243).ToObject(), πg.NewUnicode("\\textacutedbl{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8245).ToObject(), πg.NewUnicode("\\textasciigrave{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8246).ToObject(), πg.NewUnicode("\\textgravedbl{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8251).ToObject(), πg.NewUnicode("\\textreferencemark{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8253).ToObject(), πg.NewUnicode("\\textinterrobang{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8260).ToObject(), πg.NewUnicode("\\textfractionsolidus{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8261).ToObject(), πg.NewUnicode("\\textlquill{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8262).ToObject(), πg.NewUnicode("\\textrquill{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8274).ToObject(), πg.NewUnicode("\\textdiscount{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8353).ToObject(), πg.NewUnicode("\\textcolonmonetary{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8355).ToObject(), πg.NewUnicode("\\textfrenchfranc{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8356).ToObject(), πg.NewUnicode("\\textlira{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8358).ToObject(), πg.NewUnicode("\\textnaira{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8361).ToObject(), πg.NewUnicode("\\textwon{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8363).ToObject(), πg.NewUnicode("\\textdong{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8364).ToObject(), πg.NewUnicode("\\texteuro{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8369).ToObject(), πg.NewUnicode("\\textpeso{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8370).ToObject(), πg.NewUnicode("\\textguarani{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8451).ToObject(), πg.NewUnicode("\\textcelsius{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8470).ToObject(), πg.NewUnicode("\\textnumero{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8471).ToObject(), πg.NewUnicode("\\textcircledP{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8478).ToObject(), πg.NewUnicode("\\textrecipe{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8480).ToObject(), πg.NewUnicode("\\textservicemark{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8482).ToObject(), πg.NewUnicode("\\texttrademark{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8486).ToObject(), πg.NewUnicode("\\textohm{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8487).ToObject(), πg.NewUnicode("\\textmho{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8494).ToObject(), πg.NewUnicode("\\textestimated{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8592).ToObject(), πg.NewUnicode("\\textleftarrow{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8593).ToObject(), πg.NewUnicode("\\textuparrow{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8594).ToObject(), πg.NewUnicode("\\textrightarrow{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8595).ToObject(), πg.NewUnicode("\\textdownarrow{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8722).ToObject(), πg.NewUnicode("\\textminus{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8727).ToObject(), πg.NewUnicode("\\textasteriskcentered{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(8730).ToObject(), πg.NewUnicode("\\textsurd{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9250).ToObject(), πg.NewUnicode("\\textblank{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9702).ToObject(), πg.NewUnicode("\\textopenbullet{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9711).ToObject(), πg.NewUnicode("\\textbigcircle{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9834).ToObject(), πg.NewUnicode("\\textmusicalnote{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9901).ToObject(), πg.NewUnicode("\\textmarried{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9902).ToObject(), πg.NewUnicode("\\textdivorced{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(10216).ToObject(), πg.NewUnicode("\\textlangle{}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(10217).ToObject(), πg.NewUnicode("\\textrangle{}").ToObject()); πE != nil {
						continue
					}
					πTemp003 = πTemp001.ToObject()
					if πE = πClass.SetItem(πF, ßtextcomp.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 867: pifont = {
					πF.SetLineno(867)
					πTemp001 = πg.NewDict()
					if πE = πTemp001.SetItem(πF, πg.NewInt(9829).ToObject(), πg.NewUnicode("\\ding{170}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(9830).ToObject(), πg.NewUnicode("\\ding{169}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(10003).ToObject(), πg.NewUnicode("\\ding{51}").ToObject()); πE != nil {
						continue
					}
					if πE = πTemp001.SetItem(πF, πg.NewInt(10007).ToObject(), πg.NewUnicode("\\ding{55}").ToObject()); πE != nil {
						continue
					}
					πTemp003 = πTemp001.ToObject()
					if πE = πClass.SetItem(πF, ßpifont.ToObject(), πTemp003); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("CharMaps").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßCharMaps.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 879: class DocumentClass(object):
			πF.SetLineno(879)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp007
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("DocumentClass", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 880: """Details of a LaTeX document class."""
					πF.SetLineno(880)
					// line 880: """Details of a LaTeX document class."""
					πF.SetLineno(880)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("Details of a LaTeX document class.").ToObject()); πE != nil {
						continue
					}
					// line 882: def __init__(self, document_class, with_part=False):
					πF.SetLineno(882)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "document_class", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "with_part", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µdocument_class *πg.Object = πArgs[1]
						_ = µdocument_class
						var µwith_part *πg.Object = πArgs[2]
						_ = µwith_part
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 883: self.document_class = document_class
							πF.SetLineno(883)
							if πE = πg.CheckLocal(πF, µdocument_class, "document_class"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µdocument_class); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdocument_class, πTemp001); πE != nil {
								continue
							}
							// line 884: self._with_part = with_part
							πF.SetLineno(884)
							if πE = πg.CheckLocal(πF, µwith_part, "with_part"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µwith_part); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_with_part, πTemp001); πE != nil {
								continue
							}
							// line 885: self.sections = ['section', 'subsection', 'subsubsection',
							πF.SetLineno(885)
							πTemp002 = make([]*πg.Object, 5)
							πTemp002[0] = ßsection.ToObject()
							πTemp002[1] = ßsubsection.ToObject()
							πTemp002[2] = ßsubsubsection.ToObject()
							πTemp002[3] = ßparagraph.ToObject()
							πTemp002[4] = ßsubparagraph.ToObject()
							πTemp001 = πg.NewList(πTemp002...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsections, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßdocument_class, nil); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple5(ßbook.ToObject(), ßmemoir.ToObject(), ßreport.ToObject(), ßscrbook.ToObject(), ßscrreprt.ToObject()).ToObject()
							if πTemp005, πE = πg.Contains(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 887: if self.document_class in ('book', 'memoir', 'report',
							πF.SetLineno(887)
						Label1:
							// line 889: self.sections.insert(0, 'chapter')
							πF.SetLineno(889)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp002[1] = ßchapter.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsections, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label2
						Label2:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_with_part, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label3
							}
							goto Label4
							// line 890: if self._with_part:
							πF.SetLineno(890)
						Label3:
							// line 891: self.sections.insert(0, 'part')
							πF.SetLineno(891)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewInt(0).ToObject()
							πTemp002[1] = ßpart.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsections, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 893: def section(self, level):
					πF.SetLineno(893)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "level", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("section", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µlevel *πg.Object = πArgs[1]
						_ = µlevel
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 894: """Return the LaTeX section name for section `level`.
							πF.SetLineno(894)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsections, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.LE(πF, µlevel, πTemp004); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 899: if level <= len(self.sections):
							πF.SetLineno(899)
						Label1:
							// line 900: return self.sections[level-1]
							πF.SetLineno(900)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Sub(πF, µlevel, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßsections, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πR = πTemp003
							continue
							goto Label3
						Label2:
							// line 902: return 'DUtitle[section%s]' % roman.toRoman(level)
							πF.SetLineno(902)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							πTemp002[0] = µlevel
							if πTemp003, πE = πg.ResolveGlobal(πF, ßroman); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßtoRoman, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("DUtitle[section%s]").ToObject(), πTemp003); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßsection.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 894: """Return the LaTeX section name for section `level`.
					πF.SetLineno(894)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, πg.NewStr("Return the LaTeX section name for section `level`.\n\n        The name depends on the specific document class.\n        Level is 1,2,3..., as level 0 is the title.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßsection); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp005, ß__doc__, πTemp004); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("DocumentClass").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßDocumentClass.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 904: class Table(object):
			πF.SetLineno(904)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ßobject); πE != nil {
				continue
			}
			πTemp002[0] = πTemp007
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("Table", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 *πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 *πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				var πTemp020 *πg.Object
				_ = πTemp020
				var πTemp021 *πg.Object
				_ = πTemp021
				var πTemp022 *πg.Object
				_ = πTemp022
				var πTemp023 *πg.Object
				_ = πTemp023
				var πTemp024 *πg.Object
				_ = πTemp024
				var πTemp025 *πg.Object
				_ = πTemp025
				var πTemp026 *πg.Object
				_ = πTemp026
				var πTemp027 *πg.Object
				_ = πTemp027
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 905: """Manage a table while traversing.
					πF.SetLineno(905)
					// line 905: """Manage a table while traversing.
					πF.SetLineno(905)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("Manage a table while traversing.\n\n    Maybe change to a mixin defining the visit/departs, but then\n    class Table internal variables are in the Translator.\n\n    Table style might be\n\n    :standard:   horizontal and vertical lines\n    :booktabs:   only horizontal lines (requires \"booktabs\" LaTeX package)\n    :borderless: no borders around table cells\n    :nolines:    alias for borderless\n\n    :colwidths-auto:  column widths determined by LaTeX\n    :colwidths-given: use colum widths from rST source\n    ").ToObject()); πE != nil {
						continue
					}
					// line 920: def __init__(self, translator, latex_type):
					πF.SetLineno(920)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "translator", Def: nil}
					πTemp002[2] = πg.Param{Name: "latex_type", Def: nil}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtranslator *πg.Object = πArgs[1]
						_ = µtranslator
						var µlatex_type *πg.Object = πArgs[2]
						_ = µlatex_type
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Dict
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 921: self._translator = translator
							πF.SetLineno(921)
							if πE = πg.CheckLocal(πF, µtranslator, "translator"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µtranslator); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_translator, πTemp001); πE != nil {
								continue
							}
							// line 922: self._latex_type = latex_type
							πF.SetLineno(922)
							if πE = πg.CheckLocal(πF, µlatex_type, "latex_type"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µlatex_type); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_latex_type, πTemp001); πE != nil {
								continue
							}
							// line 923: self._open = False
							πF.SetLineno(923)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_open, πTemp002); πE != nil {
								continue
							}
							// line 925: self._attrs = {}
							πF.SetLineno(925)
							πTemp003 = πg.NewDict()
							πTemp001 = πTemp003.ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_attrs, πTemp002); πE != nil {
								continue
							}
							// line 926: self._col_width = []
							πF.SetLineno(926)
							πTemp004 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_col_width, πTemp002); πE != nil {
								continue
							}
							// line 927: self._rowspan = []
							πF.SetLineno(927)
							πTemp004 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_rowspan, πTemp002); πE != nil {
								continue
							}
							// line 928: self.stubs = []
							πF.SetLineno(928)
							πTemp004 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstubs, πTemp002); πE != nil {
								continue
							}
							// line 929: self.colwidths_auto = False
							πF.SetLineno(929)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcolwidths_auto, πTemp002); πE != nil {
								continue
							}
							// line 930: self._in_thead = 0
							πF.SetLineno(930)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_in_thead, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 932: def open(self):
					πF.SetLineno(932)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("open", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 933: self._open = True
							πF.SetLineno(933)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_open, πTemp002); πE != nil {
								continue
							}
							// line 934: self._col_specs = []
							πF.SetLineno(934)
							πTemp003 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp003...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_col_specs, πTemp002); πE != nil {
								continue
							}
							// line 935: self.caption = []
							πF.SetLineno(935)
							πTemp003 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp003...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcaption, πTemp002); πE != nil {
								continue
							}
							// line 936: self._attrs = {}
							πF.SetLineno(936)
							πTemp004 = πg.NewDict()
							πTemp001 = πTemp004.ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_attrs, πTemp002); πE != nil {
								continue
							}
							// line 937: self._in_head = False # maybe context with search
							πF.SetLineno(937)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_in_head, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßopen.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 938: def close(self):
					πF.SetLineno(938)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("close", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 939: self._open = False
							πF.SetLineno(939)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_open, πTemp002); πE != nil {
								continue
							}
							// line 940: self._col_specs = None
							πF.SetLineno(940)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_col_specs, πTemp002); πE != nil {
								continue
							}
							// line 941: self.caption = []
							πF.SetLineno(941)
							πTemp003 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp003...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcaption, πTemp002); πE != nil {
								continue
							}
							// line 942: self._attrs = {}
							πF.SetLineno(942)
							πTemp004 = πg.NewDict()
							πTemp001 = πTemp004.ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_attrs, πTemp002); πE != nil {
								continue
							}
							// line 943: self.stubs = []
							πF.SetLineno(943)
							πTemp003 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp003...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstubs, πTemp002); πE != nil {
								continue
							}
							// line 944: self.colwidths_auto = False
							πF.SetLineno(944)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcolwidths_auto, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßclose.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 946: def is_open(self):
					πF.SetLineno(946)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("is_open", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 947: return self._open
							πF.SetLineno(947)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_open, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßis_open.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 949: def set_table_style(self, table_style, classes):
					πF.SetLineno(949)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "table_style", Def: nil}
					πTemp002[2] = πg.Param{Name: "classes", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("set_table_style", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtable_style *πg.Object = πArgs[1]
						_ = µtable_style
						var µclasses *πg.Object = πArgs[2]
						_ = µclasses
						var µborders *πg.Object = πg.UnboundLocal
						_ = µborders
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []πg.Param
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.BaseException
						_ = πTemp005
						var πTemp006 *πg.Traceback
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 bool
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 950: borders = [cls.replace('nolines', 'borderless')
							πF.SetLineno(950)
							πTemp003 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µcls *πg.Object = πg.UnboundLocal
								_ = µcls
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 bool
								_ = πTemp003
								var πTemp004 bool
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 []*πg.Object
								_ = πTemp006
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 6:
											goto Label6
										default:
											panic("unexpected function state")
										}
										if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
											continue
										}
										if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
											continue
										}
										if πTemp002, πE = πg.Add(πF, µtable_style, µclasses); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp003 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp003 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp004 = !isStop
										} else {
											πTemp004 = true
											µcls = πTemp002
										}
										if πE != nil || !πTemp004 {
											continue
										}
										πF.PushCheckpoint(1)
										if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
											continue
										}
										πTemp005 = πg.NewTuple4(ßstandard.ToObject(), ßbooktabs.ToObject(), ßborderless.ToObject(), ßnolines.ToObject()).ToObject()
										if πTemp004, πE = πg.Contains(πF, πTemp005, µcls); πE != nil {
											continue
										}
										πTemp002 = πg.GetBool(πTemp004).ToObject()
										if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
											continue
										}
										if πTemp004 {
											goto Label4
										}
										goto Label5
										// line 950: borders = [cls.replace('nolines', 'borderless')
										πF.SetLineno(950)
									Label4:
										// line 950: borders = [cls.replace('nolines', 'borderless')
										πF.SetLineno(950)
										πTemp006 = πF.MakeArgs(2)
										πTemp006[0] = ßnolines.ToObject()
										πTemp006[1] = ßborderless.ToObject()
										if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
											continue
										}
										if πTemp002, πE = πg.GetAttr(πF, µcls, ßreplace, nil); πE != nil {
											continue
										}
										if πTemp005, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp006)
										πF.PushCheckpoint(6)
										return πTemp005, nil
									Label6:
										πTemp002 = πSent
										goto Label5
									Label5:
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ListType.Call(πF, πg.Args{πTemp004}, nil); πE != nil {
								continue
							}
							µborders = πTemp001
							// line 953: try:
							πF.SetLineno(953)
							πF.PushCheckpoint(2)
							// line 954: self.borders = borders[-1]
							πF.SetLineno(954)
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004
							if πE = πg.CheckLocal(πF, µborders, "borders"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µborders, πTemp001); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßborders, πTemp001); πE != nil {
								continue
							}
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp005, πTemp006 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßIndexError); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsInstance(πF, πTemp005.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label3
							}
							πE = πF.Raise(πTemp005.ToObject(), nil, πTemp006.ToObject())
							continue
							// line 955: except IndexError:
							πF.SetLineno(955)
						Label3:
							// line 956: self.borders = 'standard'
							πF.SetLineno(956)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, ßstandard.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßborders, πTemp001); πE != nil {
								continue
							}
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
							// line 957: self.colwidths_auto = (('colwidths-auto' in classes
							πF.SetLineno(957)
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.Contains(πF, µclasses, πg.NewStr("colwidths-auto").ToObject()); πE != nil {
								continue
							}
							πTemp009 = πg.GetBool(πTemp010).ToObject()
							πTemp004 = πTemp009
							if πTemp008, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if !πTemp008 {
								goto Label5
							}
							if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.Contains(πF, µtable_style, πg.NewStr("colwidths-given").ToObject()); πE != nil {
								continue
							}
							πTemp009 = πg.GetBool(!πTemp010).ToObject()
							πTemp004 = πTemp009
						Label5:
							πTemp001 = πTemp004
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µtable_style, "table_style"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.Contains(πF, µtable_style, πg.NewStr("colwidths-auto").ToObject()); πE != nil {
								continue
							}
							πTemp009 = πg.GetBool(πTemp010).ToObject()
							πTemp004 = πTemp009
							if πTemp008, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if !πTemp008 {
								goto Label6
							}
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.Contains(πF, µclasses, πg.NewStr("colwidths-given").ToObject()); πE != nil {
								continue
							}
							πTemp009 = πg.GetBool(!πTemp010).ToObject()
							πTemp004 = πTemp009
						Label6:
							πTemp001 = πTemp004
						Label4:
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcolwidths_auto, πTemp004); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_table_style.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 962: def get_latex_type(self):
					πF.SetLineno(962)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp007 = πg.NewFunction(πg.NewCode("get_latex_type", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_latex_type, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp004, ßlongtable.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßcaption, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp005).ToObject()
							πTemp001 = πTemp003
						Label1:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							goto Label3
							// line 963: if self._latex_type == 'longtable' and not self.caption:
							πF.SetLineno(963)
						Label2:
							// line 965: return('longtable*')
							πF.SetLineno(965)
							πR = πg.NewStr("longtable*").ToObject()
							continue
							goto Label3
						Label3:
							// line 966: return self._latex_type
							πF.SetLineno(966)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_latex_type, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_latex_type.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 968: def set(self, attr, value):
					πF.SetLineno(968)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "attr", Def: nil}
					πTemp002[2] = πg.Param{Name: "value", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("set", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µattr *πg.Object = πArgs[1]
						_ = µattr
						var µvalue *πg.Object = πArgs[2]
						_ = µvalue
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 969: self._attrs[attr] = value
							πF.SetLineno(969)
							if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µvalue); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_attrs, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattr, "attr"); πE != nil {
								continue
							}
							πTemp003 = µattr
							if πE = πg.SetItem(πF, πTemp002, πTemp003, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 970: def get(self, attr):
					πF.SetLineno(970)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "attr", Def: nil}
					πTemp009 = πg.NewFunction(πg.NewCode("get", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µattr *πg.Object = πArgs[1]
						_ = µattr
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µattr, "attr"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_attrs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp002, µattr); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 971: if attr in self._attrs:
							πF.SetLineno(971)
						Label1:
							// line 972: return self._attrs[attr]
							πF.SetLineno(972)
							if πE = πg.CheckLocal(πF, µattr, "attr"); πE != nil {
								continue
							}
							πTemp001 = µattr
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_attrs, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πR = πTemp002
							continue
							goto Label2
						Label2:
							// line 973: return None
							πF.SetLineno(973)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget.ToObject(), πTemp009); πE != nil {
						continue
					}
					// line 975: def get_vertical_bar(self):
					πF.SetLineno(975)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("get_vertical_bar", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßborders, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp002, ßstandard.ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 976: if self.borders == 'standard':
							πF.SetLineno(976)
						Label1:
							// line 977: return '|'
							πF.SetLineno(977)
							πR = πg.NewStr("|").ToObject()
							continue
							goto Label2
						Label2:
							// line 978: return ''
							πF.SetLineno(978)
							πR = ß.ToObject()
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_vertical_bar.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 981: def get_opening(self, width=r'\linewidth'):
					πF.SetLineno(981)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "width", Def: πg.NewStr("\\linewidth").ToObject()}
					πTemp011 = πg.NewFunction(πg.NewCode("get_opening", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µwidth *πg.Object = πArgs[1]
						_ = µwidth
						var µalign_map *πg.Object = πg.UnboundLocal
						_ = µalign_map
						var µalign *πg.Object = πg.UnboundLocal
						_ = µalign
						var µopening *πg.Object = πg.UnboundLocal
						_ = µopening
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 982: align_map = {'left': 'l',
							πF.SetLineno(982)
							πTemp001 = πg.NewDict()
							if πE = πTemp001.SetItem(πF, ßleft.ToObject(), ßl.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßcenter.ToObject(), ßc.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßright.ToObject(), ßr.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp001.ToObject()
							µalign_map = πTemp002
							// line 985: align = align_map.get(self.get('align') or 'center')
							πF.SetLineno(985)
							πTemp003 = πF.MakeArgs(1)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßalign.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßget, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp002 = πTemp007
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							πTemp002 = ßcenter.ToObject()
						Label1:
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µalign_map, "align_map"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µalign_map, ßget, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µalign = πTemp006
							// line 986: opening = [r'\begin{%s}[%s]' % (self.get_latex_type(), align)]
							πF.SetLineno(986)
							πTemp003 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßget_latex_type, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µalign, "align"); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple2(πTemp008, µalign).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\begin{%s}[%s]").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							πTemp002 = πg.NewList(πTemp003...).ToObject()
							µopening = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßcolwidths_auto, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(!πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							goto Label3
							// line 987: if not self.colwidths_auto:
							πF.SetLineno(987)
						Label2:
							// line 988: opening.insert(0, r'\setlength{\DUtablewidth}{%s}'%width)
							πF.SetLineno(988)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\setlength{\\DUtablewidth}{%s}").ToObject(), µwidth); πE != nil {
								continue
							}
							πTemp003[1] = πTemp002
							if πE = πg.CheckLocal(πF, µopening, "opening"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µopening, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label3
						Label3:
							// line 989: return '\n'.join(opening)
							πF.SetLineno(989)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µopening, "opening"); πE != nil {
								continue
							}
							πTemp003[0] = µopening
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πR = πTemp006
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_opening.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 991: def get_closing(self):
					πF.SetLineno(991)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("get_closing", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µclosing *πg.Object = πg.UnboundLocal
						_ = µclosing
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 992: closing = []
							πF.SetLineno(992)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µclosing = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßborders, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp003, ßbooktabs.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 993: if self.borders == 'booktabs':
							πF.SetLineno(993)
						Label1:
							// line 994: closing.append(r'\bottomrule')
							πF.SetLineno(994)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\bottomrule").ToObject()
							if πE = πg.CheckLocal(πF, µclosing, "closing"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µclosing, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
							// line 997: closing.append(r'\end{%s}' % self.get_latex_type())
							πF.SetLineno(997)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßget_latex_type, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\end{%s}").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µclosing, "closing"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µclosing, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 998: return '\n'.join(closing)
							πF.SetLineno(998)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µclosing, "closing"); πE != nil {
								continue
							}
							πTemp001[0] = µclosing
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πR = πTemp003
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_closing.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 1000: def visit_colspec(self, node):
					πF.SetLineno(1000)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp013 = πg.NewFunction(πg.NewCode("visit_colspec", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1001: self._col_specs.append(node)
							πF.SetLineno(1001)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_col_specs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1003: self.stubs.append(node.attributes.get('stub'))
							πF.SetLineno(1003)
							πTemp001 = πF.MakeArgs(1)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßstub.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßstubs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_colspec.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 1005: def get_colspecs(self, node):
					πF.SetLineno(1005)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("get_colspecs", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µbar *πg.Object = πg.UnboundLocal
						_ = µbar
						var µlatex_table_spec *πg.Object = πg.UnboundLocal
						_ = µlatex_table_spec
						var µwidth *πg.Object = πg.UnboundLocal
						_ = µwidth
						var µtotal_width *πg.Object = πg.UnboundLocal
						_ = µtotal_width
						var µcolwidth *πg.Object = πg.UnboundLocal
						_ = µcolwidth
						var µfactor *πg.Object = πg.UnboundLocal
						_ = µfactor
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 8:
								goto Label8
							case 9:
								goto Label9
							case 3:
								goto Label3
							case 4:
								goto Label4
							default:
								panic("unexpected function state")
							}
							// line 1006: """Return column specification for longtable.
							πF.SetLineno(1006)
							// line 1017: bar = self.get_vertical_bar()
							πF.SetLineno(1017)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßget_vertical_bar, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µbar = πTemp002
							// line 1018: self._rowspan= [0] * len(self._col_specs)
							πF.SetLineno(1018)
							πTemp003 = make([]*πg.Object, 1)
							πTemp003[0] = πg.NewInt(0).ToObject()
							πTemp002 = πg.NewList(πTemp003...).ToObject()
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_col_specs, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Mul(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_rowspan, πTemp002); πE != nil {
								continue
							}
							// line 1019: self._col_width = []
							πF.SetLineno(1019)
							πTemp003 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp003...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_col_width, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcolwidths_auto, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 1020: if self.colwidths_auto:
							πF.SetLineno(1020)
						Label1:
							// line 1021: latex_table_spec = (bar+'l')*len(self._col_specs)
							πF.SetLineno(1021)
							if πE = πg.CheckLocal(πF, µbar, "bar"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µbar, ßl.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_col_specs, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.Mul(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							µlatex_table_spec = πTemp001
							// line 1022: return latex_table_spec+bar
							πF.SetLineno(1022)
							if πE = πg.CheckLocal(πF, µlatex_table_spec, "latex_table_spec"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbar, "bar"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, µlatex_table_spec, µbar); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							goto Label2
						Label2:
							// line 1023: width = 80
							πF.SetLineno(1023)
							µwidth = πg.NewInt(80).ToObject()
							// line 1024: total_width = 0.0
							πF.SetLineno(1024)
							µtotal_width = πg.NewFloat(0.0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_col_specs, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(4)
							πTemp006 = false
						Label3:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label5
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µnode = πTemp002
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(3)
							// line 1027: colwidth = float(node['colwidth']+1) / width
							πF.SetLineno(1027)
							πTemp003 = πF.MakeArgs(1)
							πTemp005 = ßcolwidth.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetItem(πF, µnode, πTemp005); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp008, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Div(πF, πTemp005, µwidth); πE != nil {
								continue
							}
							µcolwidth = πTemp002
							// line 1028: total_width += colwidth
							πF.SetLineno(1028)
							if πE = πg.CheckLocal(πF, µtotal_width, "total_width"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcolwidth, "colwidth"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, µtotal_width, µcolwidth); πE != nil {
								continue
							}
							µtotal_width = πTemp002
							continue
						Label4:
							if πE != nil || πR != nil {
								continue
							}
						Label5:
							// line 1030: factor = 0.93
							πF.SetLineno(1030)
							µfactor = πg.NewFloat(0.93).ToObject()
							if πE = πg.CheckLocal(πF, µtotal_width, "total_width"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GT(πF, µtotal_width, πg.NewFloat(1.0).ToObject()); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label6
							}
							goto Label7
							// line 1031: if total_width > 1.0:
							πF.SetLineno(1031)
						Label6:
							// line 1032: factor /= total_width
							πF.SetLineno(1032)
							if πE = πg.CheckLocal(πF, µfactor, "factor"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtotal_width, "total_width"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IDiv(πF, µfactor, µtotal_width); πE != nil {
								continue
							}
							µfactor = πTemp001
							goto Label7
						Label7:
							// line 1033: latex_table_spec = ''
							πF.SetLineno(1033)
							µlatex_table_spec = ß.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_col_specs, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
								continue
							}
							πF.PushCheckpoint(9)
							πTemp006 = false
						Label8:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label10
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µnode = πTemp002
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(8)
							// line 1035: colwidth = factor * float(node['colwidth']+1) / width
							πF.SetLineno(1035)
							if πE = πg.CheckLocal(πF, µfactor, "factor"); πE != nil {
								continue
							}
							πTemp003 = πF.MakeArgs(1)
							πTemp008 = ßcolwidth.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetItem(πF, µnode, πTemp008); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Add(πF, πTemp009, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.Mul(πF, µfactor, πTemp008); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Div(πF, πTemp004, µwidth); πE != nil {
								continue
							}
							µcolwidth = πTemp002
							// line 1036: self._col_width.append(colwidth+0.005)
							πF.SetLineno(1036)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcolwidth, "colwidth"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µcolwidth, πg.NewFloat(0.005).ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_col_width, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1037: latex_table_spec += '%sp{%.3f\\DUtablewidth}' % (bar, colwidth+0.005)
							πF.SetLineno(1037)
							if πE = πg.CheckLocal(πF, µlatex_table_spec, "latex_table_spec"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbar, "bar"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcolwidth, "colwidth"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Add(πF, µcolwidth, πg.NewFloat(0.005).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple2(µbar, πTemp005).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%sp{%.3f\\DUtablewidth}").ToObject(), πTemp004); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IAdd(πF, µlatex_table_spec, πTemp002); πE != nil {
								continue
							}
							µlatex_table_spec = πTemp004
							continue
						Label9:
							if πE != nil || πR != nil {
								continue
							}
						Label10:
							// line 1038: return latex_table_spec+bar
							πF.SetLineno(1038)
							if πE = πg.CheckLocal(πF, µlatex_table_spec, "latex_table_spec"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbar, "bar"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, µlatex_table_spec, µbar); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_colspecs.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 1006: """Return column specification for longtable.
					πF.SetLineno(1006)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp015}, πg.NewStr("Return column specification for longtable.\n\n        Assumes reST line length being 80 characters.\n        Table width is hairy.\n\n        === ===\n        ABC DEF\n        === ===\n\n        usually gets to narrow, therefore we add 1 (fiddlefactor).\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp016, πE = πg.ResolveClass(πF, πClass, nil, ßget_colspecs); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp016, ß__doc__, πTemp015); πE != nil {
						continue
					}
					// line 1040: def get_column_width(self):
					πF.SetLineno(1040)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("get_column_width", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.BaseException
						_ = πTemp005
						var πTemp006 *πg.Traceback
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 1041: """Return columnwidth for current cell (not multicell)."""
							πF.SetLineno(1041)
							// line 1042: try:
							πF.SetLineno(1042)
							πF.PushCheckpoint(2)
							// line 1043: return '%.2f\\DUtablewidth' % self._col_width[self._cell_in_row]
							πF.SetLineno(1043)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_cell_in_row, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_col_width, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%.2f\\DUtablewidth").ToObject(), πTemp003); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp005, πTemp006 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßIndexError); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsInstance(πF, πTemp005.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label3
							}
							πE = πF.Raise(πTemp005.ToObject(), nil, πTemp006.ToObject())
							continue
							// line 1044: except IndexError:
							πF.SetLineno(1044)
						Label3:
							// line 1045: return '*'
							πF.SetLineno(1045)
							πR = πg.NewStr("*").ToObject()
							continue
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_column_width.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 1041: """Return columnwidth for current cell (not multicell)."""
					πF.SetLineno(1041)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp016}, πg.NewStr("Return columnwidth for current cell (not multicell).").ToObject()); πE != nil {
						continue
					}
					if πTemp017, πE = πg.ResolveClass(πF, πClass, nil, ßget_column_width); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp017, ß__doc__, πTemp016); πE != nil {
						continue
					}
					// line 1047: def get_multicolumn_width(self, start, len_):
					πF.SetLineno(1047)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "start", Def: nil}
					πTemp002[2] = πg.Param{Name: "len_", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("get_multicolumn_width", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µstart *πg.Object = πArgs[1]
						_ = µstart
						var µlen_ *πg.Object = πArgs[2]
						_ = µlen_
						var µmc_width *πg.Object = πg.UnboundLocal
						_ = µmc_width
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []πg.Param
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.BaseException
						_ = πTemp006
						var πTemp007 *πg.Traceback
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 1048: """Return sum of columnwidths for multicell."""
							πF.SetLineno(1048)
							// line 1049: try:
							πF.SetLineno(1049)
							πF.PushCheckpoint(2)
							// line 1050: mc_width = sum([width
							πF.SetLineno(1050)
							πTemp001 = πF.MakeArgs(1)
							πTemp004 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µwidth *πg.Object = πg.UnboundLocal
								_ = µwidth
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 []πg.Param
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πTemp007 bool
								_ = πTemp007
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										πTemp004 = make([]πg.Param, 0)
										πTemp003 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp004, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
											var µco *πg.Object = πg.UnboundLocal
											_ = µco
											var πTemp001 *πg.Object
											_ = πTemp001
											var πTemp002 []*πg.Object
											_ = πTemp002
											var πTemp003 *πg.Object
											_ = πTemp003
											var πTemp004 *πg.Object
											_ = πTemp004
											var πTemp005 bool
											_ = πTemp005
											var πTemp006 bool
											_ = πTemp006
											var πTemp007 *πg.Object
											_ = πTemp007
											var πR *πg.Object
											_ = πR
											var πE *πg.BaseException
											_ = πE
											return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
												for ; πF.State() >= 0; πF.PopCheckpoint() {
													switch πF.State() {
													case 0:
													case 1:
														goto Label1
													case 2:
														goto Label2
													case 4:
														goto Label4
													default:
														panic("unexpected function state")
													}
													πTemp002 = πF.MakeArgs(1)
													if πE = πg.CheckLocal(πF, µlen_, "len_"); πE != nil {
														continue
													}
													πTemp002[0] = µlen_
													if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
														continue
													}
													if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
														continue
													}
													πF.FreeArgs(πTemp002)
													if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
														continue
													}
													πF.PushCheckpoint(2)
													πTemp005 = false
												Label1:
													if πE != nil || πR != nil {
														continue
													}
													if πTemp005 {
														πF.PopCheckpoint()
														goto Label3
													}
													if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
														isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
														if exc != nil {
															πE = exc
														} else if isStop {
															πE = nil
															πF.RestoreExc(nil, nil)
														}
														πTemp006 = !isStop
													} else {
														πTemp006 = true
														µco = πTemp003
													}
													if πE != nil || !πTemp006 {
														continue
													}
													πF.PushCheckpoint(1)
													// line 1051: for width in ([self._col_width[start + co]
													πF.SetLineno(1051)
													if πE = πg.CheckLocal(πF, µstart, "start"); πE != nil {
														continue
													}
													if πE = πg.CheckLocal(πF, µco, "co"); πE != nil {
														continue
													}
													if πTemp004, πE = πg.Add(πF, µstart, µco); πE != nil {
														continue
													}
													πTemp003 = πTemp004
													if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
														continue
													}
													if πTemp007, πE = πg.GetAttr(πF, µself, ß_col_width, nil); πE != nil {
														continue
													}
													if πTemp004, πE = πg.GetItem(πF, πTemp007, πTemp003); πE != nil {
														continue
													}
													πF.PushCheckpoint(4)
													return πTemp004, nil
												Label4:
													πTemp003 = πSent
													continue
												Label2:
													if πE != nil || πR != nil {
														continue
													}
												Label3:
												}
												return nil, πE
											}).ToObject(), nil
										}), πF.Globals()).ToObject()
										if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
											continue
										}
										if πTemp002, πE = πg.ListType.Call(πF, πg.Args{πTemp005}, nil); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp006 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp006 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp007 = !isStop
										} else {
											πTemp007 = true
											µwidth = πTemp002
										}
										if πE != nil || !πTemp007 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 1050: mc_width = sum([width
										πF.SetLineno(1050)
										if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
											continue
										}
										πF.PushCheckpoint(4)
										return µwidth, nil
									Label4:
										πTemp002 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ListType.Call(πF, πg.Args{πTemp005}, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßsum); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmc_width = πTemp005
							// line 1053: return 'p{%.2f\\DUtablewidth}' % mc_width
							πF.SetLineno(1053)
							if πE = πg.CheckLocal(πF, µmc_width, "mc_width"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("p{%.2f\\DUtablewidth}").ToObject(), µmc_width); πE != nil {
								continue
							}
							πR = πTemp002
							continue
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp006, πTemp007 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßIndexError); πE != nil {
								continue
							}
							if πTemp008, πE = πg.IsInstance(πF, πTemp006.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label3
							}
							πE = πF.Raise(πTemp006.ToObject(), nil, πTemp007.ToObject())
							continue
							// line 1054: except IndexError:
							πF.SetLineno(1054)
						Label3:
							// line 1055: return 'l'
							πF.SetLineno(1055)
							πR = ßl.ToObject()
							continue
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_multicolumn_width.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 1048: """Return sum of columnwidths for multicell."""
					πF.SetLineno(1048)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp017}, πg.NewStr("Return sum of columnwidths for multicell.").ToObject()); πE != nil {
						continue
					}
					if πTemp018, πE = πg.ResolveClass(πF, πClass, nil, ßget_multicolumn_width); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp018, ß__doc__, πTemp017); πE != nil {
						continue
					}
					// line 1057: def get_caption(self):
					πF.SetLineno(1057)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp017 = πg.NewFunction(πg.NewCode("get_caption", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µcaption *πg.Object = πg.UnboundLocal
						_ = µcaption
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcaption, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1058: if not self.caption:
							πF.SetLineno(1058)
						Label1:
							// line 1059: return ''
							πF.SetLineno(1059)
							πR = ß.ToObject()
							continue
							goto Label2
						Label2:
							// line 1060: caption = ''.join(self.caption)
							πF.SetLineno(1060)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcaption, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πTemp001, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µcaption = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_translator, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßthead_depth, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πg.NewInt(1).ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 1061: if 1 == self._translator.thead_depth():
							πF.SetLineno(1061)
						Label3:
							// line 1062: return r'\caption{%s}\\' '\n' % caption
							πF.SetLineno(1062)
							if πE = πg.CheckLocal(πF, µcaption, "caption"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\caption{%s}\\\\\n").ToObject(), µcaption); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							goto Label4
						Label4:
							// line 1063: return r'\caption[]{%s (... continued)}\\' '\n' % caption
							πF.SetLineno(1063)
							if πE = πg.CheckLocal(πF, µcaption, "caption"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\caption[]{%s (... continued)}\\\\\n").ToObject(), µcaption); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_caption.ToObject(), πTemp017); πE != nil {
						continue
					}
					// line 1065: def need_recurse(self):
					πF.SetLineno(1065)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp018 = πg.NewFunction(πg.NewCode("need_recurse", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_latex_type, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp002, ßlongtable.ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1066: if self._latex_type == 'longtable':
							πF.SetLineno(1066)
						Label1:
							// line 1067: return 1 == self._translator.thead_depth()
							πF.SetLineno(1067)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_translator, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßthead_depth, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πg.NewInt(1).ToObject(), πTemp002); πE != nil {
								continue
							}
							πR = πTemp001
							continue
							goto Label2
						Label2:
							// line 1068: return 0
							πF.SetLineno(1068)
							πR = πg.NewInt(0).ToObject()
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßneed_recurse.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 1070: def visit_thead(self):
					πF.SetLineno(1070)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp019 = πg.NewFunction(πg.NewCode("visit_thead", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1071: self._in_thead += 1
							πF.SetLineno(1071)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_in_thead, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_in_thead, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßborders, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp002, ßstandard.ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßborders, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp002, ßbooktabs.ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label2
							}
							goto Label3
							// line 1072: if self.borders == 'standard':
							πF.SetLineno(1072)
						Label1:
							// line 1073: return ['\\hline\n']
							πF.SetLineno(1073)
							πTemp004 = make([]*πg.Object, 1)
							πTemp004[0] = πg.NewStr("\\hline\n").ToObject()
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πR = πTemp001
							continue
							goto Label3
							// line 1074: elif self.borders == 'booktabs':
							πF.SetLineno(1074)
						Label2:
							// line 1075: return ['\\toprule\n']
							πF.SetLineno(1075)
							πTemp004 = make([]*πg.Object, 1)
							πTemp004[0] = πg.NewStr("\\toprule\n").ToObject()
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πR = πTemp001
							continue
							goto Label3
						Label3:
							// line 1076: return []
							πF.SetLineno(1076)
							πTemp004 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_thead.ToObject(), πTemp019); πE != nil {
						continue
					}
					// line 1078: def depart_thead(self):
					πF.SetLineno(1078)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp020 = πg.NewFunction(πg.NewCode("depart_thead", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µa *πg.Object = πg.UnboundLocal
						_ = µa
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1079: a = []
							πF.SetLineno(1079)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µa = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßborders, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp003, ßbooktabs.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 1082: if self.borders == 'booktabs':
							πF.SetLineno(1082)
						Label1:
							// line 1083: a.append('\\midrule\n')
							πF.SetLineno(1083)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\midrule\n").ToObject()
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µa, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_latex_type, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp003, ßlongtable.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label3
							}
							goto Label4
							// line 1084: if self._latex_type == 'longtable':
							πF.SetLineno(1084)
						Label3:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_translator, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßthead_depth, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πg.NewInt(1).ToObject(), πTemp003); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label5
							}
							goto Label6
							// line 1085: if 1 == self._translator.thead_depth():
							πF.SetLineno(1085)
						Label5:
							// line 1086: a.append('\\endfirsthead\n')
							πF.SetLineno(1086)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\endfirsthead\n").ToObject()
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µa, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label7
						Label6:
							// line 1088: a.append('\\endhead\n')
							πF.SetLineno(1088)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\endhead\n").ToObject()
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µa, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1089: a.append(r'\multicolumn{%d}{c}' % len(self._col_specs) +
							πF.SetLineno(1089)
							πTemp001 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ß_col_specs, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\multicolumn{%d}{c}").ToObject(), πTemp007); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("{\\hfill ... continued on next page} \\\\").ToObject()); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µa, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1091: a.append('\n\\endfoot\n\\endlastfoot\n')
							πF.SetLineno(1091)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n\\endfoot\n\\endlastfoot\n").ToObject()
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µa, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label7
						Label7:
							goto Label4
						Label4:
							// line 1093: self._in_thead -= 1
							πF.SetLineno(1093)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_in_thead, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ISub(πF, πTemp002, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_in_thead, πTemp003); πE != nil {
								continue
							}
							// line 1094: return a
							πF.SetLineno(1094)
							if πE = πg.CheckLocal(πF, µa, "a"); πE != nil {
								continue
							}
							πR = µa
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_thead.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 1096: def visit_row(self):
					πF.SetLineno(1096)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp021 = πg.NewFunction(πg.NewCode("visit_row", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1097: self._cell_in_row = 0
							πF.SetLineno(1097)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_cell_in_row, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_row.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 1099: def depart_row(self):
					πF.SetLineno(1099)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp022 = πg.NewFunction(πg.NewCode("depart_row", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µres *πg.Object = πg.UnboundLocal
						_ = µres
						var µi *πg.Object = πg.UnboundLocal
						_ = µi
						var µrowspans *πg.Object = πg.UnboundLocal
						_ = µrowspans
						var µcline *πg.Object = πg.UnboundLocal
						_ = µcline
						var µc_start *πg.Object = πg.UnboundLocal
						_ = µc_start
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 []πg.Param
						_ = πTemp010
						var πTemp011 *πg.BaseException
						_ = πTemp011
						var πTemp012 *πg.Traceback
						_ = πTemp012
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							case 11:
								goto Label11
							case 12:
								goto Label12
							case 15:
								goto Label15
							default:
								panic("unexpected function state")
							}
							// line 1100: res = [' \\\\\n']
							πF.SetLineno(1100)
							πTemp001 = make([]*πg.Object, 1)
							πTemp001[0] = πg.NewStr(" \\\\\n").ToObject()
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µres = πTemp002
							// line 1101: self._cell_in_row = None  # remove cell counter
							πF.SetLineno(1101)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_cell_in_row, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πF.MakeArgs(1)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_rowspan, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001[0] = πTemp005
							if πTemp003, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp006 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp007 = !isStop
							} else {
								πTemp007 = true
								µi = πTemp003
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(1)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp005 = µi
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µself, ß_rowspan, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetItem(πF, πTemp009, πTemp005); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, πTemp008, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label4
							}
							goto Label5
							// line 1103: if (self._rowspan[i]>0):
							πF.SetLineno(1103)
						Label4:
							// line 1104: self._rowspan[i] -= 1
							πF.SetLineno(1104)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp003 = µi
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µself, ß_rowspan, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp008, πTemp003); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ISub(πF, πTemp005, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µself, ß_rowspan, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp009 = µi
							if πE = πg.SetItem(πF, πTemp008, πTemp009, πTemp003); πE != nil {
								continue
							}
							goto Label5
						Label5:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßborders, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp003, ßstandard.ToObject()); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label6
							}
							goto Label7
							// line 1106: if self.borders == 'standard':
							πF.SetLineno(1106)
						Label6:
							// line 1107: rowspans = [i+1 for i in range(len(self._rowspan))
							πF.SetLineno(1107)
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µi *πg.Object = πg.UnboundLocal
								_ = µi
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []*πg.Object
								_ = πTemp002
								var πTemp003 []*πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πTemp007 bool
								_ = πTemp007
								var πTemp008 *πg.Object
								_ = πTemp008
								var πTemp009 *πg.Object
								_ = πTemp009
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 6:
											goto Label6
										default:
											panic("unexpected function state")
										}
										πTemp002 = πF.MakeArgs(1)
										πTemp003 = πF.MakeArgs(1)
										if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
											continue
										}
										if πTemp004, πE = πg.GetAttr(πF, µself, ß_rowspan, nil); πE != nil {
											continue
										}
										πTemp003[0] = πTemp004
										if πTemp004, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
											continue
										}
										if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp003)
										πTemp002[0] = πTemp005
										if πTemp004, πE = πg.ResolveGlobal(πF, ßrange); πE != nil {
											continue
										}
										if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp002)
										if πTemp001, πE = πg.Iter(πF, πTemp005); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp006 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp006 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp007 = !isStop
										} else {
											πTemp007 = true
											µi = πTemp004
										}
										if πE != nil || !πTemp007 {
											continue
										}
										πF.PushCheckpoint(1)
										if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
											continue
										}
										πTemp005 = µi
										if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
											continue
										}
										if πTemp009, πE = πg.GetAttr(πF, µself, ß_rowspan, nil); πE != nil {
											continue
										}
										if πTemp008, πE = πg.GetItem(πF, πTemp009, πTemp005); πE != nil {
											continue
										}
										if πTemp004, πE = πg.LE(πF, πTemp008, πg.NewInt(0).ToObject()); πE != nil {
											continue
										}
										if πTemp007, πE = πg.IsTrue(πF, πTemp004); πE != nil {
											continue
										}
										if πTemp007 {
											goto Label4
										}
										goto Label5
										// line 1107: rowspans = [i+1 for i in range(len(self._rowspan))
										πF.SetLineno(1107)
									Label4:
										// line 1107: rowspans = [i+1 for i in range(len(self._rowspan))
										πF.SetLineno(1107)
										if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
											continue
										}
										if πTemp004, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
											continue
										}
										πF.PushCheckpoint(6)
										return πTemp004, nil
									Label6:
										πTemp005 = πSent
										goto Label5
									Label5:
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ListType.Call(πF, πg.Args{πTemp005}, nil); πE != nil {
								continue
							}
							µrowspans = πTemp002
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µrowspans, "rowspans"); πE != nil {
								continue
							}
							πTemp001[0] = µrowspans
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ß_rowspan, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Eq(πF, πTemp008, πTemp009); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label8
							}
							goto Label9
							// line 1109: if len(rowspans)==len(self._rowspan):
							πF.SetLineno(1109)
						Label8:
							// line 1110: res.append('\\hline\n')
							πF.SetLineno(1110)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\hline\n").ToObject()
							if πE = πg.CheckLocal(πF, µres, "res"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µres, ßappend, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label10
						Label9:
							// line 1112: cline = ''
							πF.SetLineno(1112)
							µcline = ß.ToObject()
							// line 1113: rowspans.reverse()
							πF.SetLineno(1113)
							if πE = πg.CheckLocal(πF, µrowspans, "rowspans"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µrowspans, ßreverse, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 1115: while True:
							πF.SetLineno(1115)
							πF.PushCheckpoint(12)
							πTemp006 = false
						Label11:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp006 {
								πF.PopCheckpoint()
								goto Label13
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πE != nil || !πTemp007 {
								continue
							}
							πF.PushCheckpoint(11)
							// line 1116: try:
							πF.SetLineno(1116)
							πF.PushCheckpoint(15)
							// line 1117: c_start = rowspans.pop()
							πF.SetLineno(1117)
							if πE = πg.CheckLocal(πF, µrowspans, "rowspans"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µrowspans, ßpop, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µc_start = πTemp005
							πF.PopCheckpoint()
							goto Label14
						Label15:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp011, πTemp012 = πF.ExcInfo()
							goto Label16
							// line 1118: except:
							πF.SetLineno(1118)
						Label16:
							// line 1119: break
							πF.SetLineno(1119)
							πTemp006 = true
							continue
							πF.RestoreExc(nil, nil)
							goto Label14
						Label14:
							// line 1120: cline += '\\cline{%d-%d}\n' % (c_start, c_start)
							πF.SetLineno(1120)
							if πE = πg.CheckLocal(πF, µcline, "cline"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µc_start, "c_start"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µc_start, "c_start"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(µc_start, µc_start).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\cline{%d-%d}\n").ToObject(), πTemp005); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IAdd(πF, µcline, πTemp002); πE != nil {
								continue
							}
							µcline = πTemp005
							continue
						Label12:
							if πE != nil || πR != nil {
								continue
							}
						Label13:
							// line 1121: res.append(cline)
							πF.SetLineno(1121)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcline, "cline"); πE != nil {
								continue
							}
							πTemp001[0] = µcline
							if πE = πg.CheckLocal(πF, µres, "res"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µres, ßappend, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label10
						Label10:
							goto Label7
						Label7:
							// line 1122: return res
							πF.SetLineno(1122)
							if πE = πg.CheckLocal(πF, µres, "res"); πE != nil {
								continue
							}
							πR = µres
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_row.ToObject(), πTemp022); πE != nil {
						continue
					}
					// line 1124: def set_rowspan(self, cell, value):
					πF.SetLineno(1124)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "cell", Def: nil}
					πTemp002[2] = πg.Param{Name: "value", Def: nil}
					πTemp023 = πg.NewFunction(πg.NewCode("set_rowspan", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µcell *πg.Object = πArgs[1]
						_ = µcell
						var µvalue *πg.Object = πArgs[2]
						_ = µvalue
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.BaseException
						_ = πTemp004
						var πTemp005 *πg.Traceback
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 1125: try:
							πF.SetLineno(1125)
							πF.PushCheckpoint(2)
							// line 1126: self._rowspan[cell] = value
							πF.SetLineno(1126)
							if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, µvalue); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_rowspan, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcell, "cell"); πE != nil {
								continue
							}
							πTemp003 = µcell
							if πE = πg.SetItem(πF, πTemp002, πTemp003, πTemp001); πE != nil {
								continue
							}
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp004, πTemp005 = πF.ExcInfo()
							goto Label3
							// line 1127: except:
							πF.SetLineno(1127)
						Label3:
							// line 1128: pass
							πF.SetLineno(1128)
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_rowspan.ToObject(), πTemp023); πE != nil {
						continue
					}
					// line 1130: def get_rowspan(self, cell):
					πF.SetLineno(1130)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "cell", Def: nil}
					πTemp024 = πg.NewFunction(πg.NewCode("get_rowspan", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µcell *πg.Object = πArgs[1]
						_ = µcell
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.BaseException
						_ = πTemp004
						var πTemp005 *πg.Traceback
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 1131: try:
							πF.SetLineno(1131)
							πF.PushCheckpoint(2)
							// line 1132: return self._rowspan[cell]
							πF.SetLineno(1132)
							if πE = πg.CheckLocal(πF, µcell, "cell"); πE != nil {
								continue
							}
							πTemp001 = µcell
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_rowspan, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp003, πTemp001); πE != nil {
								continue
							}
							πR = πTemp002
							continue
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp004, πTemp005 = πF.ExcInfo()
							goto Label3
							// line 1133: except:
							πF.SetLineno(1133)
						Label3:
							// line 1134: return 0
							πF.SetLineno(1134)
							πR = πg.NewInt(0).ToObject()
							continue
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_rowspan.ToObject(), πTemp024); πE != nil {
						continue
					}
					// line 1136: def get_entry_number(self):
					πF.SetLineno(1136)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp025 = πg.NewFunction(πg.NewCode("get_entry_number", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1137: return self._cell_in_row
							πF.SetLineno(1137)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_cell_in_row, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßget_entry_number.ToObject(), πTemp025); πE != nil {
						continue
					}
					// line 1139: def visit_entry(self):
					πF.SetLineno(1139)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp026 = πg.NewFunction(πg.NewCode("visit_entry", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1140: self._cell_in_row += 1
							πF.SetLineno(1140)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_cell_in_row, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_cell_in_row, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_entry.ToObject(), πTemp026); πE != nil {
						continue
					}
					// line 1142: def is_stub_column(self):
					πF.SetLineno(1142)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp027 = πg.NewFunction(πg.NewCode("is_stub_column", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßstubs, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_cell_in_row, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GE(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 1143: if len(self.stubs) >= self._cell_in_row:
							πF.SetLineno(1143)
						Label1:
							// line 1144: return self.stubs[self._cell_in_row]
							πF.SetLineno(1144)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_cell_in_row, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßstubs, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πR = πTemp003
							continue
							goto Label2
						Label2:
							// line 1145: return False
							πF.SetLineno(1145)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßis_stub_column.ToObject(), πTemp027); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("Table").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßTable.ToObject(), πTemp007); πE != nil {
				continue
			}
			// line 1148: class LaTeXTranslator(nodes.NodeVisitor):
			πF.SetLineno(1148)
			πTemp002 = make([]*πg.Object, 1)
			if πTemp007, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
				continue
			}
			if πTemp009, πE = πg.GetAttr(πF, πTemp007, ßNodeVisitor, nil); πE != nil {
				continue
			}
			πTemp002[0] = πTemp009
			πTemp008 = πg.NewDict()
			if πTemp001, πE = πF.Globals().GetItem(πF, ß__name__.ToObject()); πE != nil {
				continue
			}
			if πE = πTemp008.SetItem(πF, ß__module__.ToObject(), πTemp001); πE != nil {
				continue
			}
			_, πE = πg.NewCode("LaTeXTranslator", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", nil, 0, func(πF *πg.Frame, _ []*πg.Object) (*πg.Object, *πg.BaseException) {
				πClass := πTemp008
				_ = πClass
				var πTemp001 *πg.Object
				_ = πTemp001
				var πTemp002 []πg.Param
				_ = πTemp002
				var πTemp003 *πg.Object
				_ = πTemp003
				var πTemp004 *πg.Object
				_ = πTemp004
				var πTemp005 *πg.Object
				_ = πTemp005
				var πTemp006 *πg.Object
				_ = πTemp006
				var πTemp007 *πg.Object
				_ = πTemp007
				var πTemp008 *πg.Object
				_ = πTemp008
				var πTemp009 []*πg.Object
				_ = πTemp009
				var πTemp010 *πg.Object
				_ = πTemp010
				var πTemp011 *πg.Object
				_ = πTemp011
				var πTemp012 *πg.Object
				_ = πTemp012
				var πTemp013 *πg.Object
				_ = πTemp013
				var πTemp014 *πg.Object
				_ = πTemp014
				var πTemp015 *πg.Object
				_ = πTemp015
				var πTemp016 *πg.Object
				_ = πTemp016
				var πTemp017 *πg.Object
				_ = πTemp017
				var πTemp018 *πg.Object
				_ = πTemp018
				var πTemp019 *πg.Object
				_ = πTemp019
				var πTemp020 *πg.Object
				_ = πTemp020
				var πTemp021 *πg.Object
				_ = πTemp021
				var πTemp022 *πg.Object
				_ = πTemp022
				var πTemp023 *πg.Object
				_ = πTemp023
				var πTemp024 *πg.Object
				_ = πTemp024
				var πTemp025 *πg.Object
				_ = πTemp025
				var πTemp026 *πg.Object
				_ = πTemp026
				var πTemp027 *πg.Object
				_ = πTemp027
				var πTemp028 *πg.Object
				_ = πTemp028
				var πTemp029 *πg.Object
				_ = πTemp029
				var πTemp030 *πg.Object
				_ = πTemp030
				var πTemp031 *πg.Object
				_ = πTemp031
				var πTemp032 *πg.Object
				_ = πTemp032
				var πTemp033 *πg.Object
				_ = πTemp033
				var πTemp034 *πg.Object
				_ = πTemp034
				var πTemp035 *πg.Object
				_ = πTemp035
				var πTemp036 *πg.Object
				_ = πTemp036
				var πTemp037 *πg.Object
				_ = πTemp037
				var πTemp038 *πg.Object
				_ = πTemp038
				var πTemp039 *πg.Object
				_ = πTemp039
				var πTemp040 *πg.Object
				_ = πTemp040
				var πTemp041 *πg.Object
				_ = πTemp041
				var πTemp042 *πg.Object
				_ = πTemp042
				var πTemp043 *πg.Object
				_ = πTemp043
				var πTemp044 *πg.Object
				_ = πTemp044
				var πTemp045 *πg.Object
				_ = πTemp045
				var πTemp046 *πg.Object
				_ = πTemp046
				var πTemp047 *πg.Object
				_ = πTemp047
				var πTemp048 *πg.Object
				_ = πTemp048
				var πTemp049 *πg.Object
				_ = πTemp049
				var πTemp050 *πg.Object
				_ = πTemp050
				var πTemp051 *πg.Object
				_ = πTemp051
				var πTemp052 *πg.Object
				_ = πTemp052
				var πTemp053 *πg.Object
				_ = πTemp053
				var πTemp054 *πg.Object
				_ = πTemp054
				var πTemp055 *πg.Object
				_ = πTemp055
				var πTemp056 *πg.Object
				_ = πTemp056
				var πTemp057 *πg.Object
				_ = πTemp057
				var πTemp058 *πg.Object
				_ = πTemp058
				var πTemp059 *πg.Object
				_ = πTemp059
				var πTemp060 *πg.Object
				_ = πTemp060
				var πTemp061 *πg.Object
				_ = πTemp061
				var πTemp062 *πg.Object
				_ = πTemp062
				var πTemp063 *πg.Object
				_ = πTemp063
				var πTemp064 *πg.Object
				_ = πTemp064
				var πTemp065 *πg.Object
				_ = πTemp065
				var πTemp066 *πg.Object
				_ = πTemp066
				var πTemp067 *πg.Object
				_ = πTemp067
				var πTemp068 *πg.Object
				_ = πTemp068
				var πTemp069 *πg.Object
				_ = πTemp069
				var πTemp070 *πg.Object
				_ = πTemp070
				var πTemp071 *πg.Object
				_ = πTemp071
				var πTemp072 *πg.Object
				_ = πTemp072
				var πTemp073 *πg.Object
				_ = πTemp073
				var πTemp074 *πg.Object
				_ = πTemp074
				var πTemp075 *πg.Object
				_ = πTemp075
				var πTemp076 *πg.Object
				_ = πTemp076
				var πTemp077 *πg.Object
				_ = πTemp077
				var πTemp078 *πg.Object
				_ = πTemp078
				var πTemp079 *πg.Object
				_ = πTemp079
				var πTemp080 *πg.Object
				_ = πTemp080
				var πTemp081 *πg.Object
				_ = πTemp081
				var πTemp082 *πg.Object
				_ = πTemp082
				var πTemp083 *πg.Object
				_ = πTemp083
				var πTemp084 *πg.Object
				_ = πTemp084
				var πTemp085 *πg.Object
				_ = πTemp085
				var πTemp086 *πg.Object
				_ = πTemp086
				var πTemp087 *πg.Object
				_ = πTemp087
				var πTemp088 *πg.Object
				_ = πTemp088
				var πTemp089 *πg.Object
				_ = πTemp089
				var πTemp090 *πg.Object
				_ = πTemp090
				var πTemp091 *πg.Object
				_ = πTemp091
				var πTemp092 *πg.Object
				_ = πTemp092
				var πTemp093 *πg.Object
				_ = πTemp093
				var πTemp094 *πg.Object
				_ = πTemp094
				var πTemp095 *πg.Object
				_ = πTemp095
				var πTemp096 *πg.Object
				_ = πTemp096
				var πTemp097 *πg.Object
				_ = πTemp097
				var πTemp098 *πg.Object
				_ = πTemp098
				var πTemp099 *πg.Object
				_ = πTemp099
				var πTemp100 *πg.Object
				_ = πTemp100
				var πTemp101 *πg.Object
				_ = πTemp101
				var πTemp102 *πg.Object
				_ = πTemp102
				var πTemp103 *πg.Object
				_ = πTemp103
				var πTemp104 *πg.Object
				_ = πTemp104
				var πTemp105 *πg.Object
				_ = πTemp105
				var πTemp106 *πg.Object
				_ = πTemp106
				var πTemp107 *πg.Object
				_ = πTemp107
				var πTemp108 *πg.Object
				_ = πTemp108
				var πTemp109 *πg.Object
				_ = πTemp109
				var πTemp110 *πg.Object
				_ = πTemp110
				var πTemp111 *πg.Object
				_ = πTemp111
				var πTemp112 *πg.Object
				_ = πTemp112
				var πTemp113 *πg.Object
				_ = πTemp113
				var πTemp114 *πg.Object
				_ = πTemp114
				var πTemp115 *πg.Object
				_ = πTemp115
				var πTemp116 *πg.Object
				_ = πTemp116
				var πTemp117 *πg.Object
				_ = πTemp117
				var πTemp118 *πg.Object
				_ = πTemp118
				var πTemp119 *πg.Object
				_ = πTemp119
				var πTemp120 *πg.Object
				_ = πTemp120
				var πTemp121 *πg.Object
				_ = πTemp121
				var πTemp122 *πg.Object
				_ = πTemp122
				var πTemp123 *πg.Object
				_ = πTemp123
				var πTemp124 *πg.Object
				_ = πTemp124
				var πTemp125 *πg.Object
				_ = πTemp125
				var πTemp126 *πg.Object
				_ = πTemp126
				var πTemp127 *πg.Object
				_ = πTemp127
				var πTemp128 *πg.Object
				_ = πTemp128
				var πTemp129 *πg.Object
				_ = πTemp129
				var πTemp130 *πg.Object
				_ = πTemp130
				var πTemp131 *πg.Object
				_ = πTemp131
				var πTemp132 *πg.Object
				_ = πTemp132
				var πTemp133 *πg.Object
				_ = πTemp133
				var πTemp134 *πg.Object
				_ = πTemp134
				var πTemp135 *πg.Object
				_ = πTemp135
				var πTemp136 *πg.Object
				_ = πTemp136
				var πTemp137 *πg.Object
				_ = πTemp137
				var πTemp138 *πg.Object
				_ = πTemp138
				var πTemp139 *πg.Object
				_ = πTemp139
				var πTemp140 *πg.Object
				_ = πTemp140
				var πTemp141 *πg.Object
				_ = πTemp141
				var πTemp142 *πg.Object
				_ = πTemp142
				var πTemp143 *πg.Object
				_ = πTemp143
				var πTemp144 *πg.Object
				_ = πTemp144
				var πTemp145 *πg.Object
				_ = πTemp145
				var πTemp146 *πg.Object
				_ = πTemp146
				var πTemp147 *πg.Object
				_ = πTemp147
				var πTemp148 *πg.Object
				_ = πTemp148
				var πTemp149 *πg.Object
				_ = πTemp149
				var πTemp150 *πg.Object
				_ = πTemp150
				var πTemp151 *πg.Object
				_ = πTemp151
				var πTemp152 *πg.Object
				_ = πTemp152
				var πTemp153 *πg.Object
				_ = πTemp153
				var πTemp154 *πg.Object
				_ = πTemp154
				var πTemp155 *πg.Object
				_ = πTemp155
				var πTemp156 *πg.Object
				_ = πTemp156
				var πTemp157 *πg.Object
				_ = πTemp157
				var πTemp158 *πg.Object
				_ = πTemp158
				var πTemp159 *πg.Object
				_ = πTemp159
				var πTemp160 *πg.Object
				_ = πTemp160
				var πTemp161 *πg.Object
				_ = πTemp161
				var πTemp162 *πg.Object
				_ = πTemp162
				var πTemp163 *πg.Object
				_ = πTemp163
				var πTemp164 *πg.Object
				_ = πTemp164
				var πTemp165 *πg.Object
				_ = πTemp165
				var πTemp166 *πg.Object
				_ = πTemp166
				var πTemp167 *πg.Dict
				_ = πTemp167
				var πTemp168 *πg.Object
				_ = πTemp168
				var πTemp169 *πg.Object
				_ = πTemp169
				var πTemp170 *πg.Object
				_ = πTemp170
				var πTemp171 *πg.Object
				_ = πTemp171
				var πTemp172 *πg.Object
				_ = πTemp172
				var πTemp173 *πg.Object
				_ = πTemp173
				var πTemp174 *πg.Object
				_ = πTemp174
				var πTemp175 *πg.Object
				_ = πTemp175
				var πTemp176 *πg.Object
				_ = πTemp176
				var πTemp177 *πg.Object
				_ = πTemp177
				var πTemp178 *πg.Object
				_ = πTemp178
				var πTemp179 *πg.Object
				_ = πTemp179
				var πTemp180 *πg.Object
				_ = πTemp180
				var πTemp181 *πg.Object
				_ = πTemp181
				var πTemp182 *πg.Object
				_ = πTemp182
				var πTemp183 *πg.Object
				_ = πTemp183
				var πTemp184 *πg.Object
				_ = πTemp184
				var πTemp185 *πg.Object
				_ = πTemp185
				var πTemp186 *πg.Object
				_ = πTemp186
				var πTemp187 *πg.Object
				_ = πTemp187
				var πTemp188 *πg.Object
				_ = πTemp188
				var πTemp189 *πg.Object
				_ = πTemp189
				var πTemp190 *πg.Object
				_ = πTemp190
				var πTemp191 *πg.Object
				_ = πTemp191
				var πTemp192 *πg.Object
				_ = πTemp192
				var πTemp193 *πg.Object
				_ = πTemp193
				var πTemp194 *πg.Object
				_ = πTemp194
				var πTemp195 *πg.Object
				_ = πTemp195
				var πTemp196 *πg.Object
				_ = πTemp196
				var πTemp197 *πg.Object
				_ = πTemp197
				var πTemp198 *πg.Object
				_ = πTemp198
				var πTemp199 *πg.Object
				_ = πTemp199
				var πTemp200 *πg.Object
				_ = πTemp200
				var πTemp201 *πg.Object
				_ = πTemp201
				var πTemp202 *πg.Object
				_ = πTemp202
				for ; πF.State() >= 0; πF.PopCheckpoint() {
					switch πF.State() {
					case 0:
					default:
						panic("unexpected function state")
					}
					// line 1149: """
					πF.SetLineno(1149)
					// line 1149: """
					πF.SetLineno(1149)
					if πE = πClass.SetItem(πF, ß__doc__.ToObject(), πg.NewStr("\n    Generate code for 8-bit LaTeX from a Docutils document tree.\n\n    See the docstring of docutils.writers._html_base.HTMLTranslator for\n    notes on and examples of safe subclassing.\n    ").ToObject()); πE != nil {
						continue
					}
					// line 1162: is_xetex = False
					πF.SetLineno(1162)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßis_xetex.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1172: compound_enumerators = False
					πF.SetLineno(1172)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßcompound_enumerators.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1175: section_prefix_for_enumerators = False
					πF.SetLineno(1175)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßsection_prefix_for_enumerators.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1179: section_enumerator_separator = '-'
					πF.SetLineno(1179)
					if πE = πClass.SetItem(πF, ßsection_enumerator_separator.ToObject(), πg.NewStr("-").ToObject()); πE != nil {
						continue
					}
					// line 1184: has_latex_toc = False # is there a toc in the doc? (needed by minitoc)
					πF.SetLineno(1184)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßhas_latex_toc.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1185: is_toc_list = False   # is the current bullet_list a ToC?
					πF.SetLineno(1185)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßis_toc_list.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1186: section_level = 0
					πF.SetLineno(1186)
					if πE = πClass.SetItem(πF, ßsection_level.ToObject(), πg.NewInt(0).ToObject()); πE != nil {
						continue
					}
					// line 1190: inside_citation_reference_label = False
					πF.SetLineno(1190)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßinside_citation_reference_label.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1191: verbatim = False                   # do not encode
					πF.SetLineno(1191)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßverbatim.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1192: insert_non_breaking_blanks = False # replace blanks by "~"
					πF.SetLineno(1192)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßinsert_non_breaking_blanks.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1193: insert_newline = False             # add latex newline commands
					πF.SetLineno(1193)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßinsert_newline.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1194: literal = False                    # literal text (block or inline)
					πF.SetLineno(1194)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßliteral.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1195: alltt = False                      # inside `alltt` environment
					πF.SetLineno(1195)
					if πTemp001, πE = πg.ResolveClass(πF, πClass, nil, ßFalse); πE != nil {
						continue
					}
					if πE = πClass.SetItem(πF, ßalltt.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1197: def __init__(self, document, babel_class=Babel):
					πF.SetLineno(1197)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "document", Def: nil}
					if πTemp003, πE = πg.ResolveClass(πF, πClass, nil, ßBabel); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "babel_class", Def: πTemp003}
					πTemp001 = πg.NewFunction(πg.NewCode("__init__", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µdocument *πg.Object = πArgs[1]
						_ = µdocument
						var µbabel_class *πg.Object = πArgs[2]
						_ = µbabel_class
						var µsettings *πg.Object = πg.UnboundLocal
						_ = µsettings
						var µnone *πg.Object = πg.UnboundLocal
						_ = µnone
						var µd_options *πg.Object = πg.UnboundLocal
						_ = µd_options
						var µenc *πg.Object = πg.UnboundLocal
						_ = µenc
						var µsecnumdepth *πg.Object = πg.UnboundLocal
						_ = µsecnumdepth
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 []πg.Param
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 19:
								goto Label19
							case 20:
								goto Label20
							default:
								panic("unexpected function state")
							}
							// line 1198: nodes.NodeVisitor.__init__(self, document)
							πF.SetLineno(1198)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							if πE = πg.CheckLocal(πF, µdocument, "document"); πE != nil {
								continue
							}
							πTemp001[1] = µdocument
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßNodeVisitor, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ß__init__, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1201: self.warn = self.document.reporter.warning
							πF.SetLineno(1201)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßwarning, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßwarn, πTemp003); πE != nil {
								continue
							}
							// line 1202: self.error = self.document.reporter.error
							πF.SetLineno(1202)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßerror, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßerror, πTemp003); πE != nil {
								continue
							}
							// line 1206: self.settings = settings = document.settings
							πF.SetLineno(1206)
							if πE = πg.CheckLocal(πF, µdocument, "document"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdocument, ßsettings, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsettings, πTemp003); πE != nil {
								continue
							}
							µsettings = πTemp002
							// line 1207: self.latex_encoding = self.to_latex_encoding(settings.output_encoding)
							πF.SetLineno(1207)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßoutput_encoding, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßto_latex_encoding, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlatex_encoding, πTemp002); πE != nil {
								continue
							}
							// line 1208: self.use_latex_toc = settings.use_latex_toc
							πF.SetLineno(1208)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßuse_latex_toc, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßuse_latex_toc, πTemp003); πE != nil {
								continue
							}
							// line 1209: self.use_latex_docinfo = settings.use_latex_docinfo
							πF.SetLineno(1209)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßuse_latex_docinfo, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßuse_latex_docinfo, πTemp003); πE != nil {
								continue
							}
							// line 1210: self._use_latex_citations = settings.use_latex_citations
							πF.SetLineno(1210)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßuse_latex_citations, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_use_latex_citations, πTemp003); πE != nil {
								continue
							}
							// line 1211: self._reference_label = settings.reference_label
							πF.SetLineno(1211)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßreference_label, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_reference_label, πTemp003); πE != nil {
								continue
							}
							// line 1212: self.hyperlink_color = settings.hyperlink_color
							πF.SetLineno(1212)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßhyperlink_color, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßhyperlink_color, πTemp003); πE != nil {
								continue
							}
							// line 1213: self.compound_enumerators = settings.compound_enumerators
							πF.SetLineno(1213)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßcompound_enumerators, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcompound_enumerators, πTemp003); πE != nil {
								continue
							}
							// line 1214: self.font_encoding = getattr(settings, 'font_encoding', '')
							πF.SetLineno(1214)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							πTemp001[0] = µsettings
							πTemp001[1] = ßfont_encoding.ToObject()
							πTemp001[2] = ß.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßgetattr); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfont_encoding, πTemp002); πE != nil {
								continue
							}
							// line 1215: self.section_prefix_for_enumerators = (
							πF.SetLineno(1215)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßsection_prefix_for_enumerators, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_prefix_for_enumerators, πTemp003); πE != nil {
								continue
							}
							// line 1217: self.section_enumerator_separator = (
							πF.SetLineno(1217)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ß_.ToObject()
							πTemp001[1] = πg.NewStr("\\_").ToObject()
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßsection_enumerator_separator, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_enumerator_separator, πTemp003); πE != nil {
								continue
							}
							// line 1220: self.literal_block_env = ''
							πF.SetLineno(1220)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ß.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßliteral_block_env, πTemp002); πE != nil {
								continue
							}
							// line 1221: self.literal_block_options = ''
							πF.SetLineno(1221)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ß.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßliteral_block_options, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßliteral_block_env, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßuse_verbatim_when_possible, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							goto Label3
							// line 1222: if settings.literal_block_env:
							πF.SetLineno(1222)
						Label1:
							// line 1223: (none,
							πF.SetLineno(1223)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("(\\w+)(.*)").ToObject()
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßliteral_block_env, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßre); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp003}, πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp006}, πg.TieTarget{Target: &πTemp007}}}, πTemp002); πE != nil {
								continue
							}
							µnone = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßliteral_block_env, πTemp005); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßliteral_block_options, πTemp006); πE != nil {
								continue
							}
							µnone = πTemp007
							goto Label3
							// line 1227: elif settings.use_verbatim_when_possible:
							πF.SetLineno(1227)
						Label2:
							// line 1228: self.literal_block_env = 'verbatim'
							πF.SetLineno(1228)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ßverbatim.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßliteral_block_env, πTemp002); πE != nil {
								continue
							}
							goto Label3
						Label3:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßuse_bibtex, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 1230: if self.settings.use_bibtex:
							πF.SetLineno(1230)
						Label4:
							// line 1231: self.bibtex = self.settings.use_bibtex.split(',', 1)
							πF.SetLineno(1231)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr(",").ToObject()
							πTemp001[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßuse_bibtex, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßbibtex, πTemp002); πE != nil {
								continue
							}
							goto Label6
						Label5:
							// line 1234: self.bibtex = None
							πF.SetLineno(1234)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßbibtex, πTemp003); πE != nil {
								continue
							}
							goto Label6
						Label6:
							// line 1237: self.language_module = languages.get_language(settings.language_code,
							πF.SetLineno(1237)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßlanguage_code, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdocument, "document"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdocument, ßreporter, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlanguages); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget_language, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlanguage_module, πTemp003); πE != nil {
								continue
							}
							// line 1239: self.babel = babel_class(settings.language_code, document.reporter)
							πF.SetLineno(1239)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßlanguage_code, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µdocument, "document"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdocument, ßreporter, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πE = πg.CheckLocal(πF, µbabel_class, "babel_class"); πE != nil {
								continue
							}
							if πTemp002, πE = µbabel_class.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßbabel, πTemp003); πE != nil {
								continue
							}
							// line 1240: self.author_separator = self.language_module.author_separators[0]
							πF.SetLineno(1240)
							πTemp002 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßlanguage_module, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßauthor_separators, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp006, πTemp002); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßauthor_separator, πTemp002); πE != nil {
								continue
							}
							// line 1241: d_options = [self.settings.documentoptions]
							πF.SetLineno(1241)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdocumentoptions, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							µd_options = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßlanguage, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(ßenglish.ToObject(), ß.ToObject()).ToObject()
							if πTemp004, πE = πg.Contains(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(!πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label7
							}
							goto Label8
							// line 1242: if self.babel.language not in ('english', ''):
							πF.SetLineno(1242)
						Label7:
							// line 1243: d_options.append(self.babel.language)
							πF.SetLineno(1243)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßlanguage, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µd_options, "d_options"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µd_options, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label8
						Label8:
							// line 1244: self.documentoptions = ','.join(filter(None, d_options))
							πF.SetLineno(1244)
							πTemp001 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(2)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp008[0] = πTemp002
							if πE = πg.CheckLocal(πF, µd_options, "d_options"); πE != nil {
								continue
							}
							πTemp008[1] = µd_options
							if πTemp002, πE = πg.ResolveGlobal(πF, ßfilter); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr(",").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdocumentoptions, πTemp002); πE != nil {
								continue
							}
							// line 1245: self.d_class = DocumentClass(settings.documentclass,
							πF.SetLineno(1245)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßdocumentclass, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßuse_part_section, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßDocumentClass); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßd_class, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßgraphicx_option, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp005, ß.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label9
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßgraphicx_option, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp005, ßlower, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp005, ßauto.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label10
							}
							goto Label11
							// line 1248: if self.settings.graphicx_option == '':
							πF.SetLineno(1248)
						Label9:
							// line 1249: self.graphicx_package = r'\usepackage{graphicx}'
							πF.SetLineno(1249)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("\\usepackage{graphicx}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßgraphicx_package, πTemp002); πE != nil {
								continue
							}
							goto Label12
							// line 1250: elif self.settings.graphicx_option.lower() == 'auto':
							πF.SetLineno(1250)
						Label10:
							// line 1251: self.graphicx_package = PreambleCmds.graphicx_auto
							πF.SetLineno(1251)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßgraphicx_auto, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßgraphicx_package, πTemp002); πE != nil {
								continue
							}
							goto Label12
						Label11:
							// line 1253: self.graphicx_package = (r'\usepackage[%s]{graphicx}' %
							πF.SetLineno(1253)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßgraphicx_option, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\usepackage[%s]{graphicx}").ToObject(), πTemp005); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßgraphicx_package, πTemp003); πE != nil {
								continue
							}
							goto Label12
						Label12:
							// line 1256: self.docutils_footnotes = settings.docutils_footnotes
							πF.SetLineno(1256)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßdocutils_footnotes, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdocutils_footnotes, πTemp003); πE != nil {
								continue
							}
							// line 1266: self.head_prefix = [r'\documentclass[%s]{%s}' %
							πF.SetLineno(1266)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßdocumentoptions, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßdocumentclass, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(πTemp005, πTemp007).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\documentclass[%s]{%s}").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßhead_prefix, πTemp003); πE != nil {
								continue
							}
							// line 1268: self.requirements = SortableDict() # made a list in depart_document()
							πF.SetLineno(1268)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSortableDict); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßrequirements, πTemp002); πE != nil {
								continue
							}
							// line 1269: self.requirements['__static'] = r'\usepackage{ifthen}'
							πF.SetLineno(1269)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("\\usepackage{ifthen}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp005 = ß__static.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp005, πTemp002); πE != nil {
								continue
							}
							// line 1270: self.latex_preamble = [settings.latex_preamble]
							πF.SetLineno(1270)
							πTemp001 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßlatex_preamble, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßlatex_preamble, πTemp003); πE != nil {
								continue
							}
							// line 1271: self.fallbacks = SortableDict() # made a list in depart_document()
							πF.SetLineno(1271)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßSortableDict); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfallbacks, πTemp002); πE != nil {
								continue
							}
							// line 1272: self.pdfsetup = [] # PDF properties (hyperref package)
							πF.SetLineno(1272)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßpdfsetup, πTemp003); πE != nil {
								continue
							}
							// line 1273: self.title = []
							πF.SetLineno(1273)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtitle, πTemp003); πE != nil {
								continue
							}
							// line 1274: self.subtitle = []
							πF.SetLineno(1274)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsubtitle, πTemp003); πE != nil {
								continue
							}
							// line 1275: self.titledata = [] # \title, \author, \date
							πF.SetLineno(1275)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtitledata, πTemp003); πE != nil {
								continue
							}
							// line 1277: self.body_pre_docinfo = [] # \maketitle
							πF.SetLineno(1277)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßbody_pre_docinfo, πTemp003); πE != nil {
								continue
							}
							// line 1278: self.docinfo = []
							πF.SetLineno(1278)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdocinfo, πTemp003); πE != nil {
								continue
							}
							// line 1279: self.dedication = []
							πF.SetLineno(1279)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdedication, πTemp003); πE != nil {
								continue
							}
							// line 1280: self.abstract = []
							πF.SetLineno(1280)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßabstract, πTemp003); πE != nil {
								continue
							}
							// line 1281: self.body = []
							πF.SetLineno(1281)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßbody, πTemp003); πE != nil {
								continue
							}
							// line 1284: self.context = []
							πF.SetLineno(1284)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßcontext, πTemp003); πE != nil {
								continue
							}
							// line 1285: """Heterogeneous stack.
							πF.SetLineno(1285)
							// line 1291: self.title_labels = []
							πF.SetLineno(1291)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtitle_labels, πTemp003); πE != nil {
								continue
							}
							// line 1292: self.subtitle_labels = []
							πF.SetLineno(1292)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsubtitle_labels, πTemp003); πE != nil {
								continue
							}
							// line 1295: self.author_stack = []
							πF.SetLineno(1295)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßauthor_stack, πTemp003); πE != nil {
								continue
							}
							// line 1296: self.date = []
							πF.SetLineno(1296)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßdate, πTemp003); πE != nil {
								continue
							}
							// line 1300: self.pdfinfo = []
							πF.SetLineno(1300)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßpdfinfo, πTemp003); πE != nil {
								continue
							}
							// line 1301: self.pdfauthor = []
							πF.SetLineno(1301)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßpdfauthor, πTemp003); πE != nil {
								continue
							}
							// line 1306: self._section_number = [0]
							πF.SetLineno(1306)
							πTemp001 = make([]*πg.Object, 1)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_section_number, πTemp003); πE != nil {
								continue
							}
							// line 1310: self._enumeration_counters = []
							πF.SetLineno(1310)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_enumeration_counters, πTemp003); πE != nil {
								continue
							}
							// line 1314: self._max_enumeration_counters = 0
							πF.SetLineno(1314)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_max_enumeration_counters, πTemp002); πE != nil {
								continue
							}
							// line 1316: self._bibitems = []
							πF.SetLineno(1316)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_bibitems, πTemp003); πE != nil {
								continue
							}
							// line 1319: self.table_stack = []
							πF.SetLineno(1319)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtable_stack, πTemp003); πE != nil {
								continue
							}
							// line 1320: self.active_table = Table(self, 'longtable')
							πF.SetLineno(1320)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp001[0] = µself
							πTemp001[1] = ßlongtable.ToObject()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTable); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßactive_table, πTemp002); πE != nil {
								continue
							}
							// line 1323: self.out = self.body
							πF.SetLineno(1323)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßbody, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp003); πE != nil {
								continue
							}
							// line 1324: self.out_stack = []  # stack of output collectors
							πF.SetLineno(1324)
							πTemp001 = make([]*πg.Object, 0)
							πTemp002 = πg.NewList(πTemp001...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout_stack, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßlatex_encoding, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, πTemp003, ßascii.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label13
							}
							goto Label14
							// line 1330: if self.latex_encoding != 'ascii':
							πF.SetLineno(1330)
						Label13:
							// line 1331: self.requirements['_inputenc'] = (r'\usepackage[%s]{inputenc}'
							πF.SetLineno(1331)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßlatex_encoding, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\usepackage[%s]{inputenc}").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp006 = ß_inputenc.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp006, πTemp003); πE != nil {
								continue
							}
							goto Label14
						Label14:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßis_xetex, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(!πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label15
							}
							goto Label16
							// line 1334: if not self.is_xetex:
							πF.SetLineno(1334)
						Label15:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfont_encoding, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label17
							}
							goto Label18
							// line 1335: if self.font_encoding:
							πF.SetLineno(1335)
						Label17:
							// line 1336: self.requirements['_fontenc'] = (r'\usepackage[%s]{fontenc}' %
							πF.SetLineno(1336)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfont_encoding, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\usepackage[%s]{fontenc}").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp006 = ß_fontenc.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp006, πTemp003); πE != nil {
								continue
							}
							goto Label18
						Label18:
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr(",").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfont_encoding, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(20)
							πTemp004 = false
						Label19:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label21
							}
							if πTemp003, πE = πg.Next(πF, πTemp002); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp009 = !isStop
							} else {
								πTemp009 = true
								µenc = πTemp003
							}
							if πE != nil || !πTemp009 {
								continue
							}
							πF.PushCheckpoint(19)
							// line 1340: enc = enc.strip()
							πF.SetLineno(1340)
							if πE = πg.CheckLocal(πF, µenc, "enc"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µenc, ßstrip, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µenc = πTemp005
							if πE = πg.CheckLocal(πF, µenc, "enc"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µenc, ßOT1.ToObject()); πE != nil {
								continue
							}
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label22
							}
							if πE = πg.CheckLocal(πF, µenc, "enc"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple6(ßT1.ToObject(), ßT2A.ToObject(), ßT2B.ToObject(), ßT2C.ToObject(), ßT4.ToObject(), ßT5.ToObject()).ToObject()
							if πTemp009, πE = πg.Contains(πF, πTemp005, µenc); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp009).ToObject()
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label23
							}
							goto Label24
							// line 1341: if enc == 'OT1':
							πF.SetLineno(1341)
						Label22:
							// line 1342: self.requirements['_textquotedblOT1'] = (
							πF.SetLineno(1342)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πg.NewStr("\\DeclareTextSymbol{\\textquotedbl}{OT1}{`\\\"}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp006 = ß_textquotedblOT1.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp006, πTemp003); πE != nil {
								continue
							}
							goto Label24
							// line 1344: elif enc not in ('T1', 'T2A', 'T2B', 'T2C', 'T4', 'T5'):
							πF.SetLineno(1344)
						Label23:
							// line 1345: self.requirements['_textquotedbl'] = (
							πF.SetLineno(1345)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πg.NewStr("\\DeclareTextSymbolDefault{\\textquotedbl}{T1}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp006 = ß_textquotedbl.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp006, πTemp003); πE != nil {
								continue
							}
							goto Label24
						Label24:
							continue
						Label20:
							if πE != nil || πR != nil {
								continue
							}
						Label21:
							goto Label16
						Label16:
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßscr.ToObject()
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µsettings, ßdocumentclass, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßfind, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp006.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp006, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp005, πTemp006); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label25
							}
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßDIV.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßdocumentoptions, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßfind, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp007.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp007, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.NE(πF, πTemp006, πTemp007); πE != nil {
								continue
							}
							πTemp003 = πTemp005
							if πTemp009, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label26
							}
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßBCOR.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßdocumentoptions, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßfind, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp007.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp007, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.NE(πF, πTemp006, πTemp007); πE != nil {
								continue
							}
							πTemp003 = πTemp005
						Label26:
							πTemp002 = πTemp003
						Label25:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label27
							}
							goto Label28
							// line 1348: if (settings.documentclass.find('scr') == -1 and
							πF.SetLineno(1348)
						Label27:
							// line 1351: self.requirements['typearea'] = r'\usepackage{typearea}'
							πF.SetLineno(1351)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("\\usepackage{typearea}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp005 = ßtypearea.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp005, πTemp002); πE != nil {
								continue
							}
							goto Label28
						Label28:
							// line 1356: self.stylesheet = [self.stylesheet_call(path)
							πF.SetLineno(1356)
							πTemp010 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp010, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µpath *πg.Object = πg.UnboundLocal
								_ = µpath
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []*πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										πTemp002 = πF.MakeArgs(1)
										if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
											continue
										}
										πTemp002[0] = µsettings
										if πTemp003, πE = πg.ResolveGlobal(πF, ßutils); πE != nil {
											continue
										}
										if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßget_stylesheet_list, nil); πE != nil {
											continue
										}
										if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp002)
										if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp005 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp005 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp006 = !isStop
										} else {
											πTemp006 = true
											µpath = πTemp003
										}
										if πE != nil || !πTemp006 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 1356: self.stylesheet = [self.stylesheet_call(path)
										πF.SetLineno(1356)
										πTemp002 = πF.MakeArgs(1)
										if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
											continue
										}
										πTemp002[0] = µpath
										if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetAttr(πF, µself, ßstylesheet_call, nil); πE != nil {
											continue
										}
										if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp002)
										πF.PushCheckpoint(4)
										return πTemp004, nil
									Label4:
										πTemp003 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp005, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ListType.Call(πF, πg.Args{πTemp005}, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßstylesheet, πTemp005); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßhyperlink_color, nil); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple4(ß0.ToObject(), ßfalse.ToObject(), ßFalse.ToObject(), ß.ToObject()).ToObject()
							if πTemp004, πE = πg.Contains(πF, πTemp006, πTemp005); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label29
							}
							goto Label30
							// line 1360: if self.hyperlink_color in ('0', 'false', 'False', ''):
							πF.SetLineno(1360)
						Label29:
							// line 1361: self.hyperref_options = ''
							πF.SetLineno(1361)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ß.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßhyperref_options, πTemp002); πE != nil {
								continue
							}
							goto Label31
						Label30:
							// line 1363: self.hyperref_options = 'colorlinks=true,linkcolor=%s,urlcolor=%s' % (
							πF.SetLineno(1363)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßhyperlink_color, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßhyperlink_color, nil); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(πTemp006, πTemp007).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("colorlinks=true,linkcolor=%s,urlcolor=%s").ToObject(), πTemp005); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßhyperref_options, πTemp005); πE != nil {
								continue
							}
							goto Label31
						Label31:
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßhyperref_options, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label32
							}
							goto Label33
							// line 1365: if settings.hyperref_options:
							πF.SetLineno(1365)
						Label32:
							// line 1366: self.hyperref_options += ',' + settings.hyperref_options
							πF.SetLineno(1366)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßhyperref_options, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µsettings, ßhyperref_options, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Add(πF, πg.NewStr(",").ToObject(), πTemp006); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßhyperref_options, πTemp006); πE != nil {
								continue
							}
							goto Label33
						Label33:
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßsectnum_xform, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label34
							}
							goto Label35
							// line 1376: if settings.sectnum_xform: # section numbering by Docutils
							πF.SetLineno(1376)
						Label34:
							// line 1377: PreambleCmds.secnumdepth = r'\setcounter{secnumdepth}{0}'
							πF.SetLineno(1377)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("\\setcounter{secnumdepth}{0}").ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp005, ßsecnumdepth, πTemp002); πE != nil {
								continue
							}
							goto Label36
						Label35:
							// line 1379: secnumdepth = settings.sectnum_depth
							πF.SetLineno(1379)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µsettings, ßsectnum_depth, nil); πE != nil {
								continue
							}
							µsecnumdepth = πTemp002
							if πE = πg.CheckLocal(πF, µsecnumdepth, "secnumdepth"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(µsecnumdepth != πTemp005).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label37
							}
							goto Label38
							// line 1391: if secnumdepth is not None:
							πF.SetLineno(1391)
						Label37:
							// line 1393: secnumdepth = min(secnumdepth, len(self.d_class.sections))
							πF.SetLineno(1393)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µsecnumdepth, "secnumdepth"); πE != nil {
								continue
							}
							πTemp001[0] = µsecnumdepth
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßsections, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp005
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp001[1] = πTemp005
							if πTemp002, πE = πg.ResolveGlobal(πF, ßmin); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µsecnumdepth = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßsections, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, πTemp006, ßchapter.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label39
							}
							goto Label40
							// line 1395: if 'chapter' in  self.d_class.sections:
							πF.SetLineno(1395)
						Label39:
							// line 1396: secnumdepth -= 1
							πF.SetLineno(1396)
							if πE = πg.CheckLocal(πF, µsecnumdepth, "secnumdepth"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, µsecnumdepth, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µsecnumdepth = πTemp002
							goto Label40
						Label40:
							πTemp005 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetAttr(πF, πTemp007, ßsections, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp011, πTemp005); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp006, ßpart.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label41
							}
							goto Label42
							// line 1397: if self.d_class.sections[0] == 'part':
							πF.SetLineno(1397)
						Label41:
							// line 1398: secnumdepth -= 1
							πF.SetLineno(1398)
							if πE = πg.CheckLocal(πF, µsecnumdepth, "secnumdepth"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, µsecnumdepth, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µsecnumdepth = πTemp002
							goto Label42
						Label42:
							// line 1399: PreambleCmds.secnumdepth = \
							πF.SetLineno(1399)
							if πE = πg.CheckLocal(πF, µsecnumdepth, "secnumdepth"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\setcounter{secnumdepth}{%d}").ToObject(), µsecnumdepth); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp002); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, πTemp006, ßsecnumdepth, πTemp005); πE != nil {
								continue
							}
							goto Label38
						Label38:
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							πTemp001[0] = µsettings
							πTemp001[1] = ßsectnum_start.ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßhasattr); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp002 = πTemp006
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label43
							}
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µsettings, ßsectnum_start, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.NE(πF, πTemp006, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005
						Label43:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label44
							}
							goto Label45
							// line 1403: if (hasattr(settings, 'sectnum_start') and
							πF.SetLineno(1403)
						Label44:
							// line 1405: self.requirements['sectnum_start'] = (
							πF.SetLineno(1405)
							πTemp006 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp012, πE = πg.GetAttr(πF, πTemp011, ßsections, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, πTemp012, πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsettings, "settings"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetAttr(πF, µsettings, ßsectnum_start, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Sub(πF, πTemp011, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(πTemp007, πTemp006).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\setcounter{%s}{%d}").ToObject(), πTemp005); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp007 = ßsectnum_start.ToObject()
							if πE = πg.SetItem(πF, πTemp006, πTemp007, πTemp005); πE != nil {
								continue
							}
							goto Label45
						Label45:
							goto Label36
						Label36:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ß__init__.ToObject(), πTemp001); πE != nil {
						continue
					}
					// line 1415: def stylesheet_call(self, path):
					πF.SetLineno(1415)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "path", Def: nil}
					πTemp003 = πg.NewFunction(πg.NewCode("stylesheet_call", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µpath *πg.Object = πArgs[1]
						_ = µpath
						var µbase *πg.Object = πg.UnboundLocal
						_ = µbase
						var µext *πg.Object = πg.UnboundLocal
						_ = µext
						var µis_package *πg.Object = πg.UnboundLocal
						_ = µis_package
						var µcontent *πg.Object = πg.UnboundLocal
						_ = µcontent
						var µerr *πg.Object = πg.UnboundLocal
						_ = µerr
						var µmsg *πg.Object = πg.UnboundLocal
						_ = µmsg
						var µcmd *πg.Object = πg.UnboundLocal
						_ = µcmd
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 πg.KWArgs
						_ = πTemp006
						var πTemp007 *πg.BaseException
						_ = πTemp007
						var πTemp008 *πg.Traceback
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 6:
								goto Label6
							default:
								panic("unexpected function state")
							}
							// line 1416: """Return code to reference or embed stylesheet file `path`"""
							πF.SetLineno(1416)
							// line 1418: (base, ext) = os.path.splitext(path)
							πF.SetLineno(1418)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							πTemp001[0] = µpath
							if πTemp002, πE = πg.ResolveGlobal(πF, ßos); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpath, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßsplitext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp002}, πg.TieTarget{Target: &πTemp004}}}, πTemp003); πE != nil {
								continue
							}
							µbase = πTemp002
							µext = πTemp004
							// line 1419: is_package = ext in ['.sty', '']
							πF.SetLineno(1419)
							if πE = πg.CheckLocal(πF, µext, "ext"); πE != nil {
								continue
							}
							πTemp001 = make([]*πg.Object, 2)
							πTemp001[0] = πg.NewStr(".sty").ToObject()
							πTemp001[1] = ß.ToObject()
							πTemp003 = πg.NewList(πTemp001...).ToObject()
							if πTemp005, πE = πg.Contains(πF, πTemp003, µext); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp005).ToObject()
							µis_package = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßembed_stylesheet, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 1421: if self.settings.embed_stylesheet:
							πF.SetLineno(1421)
						Label1:
							if πE = πg.CheckLocal(πF, µis_package, "is_package"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, µis_package); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label3
							}
							goto Label4
							// line 1422: if is_package:
							πF.SetLineno(1422)
						Label3:
							// line 1423: path = base + '.sty' # ensure extension
							πF.SetLineno(1423)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, µbase, πg.NewStr(".sty").ToObject()); πE != nil {
								continue
							}
							µpath = πTemp002
							goto Label4
						Label4:
							// line 1424: try:
							πF.SetLineno(1424)
							πF.PushCheckpoint(6)
							// line 1425: content = io.FileInput(source_path=path,
							πF.SetLineno(1425)
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							πTemp006 = πg.KWArgs{
								{"source_path", µpath},
								{"encoding", πg.NewStr("utf-8").ToObject()},
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßio); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßFileInput, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, πTemp006); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßread, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							µcontent = πTemp002
							// line 1427: self.settings.record_dependencies.add(path)
							πF.SetLineno(1427)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							πTemp001[0] = µpath
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßrecord_dependencies, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßadd, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πF.PopCheckpoint()
							goto Label5
						Label6:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp007, πTemp008 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßIOError); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsInstance(πF, πTemp007.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label7
							}
							πE = πF.Raise(πTemp007.ToObject(), nil, πTemp008.ToObject())
							continue
							// line 1428: except IOError as err:
							πF.SetLineno(1428)
						Label7:
							µerr = πTemp007.ToObject()
							// line 1429: msg = u"Cannot embed stylesheet '%s':\n  %s." % (
							πF.SetLineno(1429)
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µerr, "err"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µerr, ßstrerror, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp004
							if πTemp004, πE = πg.ResolveGlobal(πF, ßSafeString); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp003 = πg.NewTuple2(µpath, πTemp009).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewUnicode("Cannot embed stylesheet '%s':\n  %s.").ToObject(), πTemp003); πE != nil {
								continue
							}
							µmsg = πTemp002
							// line 1431: self.document.reporter.error(msg)
							πF.SetLineno(1431)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							πTemp001[0] = µmsg
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßreporter, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßerror, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1432: return '% ' + msg.replace('\n', '\n% ')
							πF.SetLineno(1432)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							πTemp001[1] = πg.NewStr("\n% ").ToObject()
							if πE = πg.CheckLocal(πF, µmsg, "msg"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µmsg, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp002, πE = πg.Add(πF, πg.NewStr("% ").ToObject(), πTemp004); πE != nil {
								continue
							}
							πR = πTemp002
							continue
							πF.RestoreExc(nil, nil)
							goto Label5
						Label5:
							if πE = πg.CheckLocal(πF, µis_package, "is_package"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, µis_package); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label8
							}
							goto Label9
							// line 1433: if is_package:
							πF.SetLineno(1433)
						Label8:
							// line 1434: content = '\n'.join([r'\makeatletter',
							πF.SetLineno(1434)
							πTemp001 = πF.MakeArgs(1)
							πTemp010 = make([]*πg.Object, 3)
							πTemp010[0] = πg.NewStr("\\makeatletter").ToObject()
							if πE = πg.CheckLocal(πF, µcontent, "content"); πE != nil {
								continue
							}
							πTemp010[1] = µcontent
							πTemp010[2] = πg.NewStr("\\makeatother").ToObject()
							πTemp002 = πg.NewList(πTemp010...).ToObject()
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µcontent = πTemp003
							goto Label9
						Label9:
							// line 1437: return '%% embedded stylesheet: %s\n%s' % (path, content)
							πF.SetLineno(1437)
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcontent, "content"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(µpath, µcontent).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%% embedded stylesheet: %s\n%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							πR = πTemp002
							continue
							goto Label2
						Label2:
							if πE = πg.CheckLocal(πF, µis_package, "is_package"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, µis_package); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label10
							}
							goto Label11
							// line 1439: if is_package:
							πF.SetLineno(1439)
						Label10:
							// line 1440: path = base # drop extension
							πF.SetLineno(1440)
							if πE = πg.CheckLocal(πF, µbase, "base"); πE != nil {
								continue
							}
							µpath = µbase
							// line 1441: cmd = r'\usepackage{%s}'
							πF.SetLineno(1441)
							µcmd = πg.NewStr("\\usepackage{%s}").ToObject()
							goto Label12
						Label11:
							// line 1443: cmd = r'\input{%s}'
							πF.SetLineno(1443)
							µcmd = πg.NewStr("\\input{%s}").ToObject()
							goto Label12
						Label12:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßstylesheet_path, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label13
							}
							goto Label14
							// line 1444: if self.settings.stylesheet_path:
							πF.SetLineno(1444)
						Label13:
							// line 1446: path = utils.relative_path(self.settings._destination, path)
							πF.SetLineno(1446)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ß_destination, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							πTemp001[1] = µpath
							if πTemp002, πE = πg.ResolveGlobal(πF, ßutils); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßrelative_path, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µpath = πTemp002
							goto Label14
						Label14:
							// line 1447: return cmd % path
							πF.SetLineno(1447)
							if πE = πg.CheckLocal(πF, µcmd, "cmd"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µpath, "path"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, µcmd, µpath); πE != nil {
								continue
							}
							πR = πTemp002
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßstylesheet_call.ToObject(), πTemp003); πE != nil {
						continue
					}
					// line 1416: """Return code to reference or embed stylesheet file `path`"""
					πF.SetLineno(1416)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, πg.NewStr("Return code to reference or embed stylesheet file `path`").ToObject()); πE != nil {
						continue
					}
					if πTemp005, πE = πg.ResolveClass(πF, πClass, nil, ßstylesheet_call); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp005, ß__doc__, πTemp004); πE != nil {
						continue
					}
					// line 1449: def to_latex_encoding(self, docutils_encoding):
					πF.SetLineno(1449)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "docutils_encoding", Def: nil}
					πTemp004 = πg.NewFunction(πg.NewCode("to_latex_encoding", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µdocutils_encoding *πg.Object = πArgs[1]
						_ = µdocutils_encoding
						var µtr *πg.Object = πg.UnboundLocal
						_ = µtr
						var µencoding *πg.Object = πg.UnboundLocal
						_ = µencoding
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1450: """Translate docutils encoding name into LaTeX's.
							πF.SetLineno(1450)
							// line 1454: tr = {  'iso-8859-1': 'latin1',     # west european
							πF.SetLineno(1454)
							πTemp001 = πg.NewDict()
							if πE = πTemp001.SetItem(πF, πg.NewStr("iso-8859-1").ToObject(), ßlatin1.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("iso-8859-2").ToObject(), ßlatin2.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("iso-8859-3").ToObject(), ßlatin3.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("iso-8859-4").ToObject(), ßlatin4.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("iso-8859-5").ToObject(), ßiso88595.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("iso-8859-9").ToObject(), ßlatin5.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("iso-8859-15").ToObject(), ßlatin9.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßmac_cyrillic.ToObject(), ßmaccyr.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("windows-1251").ToObject(), ßcp1251.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("koi8-r").ToObject(), πg.NewStr("koi8-r").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("koi8-u").ToObject(), πg.NewStr("koi8-u").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("windows-1250").ToObject(), ßcp1250.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("windows-1252").ToObject(), ßcp1252.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, πg.NewStr("us-ascii").ToObject(), ßascii.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp001.ToObject()
							µtr = πTemp002
							// line 1482: encoding = docutils_encoding.lower()
							πF.SetLineno(1482)
							if πE = πg.CheckLocal(πF, µdocutils_encoding, "docutils_encoding"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µdocutils_encoding, ßlower, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µencoding = πTemp003
							if πE = πg.CheckLocal(πF, µencoding, "encoding"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtr, "tr"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µtr, µencoding); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 1483: if encoding in tr:
							πF.SetLineno(1483)
						Label1:
							// line 1484: return tr[encoding]
							πF.SetLineno(1484)
							if πE = πg.CheckLocal(πF, µencoding, "encoding"); πE != nil {
								continue
							}
							πTemp002 = µencoding
							if πE = πg.CheckLocal(πF, µtr, "tr"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µtr, πTemp002); πE != nil {
								continue
							}
							πR = πTemp003
							continue
							goto Label2
						Label2:
							// line 1486: encoding = encoding.replace('_', '').replace('-', '')
							πF.SetLineno(1486)
							πTemp005 = πF.MakeArgs(2)
							πTemp005[0] = πg.NewStr("-").ToObject()
							πTemp005[1] = ß.ToObject()
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = ß_.ToObject()
							πTemp006[1] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µencoding, "encoding"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µencoding, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µencoding = πTemp003
							// line 1488: return encoding.split(':')[0]
							πF.SetLineno(1488)
							πTemp002 = πg.NewInt(0).ToObject()
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr(":").ToObject()
							if πE = πg.CheckLocal(πF, µencoding, "encoding"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µencoding, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp003, πE = πg.GetItem(πF, πTemp008, πTemp002); πE != nil {
								continue
							}
							πR = πTemp003
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßto_latex_encoding.ToObject(), πTemp004); πE != nil {
						continue
					}
					// line 1450: """Translate docutils encoding name into LaTeX's.
					πF.SetLineno(1450)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πg.NewStr("Translate docutils encoding name into LaTeX's.\n\n        Default method is remove \"-\" and \"_\" chars from docutils_encoding.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp006, πE = πg.ResolveClass(πF, πClass, nil, ßto_latex_encoding); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp006, ß__doc__, πTemp005); πE != nil {
						continue
					}
					// line 1490: def language_label(self, docutil_label):
					πF.SetLineno(1490)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "docutil_label", Def: nil}
					πTemp005 = πg.NewFunction(πg.NewCode("language_label", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µdocutil_label *πg.Object = πArgs[1]
						_ = µdocutil_label
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1491: return self.language_module.labels[docutil_label]
							πF.SetLineno(1491)
							if πE = πg.CheckLocal(πF, µdocutil_label, "docutil_label"); πE != nil {
								continue
							}
							πTemp001 = µdocutil_label
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßlanguage_module, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßlabels, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πR = πTemp002
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßlanguage_label.ToObject(), πTemp005); πE != nil {
						continue
					}
					// line 1493: def encode(self, text):
					πF.SetLineno(1493)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "text", Def: nil}
					πTemp006 = πg.NewFunction(πg.NewCode("encode", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtext *πg.Object = πArgs[1]
						_ = µtext
						var µtable *πg.Object = πg.UnboundLocal
						_ = µtable
						var µch *πg.Object = πg.UnboundLocal
						_ = µch
						var µcp *πg.Object = πg.UnboundLocal
						_ = µcp
						var µseparate_chars *πg.Object = πg.UnboundLocal
						_ = µseparate_chars
						var µchar *πg.Object = πg.UnboundLocal
						_ = µchar
						var µlines *πg.Object = πg.UnboundLocal
						_ = µlines
						var µi *πg.Object = πg.UnboundLocal
						_ = µi
						var µline *πg.Object = πg.UnboundLocal
						_ = µline
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 32:
								goto Label32
							case 33:
								goto Label33
							case 37:
								goto Label37
							case 38:
								goto Label38
							case 20:
								goto Label20
							case 21:
								goto Label21
							default:
								panic("unexpected function state")
							}
							// line 1494: """Return text with 'problematic' characters escaped.
							πF.SetLineno(1494)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßverbatim, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1501: if self.verbatim:
							πF.SetLineno(1501)
						Label1:
							// line 1502: return text
							πF.SetLineno(1502)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πR = µtext
							continue
							goto Label2
						Label2:
							// line 1504: table = CharMaps.alltt.copy()
							πF.SetLineno(1504)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßalltt, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßcopy, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µtable = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßalltt, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label3
							}
							goto Label4
							// line 1505: if not self.alltt:
							πF.SetLineno(1505)
						Label3:
							// line 1506: table.update(CharMaps.special)
							πF.SetLineno(1506)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßspecial, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtable, ßupdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label4
						Label4:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßinside_citation_reference_label, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label5
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßalltt, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp006).ToObject()
							πTemp001 = πTemp003
						Label5:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label6
							}
							goto Label7
							// line 1508: if self.inside_citation_reference_label and not self.alltt:
							πF.SetLineno(1508)
						Label6:
							// line 1509: del(table[ord('_')])
							πF.SetLineno(1509)
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß_.ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001 = πTemp005
							if πE = πg.DelItem(πF, µtable, πTemp001); πE != nil {
								continue
							}
							goto Label7
						Label7:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßfont_encoding, nil); πE != nil {
								continue
							}
							πTemp004 = make([]*πg.Object, 2)
							πTemp004[0] = ßOT1.ToObject()
							πTemp004[1] = ß.ToObject()
							πTemp007 = πg.NewList(πTemp004...).ToObject()
							if πTemp006, πE = πg.Contains(πF, πTemp007, πTemp005); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label8
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßis_xetex, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp006).ToObject()
							πTemp001 = πTemp003
						Label8:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label9
							}
							goto Label10
							// line 1511: if self.font_encoding in ['OT1', ''] and not self.is_xetex:
							πF.SetLineno(1511)
						Label9:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßliteral, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label11
							}
							goto Label12
							// line 1513: if self.literal:
							πF.SetLineno(1513)
						Label11:
							// line 1516: table[ord('_')] = u'\\underline{~}'
							πF.SetLineno(1516)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewUnicode("\\underline{~}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ß_.ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003 = πTemp007
							if πE = πg.SetItem(πF, µtable, πTemp003, πTemp001); πE != nil {
								continue
							}
							// line 1519: self.requirements['graphicx'] = self.graphicx_package
							πF.SetLineno(1519)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßgraphicx_package, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp007 = ßgraphicx.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp007, πTemp003); πE != nil {
								continue
							}
							// line 1520: table[ord('\\')] = u'\\reflectbox{/}'
							πF.SetLineno(1520)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewUnicode("\\reflectbox{/}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("\\").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003 = πTemp007
							if πE = πg.SetItem(πF, µtable, πTemp003, πTemp001); πE != nil {
								continue
							}
							goto Label13
						Label12:
							// line 1523: table[ord('|')] = u'\\textbar{}'
							πF.SetLineno(1523)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewUnicode("\\textbar{}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("|").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003 = πTemp007
							if πE = πg.SetItem(πF, µtable, πTemp003, πTemp001); πE != nil {
								continue
							}
							// line 1524: table[ord('<')] = u'\\textless{}'
							πF.SetLineno(1524)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewUnicode("\\textless{}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("<").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003 = πTemp007
							if πE = πg.SetItem(πF, µtable, πTemp003, πTemp001); πE != nil {
								continue
							}
							// line 1525: table[ord('>')] = u'\\textgreater{}'
							πF.SetLineno(1525)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewUnicode("\\textgreater{}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr(">").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003 = πTemp007
							if πE = πg.SetItem(πF, µtable, πTemp003, πTemp001); πE != nil {
								continue
							}
							goto Label13
						Label13:
							goto Label10
						Label10:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßinsert_non_breaking_blanks, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label14
							}
							goto Label15
							// line 1526: if self.insert_non_breaking_blanks:
							πF.SetLineno(1526)
						Label14:
							// line 1527: table[ord(' ')] = u'~'
							πF.SetLineno(1527)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewUnicode("~").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr(" ").ToObject()
							if πTemp005, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp003 = πTemp007
							if πE = πg.SetItem(πF, µtable, πTemp003, πTemp001); πE != nil {
								continue
							}
							// line 1531: table[ord('\t')] = u'~' * self.settings.tab_width
							πF.SetLineno(1531)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßtab_width, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mul(πF, πg.NewUnicode("~").ToObject(), πTemp005); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("\t").ToObject()
							if πTemp007, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp005 = πTemp008
							if πE = πg.SetItem(πF, µtable, πTemp005, πTemp003); πE != nil {
								continue
							}
							goto Label15
						Label15:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßis_xetex, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label16
							}
							goto Label17
							// line 1533: if not self.is_xetex:
							πF.SetLineno(1533)
						Label16:
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßutf8.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßlatex_encoding, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label18
							}
							goto Label19
							// line 1534: if not self.latex_encoding.startswith('utf8'):
							πF.SetLineno(1534)
						Label18:
							// line 1535: table.update(CharMaps.unsupported_unicode)
							πF.SetLineno(1535)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßunsupported_unicode, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtable, ßupdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1536: table.update(CharMaps.utf8_supported_unicode)
							πF.SetLineno(1536)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßutf8_supported_unicode, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtable, ßupdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1537: table.update(CharMaps.textcomp)
							πF.SetLineno(1537)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßtextcomp, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtable, ßupdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label19
						Label19:
							// line 1538: table.update(CharMaps.pifont)
							πF.SetLineno(1538)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßpifont, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtable, ßupdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µtext); πE != nil {
								continue
							}
							πF.PushCheckpoint(21)
							πTemp002 = false
						Label20:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label22
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µch = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(20)
							// line 1541: cp = ord(ch)
							πF.SetLineno(1541)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µch, "ch"); πE != nil {
								continue
							}
							πTemp004[0] = µch
							if πTemp003, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µcp = πTemp005
							if πE = πg.CheckLocal(πF, µcp, "cp"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp005, ßtextcomp, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp007, µcp); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp006).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label23
							}
							if πE = πg.CheckLocal(πF, µcp, "cp"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp005, ßpifont, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp007, µcp); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp006).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label24
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßlatex_encoding, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Eq(πF, πTemp007, ßutf8.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp005
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if !πTemp006 {
								goto Label25
							}
							if πE = πg.CheckLocal(πF, µcp, "cp"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßunsupported_unicode, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πg.Contains(πF, πTemp008, µcp); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(πTemp009).ToObject()
							πTemp003 = πTemp005
						Label25:
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label26
							}
							goto Label27
							// line 1542: if cp in CharMaps.textcomp:
							πF.SetLineno(1542)
						Label23:
							// line 1543: self.requirements['textcomp'] = PreambleCmds.textcomp
							πF.SetLineno(1543)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßtextcomp, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp005); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp008 = ßtextcomp.ToObject()
							if πE = πg.SetItem(πF, πTemp007, πTemp008, πTemp003); πE != nil {
								continue
							}
							goto Label27
							// line 1544: elif cp in CharMaps.pifont:
							πF.SetLineno(1544)
						Label24:
							// line 1545: self.requirements['pifont'] = '\\usepackage{pifont}'
							πF.SetLineno(1545)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πg.NewStr("\\usepackage{pifont}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp007 = ßpifont.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp007, πTemp003); πE != nil {
								continue
							}
							goto Label27
							// line 1547: elif (self.latex_encoding == 'utf8'
							πF.SetLineno(1547)
						Label26:
							// line 1549: self.requirements['_inputenc'+str(cp)] = (
							πF.SetLineno(1549)
							if πE = πg.CheckLocal(πF, µcp, "cp"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcp, "cp"); πE != nil {
								continue
							}
							πTemp007 = µcp
							if πTemp010, πE = πg.ResolveGlobal(πF, ßCharMaps); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetAttr(πF, πTemp010, ßunsupported_unicode, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetItem(πF, πTemp011, πTemp007); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(µcp, πTemp008).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\DeclareUnicodeCharacter{%04X}{%s}").ToObject(), πTemp005); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcp, "cp"); πE != nil {
								continue
							}
							πTemp004[0] = µcp
							if πTemp011, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
								continue
							}
							if πTemp012, πE = πTemp011.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp010, πE = πg.Add(πF, ß_inputenc.ToObject(), πTemp012); πE != nil {
								continue
							}
							πTemp008 = πTemp010
							if πE = πg.SetItem(πF, πTemp007, πTemp008, πTemp005); πE != nil {
								continue
							}
							goto Label27
						Label27:
							continue
						Label21:
							if πE != nil || πR != nil {
								continue
							}
						Label22:
							goto Label17
						Label17:
							// line 1552: text = text.translate(table)
							πF.SetLineno(1552)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtable, "table"); πE != nil {
								continue
							}
							πTemp004[0] = µtable
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtext, ßtranslate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µtext = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßis_xetex, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label28
							}
							goto Label29
							// line 1555: if not self.is_xetex: # Not required with xetex/luatex
							πF.SetLineno(1555)
						Label28:
							// line 1556: separate_chars = '-'
							πF.SetLineno(1556)
							µseparate_chars = πg.NewStr("-").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßliteral, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label30
							}
							goto Label31
							// line 1559: if self.literal:
							πF.SetLineno(1559)
						Label30:
							// line 1560: separate_chars += ',`\'"<>'
							πF.SetLineno(1560)
							if πE = πg.CheckLocal(πF, µseparate_chars, "separate_chars"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IAdd(πF, µseparate_chars, πg.NewStr(",`'\"<>").ToObject()); πE != nil {
								continue
							}
							µseparate_chars = πTemp001
							goto Label31
						Label31:
							if πE = πg.CheckLocal(πF, µseparate_chars, "separate_chars"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mul(πF, µseparate_chars, πg.NewInt(2).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(33)
							πTemp002 = false
						Label32:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label34
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µchar = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(32)
							// line 1564: text = text.replace(char + char, char + '{}' + char)
							πF.SetLineno(1564)
							πTemp004 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µchar, "char"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µchar, "char"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, µchar, µchar); πE != nil {
								continue
							}
							πTemp004[0] = πTemp003
							if πE = πg.CheckLocal(πF, µchar, "char"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Add(πF, µchar, πg.NewStr("{}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µchar, "char"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp005, µchar); πE != nil {
								continue
							}
							πTemp004[1] = πTemp003
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µtext, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µtext = πTemp005
							continue
						Label33:
							if πE != nil || πR != nil {
								continue
							}
						Label34:
							goto Label29
						Label29:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßinsert_newline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label35
							}
							goto Label36
							// line 1567: if self.insert_newline:
							πF.SetLineno(1567)
						Label35:
							// line 1568: lines = text.split('\n')
							πF.SetLineno(1568)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtext, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µlines = πTemp003
							πTemp004 = πF.MakeArgs(1)
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πTemp005, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µlines, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp005
							if πTemp003, πE = πg.ResolveGlobal(πF, ßenumerate); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp001, πE = πg.Iter(πF, πTemp005); πE != nil {
								continue
							}
							πF.PushCheckpoint(38)
							πTemp002 = false
						Label37:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label39
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp005}, πg.TieTarget{Target: &πTemp007}}}, πTemp003); πE != nil {
									continue
								}
								µi = πTemp005
								µline = πTemp007
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(37)
							if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µline, ßlstrip, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp007); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp006).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label40
							}
							goto Label41
							// line 1572: if not line.lstrip():
							πF.SetLineno(1572)
						Label40:
							// line 1573: lines[i] += '~'
							πF.SetLineno(1573)
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp003 = µi
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µlines, πTemp003); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, πTemp005, πg.NewStr("~").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
								continue
							}
							πTemp007 = µi
							if πE = πg.SetItem(πF, µlines, πTemp007, πTemp003); πE != nil {
								continue
							}
							goto Label41
						Label41:
							continue
						Label38:
							if πE != nil || πR != nil {
								continue
							}
						Label39:
							// line 1574: text = (r'\\' + '\n').join(lines)
							πF.SetLineno(1574)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlines, "lines"); πE != nil {
								continue
							}
							πTemp004[0] = µlines
							if πTemp001, πE = πg.Add(πF, πg.NewStr("\\\\").ToObject(), πg.NewStr("\n").ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßjoin, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µtext = πTemp001
							goto Label36
						Label36:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßliteral, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label42
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßinsert_non_breaking_blanks, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp006).ToObject()
							πTemp001 = πTemp003
						Label42:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label43
							}
							goto Label44
							// line 1575: if self.literal and not self.insert_non_breaking_blanks:
							πF.SetLineno(1575)
						Label43:
							// line 1577: text = text.replace('  ', ' ~')
							πF.SetLineno(1577)
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewStr("  ").ToObject()
							πTemp004[1] = πg.NewStr(" ~").ToObject()
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µtext, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µtext = πTemp003
							goto Label44
						Label44:
							// line 1578: return text
							πF.SetLineno(1578)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πR = µtext
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßencode.ToObject(), πTemp006); πE != nil {
						continue
					}
					// line 1494: """Return text with 'problematic' characters escaped.
					πF.SetLineno(1494)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp007}, πg.NewStr("Return text with 'problematic' characters escaped.\n\n        * Escape the special printing characters ``# $ % & ~ _ ^ \\ { }``,\n          square brackets ``[ ]``, double quotes and (in OT1) ``< | >``.\n        * Translate non-supported Unicode characters.\n        * Separate ``-`` (and more in literal text) to prevent input ligatures.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßencode); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp008, ß__doc__, πTemp007); πE != nil {
						continue
					}
					// line 1580: def attval(self, text,
					πF.SetLineno(1580)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "text", Def: nil}
					πTemp009 = πF.MakeArgs(1)
					πTemp009[0] = πg.NewStr("[\n\r\t\x0b\x0c]").ToObject()
					if πTemp008, πE = πg.ResolveClass(πF, πClass, nil, ßre); πE != nil {
						continue
					}
					if πTemp010, πE = πg.GetAttr(πF, πTemp008, ßcompile, nil); πE != nil {
						continue
					}
					if πTemp008, πE = πTemp010.Call(πF, πTemp009, nil); πE != nil {
						continue
					}
					πF.FreeArgs(πTemp009)
					πTemp002[2] = πg.Param{Name: "whitespace", Def: πTemp008}
					πTemp007 = πg.NewFunction(πg.NewCode("attval", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µtext *πg.Object = πArgs[1]
						_ = µtext
						var µwhitespace *πg.Object = πArgs[2]
						_ = µwhitespace
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1582: """Cleanse, encode, and return attribute value text."""
							πF.SetLineno(1582)
							// line 1583: return self.encode(whitespace.sub(' ', text))
							πF.SetLineno(1583)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = πg.NewStr(" ").ToObject()
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πTemp002[1] = µtext
							if πE = πg.CheckLocal(πF, µwhitespace, "whitespace"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µwhitespace, ßsub, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πR = πTemp004
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßattval.ToObject(), πTemp007); πE != nil {
						continue
					}
					// line 1582: """Cleanse, encode, and return attribute value text."""
					πF.SetLineno(1582)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp008}, πg.NewStr("Cleanse, encode, and return attribute value text.").ToObject()); πE != nil {
						continue
					}
					if πTemp010, πE = πg.ResolveClass(πF, πClass, nil, ßattval); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp010, ß__doc__, πTemp008); πE != nil {
						continue
					}
					// line 1592: def is_inline(self, node):
					πF.SetLineno(1592)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp008 = πg.NewFunction(πg.NewCode("is_inline", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1593: """Check whether a node represents an inline or block-level element"""
							πF.SetLineno(1593)
							// line 1594: return isinstance(node.parent, nodes.TextElement)
							πF.SetLineno(1594)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßTextElement, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πR = πTemp003
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßis_inline.ToObject(), πTemp008); πE != nil {
						continue
					}
					// line 1593: """Check whether a node represents an inline or block-level element"""
					πF.SetLineno(1593)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp010}, πg.NewStr("Check whether a node represents an inline or block-level element").ToObject()); πE != nil {
						continue
					}
					if πTemp011, πE = πg.ResolveClass(πF, πClass, nil, ßis_inline); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp011, ß__doc__, πTemp010); πE != nil {
						continue
					}
					// line 1596: def append_hypertargets(self, node):
					πF.SetLineno(1596)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp010 = πg.NewFunction(πg.NewCode("append_hypertargets", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []πg.Param
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1597: """Append hypertargets for all ids of `node`"""
							πF.SetLineno(1597)
							// line 1600: self.out.append('%\n'.join(['\\raisebox{1em}{\\hypertarget{%s}{}}' %
							πF.SetLineno(1600)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(1)
							πTemp005 = make([]πg.Param, 0)
							πTemp004 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp005, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µid *πg.Object = πg.UnboundLocal
								_ = µid
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 bool
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										πTemp002 = ßids.ToObject()
										if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp004 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp004 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp005 = !isStop
										} else {
											πTemp005 = true
											µid = πTemp002
										}
										if πE != nil || !πTemp005 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 1600: self.out.append('%\n'.join(['\\raisebox{1em}{\\hypertarget{%s}{}}' %
										πF.SetLineno(1600)
										if πE = πg.CheckLocal(πF, µid, "id"); πE != nil {
											continue
										}
										if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\raisebox{1em}{\\hypertarget{%s}{}}").ToObject(), µid); πE != nil {
											continue
										}
										πF.PushCheckpoint(4)
										return πTemp002, nil
									Label4:
										πTemp003 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp006, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ListType.Call(πF, πg.Args{πTemp006}, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("%\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp006
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp006.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßappend_hypertargets.ToObject(), πTemp010); πE != nil {
						continue
					}
					// line 1597: """Append hypertargets for all ids of `node`"""
					πF.SetLineno(1597)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp011}, πg.NewStr("Append hypertargets for all ids of `node`").ToObject()); πE != nil {
						continue
					}
					if πTemp012, πE = πg.ResolveClass(πF, πClass, nil, ßappend_hypertargets); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp012, ß__doc__, πTemp011); πE != nil {
						continue
					}
					// line 1603: def ids_to_labels(self, node, set_anchor=True):
					πF.SetLineno(1603)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					if πTemp012, πE = πg.ResolveClass(πF, πClass, nil, ßTrue); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "set_anchor", Def: πTemp012}
					πTemp011 = πg.NewFunction(πg.NewCode("ids_to_labels", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µset_anchor *πg.Object = πArgs[2]
						_ = µset_anchor
						var µlabels *πg.Object = πg.UnboundLocal
						_ = µlabels
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []πg.Param
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1604: """Return list of label definitions for all ids of `node`
							πF.SetLineno(1604)
							// line 1608: labels = ['\\label{%s}' % id for id in node.get('ids', [])]
							πF.SetLineno(1608)
							πTemp003 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µid *πg.Object = πg.UnboundLocal
								_ = µid
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []*πg.Object
								_ = πTemp002
								var πTemp003 []*πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 *πg.Object
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πTemp007 bool
								_ = πTemp007
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										πTemp002 = πF.MakeArgs(2)
										πTemp002[0] = ßids.ToObject()
										πTemp003 = make([]*πg.Object, 0)
										πTemp004 = πg.NewList(πTemp003...).ToObject()
										πTemp002[1] = πTemp004
										if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
											continue
										}
										if πTemp004, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
											continue
										}
										if πTemp005, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp002)
										if πTemp001, πE = πg.Iter(πF, πTemp005); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp006 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp006 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp007 = !isStop
										} else {
											πTemp007 = true
											µid = πTemp004
										}
										if πE != nil || !πTemp007 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 1608: labels = ['\\label{%s}' % id for id in node.get('ids', [])]
										πF.SetLineno(1608)
										if πE = πg.CheckLocal(πF, µid, "id"); πE != nil {
											continue
										}
										if πTemp004, πE = πg.Mod(πF, πg.NewStr("\\label{%s}").ToObject(), µid); πE != nil {
											continue
										}
										πF.PushCheckpoint(4)
										return πTemp004, nil
									Label4:
										πTemp005 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ListType.Call(πF, πg.Args{πTemp004}, nil); πE != nil {
								continue
							}
							µlabels = πTemp001
							if πE = πg.CheckLocal(πF, µset_anchor, "set_anchor"); πE != nil {
								continue
							}
							πTemp001 = µset_anchor
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µlabels, "labels"); πE != nil {
								continue
							}
							πTemp001 = µlabels
						Label1:
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label2
							}
							goto Label3
							// line 1609: if set_anchor and labels:
							πF.SetLineno(1609)
						Label2:
							// line 1610: labels.insert(0, '\\phantomsection')
							πF.SetLineno(1610)
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = πg.NewInt(0).ToObject()
							πTemp006[1] = πg.NewStr("\\phantomsection").ToObject()
							if πE = πg.CheckLocal(πF, µlabels, "labels"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µlabels, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label3
						Label3:
							// line 1611: return labels
							πF.SetLineno(1611)
							if πE = πg.CheckLocal(πF, µlabels, "labels"); πE != nil {
								continue
							}
							πR = µlabels
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßids_to_labels.ToObject(), πTemp011); πE != nil {
						continue
					}
					// line 1604: """Return list of label definitions for all ids of `node`
					πF.SetLineno(1604)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp012}, πg.NewStr("Return list of label definitions for all ids of `node`\n\n        If `set_anchor` is True, an anchor is set with \\phantomsection.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp013, πE = πg.ResolveClass(πF, πClass, nil, ßids_to_labels); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp013, ß__doc__, πTemp012); πE != nil {
						continue
					}
					// line 1613: def set_align_from_classes(self, node):
					πF.SetLineno(1613)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp012 = πg.NewFunction(πg.NewCode("set_align_from_classes", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µalign *πg.Object = πg.UnboundLocal
						_ = µalign
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []πg.Param
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1614: """Convert ``align-*`` class arguments into alignment args."""
							πF.SetLineno(1614)
							// line 1616: align = [cls for cls in node['classes'] if cls.startswith('align-')]
							πF.SetLineno(1616)
							πTemp003 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µcls *πg.Object = πg.UnboundLocal
								_ = µcls
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 bool
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πTemp006 []*πg.Object
								_ = πTemp006
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 6:
											goto Label6
										default:
											panic("unexpected function state")
										}
										πTemp002 = ßclasses.ToObject()
										if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp004 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp004 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp005 = !isStop
										} else {
											πTemp005 = true
											µcls = πTemp002
										}
										if πE != nil || !πTemp005 {
											continue
										}
										πF.PushCheckpoint(1)
										πTemp006 = πF.MakeArgs(1)
										πTemp006[0] = πg.NewStr("align-").ToObject()
										if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
											continue
										}
										if πTemp002, πE = πg.GetAttr(πF, µcls, ßstartswith, nil); πE != nil {
											continue
										}
										if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp006)
										if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
											continue
										}
										if πTemp005 {
											goto Label4
										}
										goto Label5
										// line 1616: align = [cls for cls in node['classes'] if cls.startswith('align-')]
										πF.SetLineno(1616)
									Label4:
										// line 1616: align = [cls for cls in node['classes'] if cls.startswith('align-')]
										πF.SetLineno(1616)
										if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
											continue
										}
										πF.PushCheckpoint(6)
										return µcls, nil
									Label6:
										πTemp002 = πSent
										goto Label5
									Label5:
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp004, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ListType.Call(πF, πg.Args{πTemp004}, nil); πE != nil {
								continue
							}
							µalign = πTemp001
							if πE = πg.CheckLocal(πF, µalign, "align"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, µalign); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 1617: if align:
							πF.SetLineno(1617)
						Label1:
							// line 1618: node['align'] = align[-1].replace('align-', '')
							πF.SetLineno(1618)
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = πg.NewStr("align-").ToObject()
							πTemp006[1] = ß.ToObject()
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004
							if πE = πg.CheckLocal(πF, µalign, "align"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µalign, πTemp001); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp004, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp007 = ßalign.ToObject()
							if πE = πg.SetItem(πF, µnode, πTemp007, πTemp001); πE != nil {
								continue
							}
							// line 1619: node['classes'] = [cls for cls in node['classes']
							πF.SetLineno(1619)
							πTemp003 = make([]πg.Param, 0)
							πTemp004 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp003, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µcls *πg.Object = πg.UnboundLocal
								_ = µcls
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 bool
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πTemp006 []*πg.Object
								_ = πTemp006
								var πTemp007 *πg.Object
								_ = πTemp007
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 6:
											goto Label6
										default:
											panic("unexpected function state")
										}
										πTemp002 = ßclasses.ToObject()
										if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp004 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp004 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp005 = !isStop
										} else {
											πTemp005 = true
											µcls = πTemp002
										}
										if πE != nil || !πTemp005 {
											continue
										}
										πF.PushCheckpoint(1)
										πTemp006 = πF.MakeArgs(1)
										πTemp006[0] = πg.NewStr("align-").ToObject()
										if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetAttr(πF, µcls, ßstartswith, nil); πE != nil {
											continue
										}
										if πTemp007, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp006)
										if πTemp005, πE = πg.IsTrue(πF, πTemp007); πE != nil {
											continue
										}
										πTemp002 = πg.GetBool(!πTemp005).ToObject()
										if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
											continue
										}
										if πTemp005 {
											goto Label4
										}
										goto Label5
										// line 1619: node['classes'] = [cls for cls in node['classes']
										πF.SetLineno(1619)
									Label4:
										// line 1619: node['classes'] = [cls for cls in node['classes']
										πF.SetLineno(1619)
										if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
											continue
										}
										πF.PushCheckpoint(6)
										return µcls, nil
									Label6:
										πTemp002 = πSent
										goto Label5
									Label5:
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp007, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ListType.Call(πF, πg.Args{πTemp007}, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp007}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp008 = ßclasses.ToObject()
							if πE = πg.SetItem(πF, µnode, πTemp008, πTemp007); πE != nil {
								continue
							}
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßset_align_from_classes.ToObject(), πTemp012); πE != nil {
						continue
					}
					// line 1614: """Convert ``align-*`` class arguments into alignment args."""
					πF.SetLineno(1614)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp013}, πg.NewStr("Convert ``align-*`` class arguments into alignment args.").ToObject()); πE != nil {
						continue
					}
					if πTemp014, πE = πg.ResolveClass(πF, πClass, nil, ßset_align_from_classes); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp014, ß__doc__, πTemp013); πE != nil {
						continue
					}
					// line 1622: def insert_align_declaration(self, node, default=None):
					πF.SetLineno(1622)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					if πTemp014, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "default", Def: πTemp014}
					πTemp013 = πg.NewFunction(πg.NewCode("insert_align_declaration", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µdefault *πg.Object = πArgs[2]
						_ = µdefault
						var µalign *πg.Object = πg.UnboundLocal
						_ = µalign
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1623: align = node.get('align', default)
							πF.SetLineno(1623)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = ßalign.ToObject()
							if πE = πg.CheckLocal(πF, µdefault, "default"); πE != nil {
								continue
							}
							πTemp001[1] = µdefault
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µalign = πTemp003
							if πE = πg.CheckLocal(πF, µalign, "align"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µalign, ßleft.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µalign, "align"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µalign, ßcenter.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							if πE = πg.CheckLocal(πF, µalign, "align"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µalign, ßright.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label3
							}
							goto Label4
							// line 1624: if align == 'left':
							πF.SetLineno(1624)
						Label1:
							// line 1625: self.out.append('\\raggedright\n')
							πF.SetLineno(1625)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\raggedright\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label4
							// line 1626: elif align == 'center':
							πF.SetLineno(1626)
						Label2:
							// line 1627: self.out.append('\\centering\n')
							πF.SetLineno(1627)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\centering\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label4
							// line 1628: elif align == 'right':
							πF.SetLineno(1628)
						Label3:
							// line 1629: self.out.append('\\raggedleft\n')
							πF.SetLineno(1629)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\raggedleft\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßinsert_align_declaration.ToObject(), πTemp013); πE != nil {
						continue
					}
					// line 1631: def duclass_open(self, node):
					πF.SetLineno(1631)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp014 = πg.NewFunction(πg.NewCode("duclass_open", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µcls *πg.Object = πg.UnboundLocal
						_ = µcls
						var µlanguage *πg.Object = πg.UnboundLocal
						_ = µlanguage
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 3:
								goto Label3
							case 4:
								goto Label4
							default:
								panic("unexpected function state")
							}
							// line 1632: """Open a group and insert declarations for class values."""
							πF.SetLineno(1632)
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßcompound, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp004
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp005, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 1633: if not isinstance(node.parent, nodes.compound):
							πF.SetLineno(1633)
						Label1:
							// line 1634: self.out.append('\n')
							πF.SetLineno(1634)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label2
						Label2:
							πTemp003 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(4)
							πTemp005 = false
						Label3:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label5
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µcls = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(3)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("language-").ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µcls, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp006, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label6
							}
							goto Label7
							// line 1636: if cls.startswith('language-'):
							πF.SetLineno(1636)
						Label6:
							// line 1637: language = self.babel.language_name(cls[9:])
							πF.SetLineno(1637)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(9).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µcls, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßlanguage_name, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µlanguage = πTemp003
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, µlanguage); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label9
							}
							goto Label10
							// line 1638: if language:
							πF.SetLineno(1638)
						Label9:
							// line 1639: self.babel.otherlanguages[language] = True
							πF.SetLineno(1639)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßotherlanguages, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							πTemp007 = µlanguage
							if πE = πg.SetItem(πF, πTemp008, πTemp007, πTemp004); πE != nil {
								continue
							}
							// line 1640: self.out.append('\\begin{selectlanguage}{%s}\n' % language)
							πF.SetLineno(1640)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\begin{selectlanguage}{%s}\n").ToObject(), µlanguage); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label10
						Label10:
							goto Label8
						Label7:
							// line 1642: self.fallbacks['DUclass'] = PreambleCmds.duclass
							πF.SetLineno(1642)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßduclass, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp008 = ßDUclass.ToObject()
							if πE = πg.SetItem(πF, πTemp007, πTemp008, πTemp003); πE != nil {
								continue
							}
							// line 1643: self.out.append('\\begin{DUclass}{%s}\n' % cls)
							πF.SetLineno(1643)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\begin{DUclass}{%s}\n").ToObject(), µcls); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label8
						Label8:
							continue
						Label4:
							if πE != nil || πR != nil {
								continue
							}
						Label5:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßduclass_open.ToObject(), πTemp014); πE != nil {
						continue
					}
					// line 1632: """Open a group and insert declarations for class values."""
					πF.SetLineno(1632)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp015}, πg.NewStr("Open a group and insert declarations for class values.").ToObject()); πE != nil {
						continue
					}
					if πTemp016, πE = πg.ResolveClass(πF, πClass, nil, ßduclass_open); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp016, ß__doc__, πTemp015); πE != nil {
						continue
					}
					// line 1645: def duclass_close(self, node):
					πF.SetLineno(1645)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp015 = πg.NewFunction(πg.NewCode("duclass_close", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µcls *πg.Object = πg.UnboundLocal
						_ = µcls
						var µlanguage *πg.Object = πg.UnboundLocal
						_ = µlanguage
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 1646: """Close a group of class declarations."""
							πF.SetLineno(1646)
							πTemp002 = πF.MakeArgs(1)
							πTemp003 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πTemp003, πE = πg.ResolveGlobal(πF, ßreversed); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp005 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp005 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µcls = πTemp003
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(1)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("language-").ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µcls, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp006, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label4
							}
							goto Label5
							// line 1648: if cls.startswith('language-'):
							πF.SetLineno(1648)
						Label4:
							// line 1649: language = self.babel.language_name(cls[9:])
							πF.SetLineno(1649)
							πTemp002 = πF.MakeArgs(1)
							if πTemp003, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(9).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µcls, πTemp003); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßlanguage_name, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µlanguage = πTemp003
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, µlanguage); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label7
							}
							goto Label8
							// line 1650: if language:
							πF.SetLineno(1650)
						Label7:
							// line 1651: self.babel.otherlanguages[language] = True
							πF.SetLineno(1651)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp004}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßotherlanguages, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							πTemp007 = µlanguage
							if πE = πg.SetItem(πF, πTemp008, πTemp007, πTemp004); πE != nil {
								continue
							}
							// line 1652: self.out.append('\\end{selectlanguage}\n')
							πF.SetLineno(1652)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("\\end{selectlanguage}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label8
						Label8:
							goto Label6
						Label5:
							// line 1654: self.fallbacks['DUclass'] = PreambleCmds.duclass
							πF.SetLineno(1654)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßduclass, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp008 = ßDUclass.ToObject()
							if πE = πg.SetItem(πF, πTemp007, πTemp008, πTemp003); πE != nil {
								continue
							}
							// line 1655: self.out.append('\\end{DUclass}\n')
							πF.SetLineno(1655)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("\\end{DUclass}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label6
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßduclass_close.ToObject(), πTemp015); πE != nil {
						continue
					}
					// line 1646: """Close a group of class declarations."""
					πF.SetLineno(1646)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp016}, πg.NewStr("Close a group of class declarations.").ToObject()); πE != nil {
						continue
					}
					if πTemp017, πE = πg.ResolveClass(πF, πClass, nil, ßduclass_close); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp017, ß__doc__, πTemp016); πE != nil {
						continue
					}
					// line 1657: def push_output_collector(self, new_out):
					πF.SetLineno(1657)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "new_out", Def: nil}
					πTemp016 = πg.NewFunction(πg.NewCode("push_output_collector", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnew_out *πg.Object = πArgs[1]
						_ = µnew_out
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1658: self.out_stack.append(self.out)
							πF.SetLineno(1658)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1659: self.out = new_out
							πF.SetLineno(1659)
							if πE = πg.CheckLocal(πF, µnew_out, "new_out"); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, µnew_out); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßpush_output_collector.ToObject(), πTemp016); πE != nil {
						continue
					}
					// line 1661: def pop_output_collector(self):
					πF.SetLineno(1661)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp017 = πg.NewFunction(πg.NewCode("pop_output_collector", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1662: self.out = self.out_stack.pop()
							πF.SetLineno(1662)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßpop_output_collector.ToObject(), πTemp017); πE != nil {
						continue
					}
					// line 1667: def visit_Text(self, node):
					πF.SetLineno(1667)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp018 = πg.NewFunction(πg.NewCode("visit_Text", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1668: self.out.append(self.encode(node.astext()))
							πF.SetLineno(1668)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_Text.ToObject(), πTemp018); πE != nil {
						continue
					}
					// line 1670: def depart_Text(self, node):
					πF.SetLineno(1670)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp019 = πg.NewFunction(πg.NewCode("depart_Text", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1671: pass
							πF.SetLineno(1671)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_Text.ToObject(), πTemp019); πE != nil {
						continue
					}
					// line 1673: def visit_abbreviation(self, node):
					πF.SetLineno(1673)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp020 = πg.NewFunction(πg.NewCode("visit_abbreviation", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1674: node['classes'].insert(0, 'abbreviation')
							πF.SetLineno(1674)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = ßabbreviation.ToObject()
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1675: self.visit_inline(node)
							πF.SetLineno(1675)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_abbreviation.ToObject(), πTemp020); πE != nil {
						continue
					}
					// line 1677: def depart_abbreviation(self, node):
					πF.SetLineno(1677)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp021 = πg.NewFunction(πg.NewCode("depart_abbreviation", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1678: self.depart_inline(node)
							πF.SetLineno(1678)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_abbreviation.ToObject(), πTemp021); πE != nil {
						continue
					}
					// line 1680: def visit_acronym(self, node):
					πF.SetLineno(1680)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp022 = πg.NewFunction(πg.NewCode("visit_acronym", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1681: node['classes'].insert(0, 'acronym')
							πF.SetLineno(1681)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = ßacronym.ToObject()
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1682: self.visit_inline(node)
							πF.SetLineno(1682)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_acronym.ToObject(), πTemp022); πE != nil {
						continue
					}
					// line 1684: def depart_acronym(self, node):
					πF.SetLineno(1684)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp023 = πg.NewFunction(πg.NewCode("depart_acronym", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1685: self.depart_inline(node)
							πF.SetLineno(1685)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_acronym.ToObject(), πTemp023); πE != nil {
						continue
					}
					// line 1687: def visit_address(self, node):
					πF.SetLineno(1687)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp024 = πg.NewFunction(πg.NewCode("visit_address", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1688: self.visit_docinfo_item(node, 'address')
							πF.SetLineno(1688)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßaddress.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_address.ToObject(), πTemp024); πE != nil {
						continue
					}
					// line 1690: def depart_address(self, node):
					πF.SetLineno(1690)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp025 = πg.NewFunction(πg.NewCode("depart_address", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1691: self.depart_docinfo_item(node)
							πF.SetLineno(1691)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_address.ToObject(), πTemp025); πE != nil {
						continue
					}
					// line 1693: def visit_admonition(self, node):
					πF.SetLineno(1693)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp026 = πg.NewFunction(πg.NewCode("visit_admonition", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []πg.Param
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1694: self.fallbacks['admonition'] = PreambleCmds.admonition
							πF.SetLineno(1694)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßadmonition, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßadmonition.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, πTemp003, ßerror.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 1695: if 'error' in node['classes']:
							πF.SetLineno(1695)
						Label1:
							// line 1696: self.fallbacks['error'] = PreambleCmds.error
							πF.SetLineno(1696)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßerror, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßerror.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							goto Label2
						Label2:
							// line 1698: node['classes'] = [cls for cls in node['classes']
							πF.SetLineno(1698)
							πTemp006 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp006, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µcls *πg.Object = πg.UnboundLocal
								_ = µcls
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 bool
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 6:
											goto Label6
										default:
											panic("unexpected function state")
										}
										πTemp002 = ßclasses.ToObject()
										if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp004 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp004 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp005 = !isStop
										} else {
											πTemp005 = true
											µcls = πTemp002
										}
										if πE != nil || !πTemp005 {
											continue
										}
										πF.PushCheckpoint(1)
										if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
											continue
										}
										if πTemp002, πE = πg.NE(πF, µcls, ßadmonition.ToObject()); πE != nil {
											continue
										}
										if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
											continue
										}
										if πTemp005 {
											goto Label4
										}
										goto Label5
										// line 1698: node['classes'] = [cls for cls in node['classes']
										πF.SetLineno(1698)
									Label4:
										// line 1698: node['classes'] = [cls for cls in node['classes']
										πF.SetLineno(1698)
										if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
											continue
										}
										πF.PushCheckpoint(6)
										return µcls, nil
									Label6:
										πTemp002 = πSent
										goto Label5
									Label5:
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ListType.Call(πF, πg.Args{πTemp003}, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004 = ßclasses.ToObject()
							if πE = πg.SetItem(πF, µnode, πTemp004, πTemp003); πE != nil {
								continue
							}
							// line 1700: self.out.append('\n\\DUadmonition[%s]{' % ','.join(node['classes']))
							πF.SetLineno(1700)
							πTemp007 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(1)
							πTemp003 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							πTemp008[0] = πTemp004
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr(",").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\n\\DUadmonition[%s]{").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_admonition.ToObject(), πTemp026); πE != nil {
						continue
					}
					// line 1702: def depart_admonition(self, node):
					πF.SetLineno(1702)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp027 = πg.NewFunction(πg.NewCode("depart_admonition", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1703: self.out.append('}\n')
							πF.SetLineno(1703)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_admonition.ToObject(), πTemp027); πE != nil {
						continue
					}
					// line 1705: def visit_author(self, node):
					πF.SetLineno(1705)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp028 = πg.NewFunction(πg.NewCode("visit_author", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1706: self.pdfauthor.append(self.attval(node.astext()))
							πF.SetLineno(1706)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßattval, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßpdfauthor, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1707: self.visit_docinfo_item(node, 'author')
							πF.SetLineno(1707)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßauthor.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßvisit_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_author.ToObject(), πTemp028); πE != nil {
						continue
					}
					// line 1709: def depart_author(self, node):
					πF.SetLineno(1709)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp029 = πg.NewFunction(πg.NewCode("depart_author", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1710: self.depart_docinfo_item(node)
							πF.SetLineno(1710)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_author.ToObject(), πTemp029); πE != nil {
						continue
					}
					// line 1712: def visit_authors(self, node):
					πF.SetLineno(1712)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp030 = πg.NewFunction(πg.NewCode("visit_authors", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1714: pass
							πF.SetLineno(1714)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_authors.ToObject(), πTemp030); πE != nil {
						continue
					}
					// line 1716: def depart_authors(self, node):
					πF.SetLineno(1716)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp031 = πg.NewFunction(πg.NewCode("depart_authors", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1717: pass
							πF.SetLineno(1717)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_authors.ToObject(), πTemp031); πE != nil {
						continue
					}
					// line 1719: def visit_block_quote(self, node):
					πF.SetLineno(1719)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp032 = πg.NewFunction(πg.NewCode("visit_block_quote", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1720: self.duclass_open(node)
							πF.SetLineno(1720)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1721: self.out.append( '\\begin{quote}')
							πF.SetLineno(1721)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\begin{quote}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_block_quote.ToObject(), πTemp032); πE != nil {
						continue
					}
					// line 1723: def depart_block_quote(self, node):
					πF.SetLineno(1723)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp033 = πg.NewFunction(πg.NewCode("depart_block_quote", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1724: self.out.append( '\\end{quote}\n')
							πF.SetLineno(1724)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\end{quote}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1725: self.duclass_close(node)
							πF.SetLineno(1725)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_block_quote.ToObject(), πTemp033); πE != nil {
						continue
					}
					// line 1727: def visit_bullet_list(self, node):
					πF.SetLineno(1727)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp034 = πg.NewFunction(πg.NewCode("visit_bullet_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1728: self.duclass_open(node)
							πF.SetLineno(1728)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßis_toc_list, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 1729: if self.is_toc_list:
							πF.SetLineno(1729)
						Label1:
							// line 1730: self.out.append( '\\begin{list}{}{}' )
							πF.SetLineno(1730)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\begin{list}{}{}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label3
						Label2:
							// line 1732: self.out.append( '\\begin{itemize}' )
							πF.SetLineno(1732)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\begin{itemize}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_bullet_list.ToObject(), πTemp034); πE != nil {
						continue
					}
					// line 1734: def depart_bullet_list(self, node):
					πF.SetLineno(1734)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp035 = πg.NewFunction(πg.NewCode("depart_bullet_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßis_toc_list, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1735: if self.is_toc_list:
							πF.SetLineno(1735)
						Label1:
							// line 1736: self.out.append( '\\end{list}\n' )
							πF.SetLineno(1736)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\\end{list}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label3
						Label2:
							// line 1738: self.out.append( '\\end{itemize}\n' )
							πF.SetLineno(1738)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\\end{itemize}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label3
						Label3:
							// line 1739: self.duclass_close(node)
							πF.SetLineno(1739)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_bullet_list.ToObject(), πTemp035); πE != nil {
						continue
					}
					// line 1741: def visit_superscript(self, node):
					πF.SetLineno(1741)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp036 = πg.NewFunction(πg.NewCode("visit_superscript", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1742: self.out.append(r'\textsuperscript{')
							πF.SetLineno(1742)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\textsuperscript{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 1743: if node['classes']:
							πF.SetLineno(1743)
						Label1:
							// line 1744: self.visit_inline(node)
							πF.SetLineno(1744)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_superscript.ToObject(), πTemp036); πE != nil {
						continue
					}
					// line 1746: def depart_superscript(self, node):
					πF.SetLineno(1746)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp037 = πg.NewFunction(πg.NewCode("depart_superscript", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1747: if node['classes']:
							πF.SetLineno(1747)
						Label1:
							// line 1748: self.depart_inline(node)
							πF.SetLineno(1748)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							// line 1749: self.out.append('}')
							πF.SetLineno(1749)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_superscript.ToObject(), πTemp037); πE != nil {
						continue
					}
					// line 1751: def visit_subscript(self, node):
					πF.SetLineno(1751)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp038 = πg.NewFunction(πg.NewCode("visit_subscript", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1752: self.fallbacks['textsubscript'] = PreambleCmds.textsubscript
							πF.SetLineno(1752)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtextsubscript, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßtextsubscript.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 1753: self.out.append(r'\textsubscript{')
							πF.SetLineno(1753)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\textsubscript{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 1754: if node['classes']:
							πF.SetLineno(1754)
						Label1:
							// line 1755: self.visit_inline(node)
							πF.SetLineno(1755)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_subscript.ToObject(), πTemp038); πE != nil {
						continue
					}
					// line 1757: def depart_subscript(self, node):
					πF.SetLineno(1757)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp039 = πg.NewFunction(πg.NewCode("depart_subscript", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1758: if node['classes']:
							πF.SetLineno(1758)
						Label1:
							// line 1759: self.depart_inline(node)
							πF.SetLineno(1759)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							// line 1760: self.out.append('}')
							πF.SetLineno(1760)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_subscript.ToObject(), πTemp039); πE != nil {
						continue
					}
					// line 1762: def visit_caption(self, node):
					πF.SetLineno(1762)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp040 = πg.NewFunction(πg.NewCode("visit_caption", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1763: self.out.append('\n\\caption{')
							πF.SetLineno(1763)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n\\caption{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_caption.ToObject(), πTemp040); πE != nil {
						continue
					}
					// line 1765: def depart_caption(self, node):
					πF.SetLineno(1765)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp041 = πg.NewFunction(πg.NewCode("depart_caption", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1766: self.out.append('}\n')
							πF.SetLineno(1766)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_caption.ToObject(), πTemp041); πE != nil {
						continue
					}
					// line 1768: def visit_title_reference(self, node):
					πF.SetLineno(1768)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp042 = πg.NewFunction(πg.NewCode("visit_title_reference", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1769: self.fallbacks['titlereference'] = PreambleCmds.titlereference
							πF.SetLineno(1769)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtitlereference, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßtitlereference.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 1770: self.out.append(r'\DUroletitlereference{')
							πF.SetLineno(1770)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\DUroletitlereference{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 1771: if node['classes']:
							πF.SetLineno(1771)
						Label1:
							// line 1772: self.visit_inline(node)
							πF.SetLineno(1772)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_title_reference.ToObject(), πTemp042); πE != nil {
						continue
					}
					// line 1774: def depart_title_reference(self, node):
					πF.SetLineno(1774)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp043 = πg.NewFunction(πg.NewCode("depart_title_reference", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1775: if node['classes']:
							πF.SetLineno(1775)
						Label1:
							// line 1776: self.depart_inline(node)
							πF.SetLineno(1776)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							// line 1777: self.out.append( '}' )
							πF.SetLineno(1777)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_title_reference.ToObject(), πTemp043); πE != nil {
						continue
					}
					// line 1779: def visit_citation(self, node):
					πF.SetLineno(1779)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp044 = πg.NewFunction(πg.NewCode("visit_citation", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_use_latex_citations, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1780: if self._use_latex_citations:
							πF.SetLineno(1780)
						Label1:
							// line 1781: self.push_output_collector([])
							πF.SetLineno(1781)
							πTemp003 = πF.MakeArgs(1)
							πTemp004 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp004...).ToObject()
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label3
						Label2:
							// line 1785: self.out.append(r'\begin{figure}[b]')
							πF.SetLineno(1785)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\\begin{figure}[b]").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 1786: self.append_hypertargets(node)
							πF.SetLineno(1786)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_hypertargets, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_citation.ToObject(), πTemp044); πE != nil {
						continue
					}
					// line 1788: def depart_citation(self, node):
					πF.SetLineno(1788)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp045 = πg.NewFunction(πg.NewCode("depart_citation", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µlabel *πg.Object = πg.UnboundLocal
						_ = µlabel
						var µtext *πg.Object = πg.UnboundLocal
						_ = µtext
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_use_latex_citations, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1789: if self._use_latex_citations:
							πF.SetLineno(1789)
						Label1:
							// line 1791: label = self.out[0]
							πF.SetLineno(1791)
							πTemp001 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µlabel = πTemp003
							// line 1792: text = ''.join(self.out[1:])
							πF.SetLineno(1792)
							πTemp005 = πF.MakeArgs(1)
							if πTemp001, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(1).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πTemp005[0] = πTemp003
							if πTemp001, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µtext = πTemp003
							// line 1793: self._bibitems.append([label, text])
							πF.SetLineno(1793)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 2)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πTemp006[0] = µlabel
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πTemp006[1] = µtext
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_bibitems, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1794: self.pop_output_collector()
							πF.SetLineno(1794)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpop_output_collector, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label3
						Label2:
							// line 1796: self.out.append('\\end{figure}\n')
							πF.SetLineno(1796)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\end{figure}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_citation.ToObject(), πTemp045); πE != nil {
						continue
					}
					// line 1798: def visit_citation_reference(self, node):
					πF.SetLineno(1798)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp046 = πg.NewFunction(πg.NewCode("visit_citation_reference", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µhref *πg.Object = πg.UnboundLocal
						_ = µhref
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_use_latex_citations, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1799: if self._use_latex_citations:
							πF.SetLineno(1799)
						Label1:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßinside_citation_reference_label, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label4
							}
							goto Label5
							// line 1800: if not self.inside_citation_reference_label:
							πF.SetLineno(1800)
						Label4:
							// line 1801: self.out.append(r'\cite{')
							πF.SetLineno(1801)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("\\cite{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 1802: self.inside_citation_reference_label = 1
							πF.SetLineno(1802)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinside_citation_reference_label, πTemp001); πE != nil {
								continue
							}
							goto Label6
						Label5:
							// line 1804: assert self.body[-1] in (' ', '\n'),\
							πF.SetLineno(1804)
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßbody, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp006, πTemp003); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(πg.NewStr(" ").ToObject(), πg.NewStr("\n").ToObject()).ToObject()
							if πTemp002, πE = πg.Contains(πF, πTemp003, πTemp005); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002).ToObject()
							if πE = πg.Assert(πF, πTemp001, πg.NewStr("unexpected non-whitespace while in reference label").ToObject()); πE != nil {
								continue
							}
							// line 1806: del self.body[-1]
							πF.SetLineno(1806)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßbody, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp005
							if πE = πg.DelItem(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							goto Label6
						Label6:
							goto Label3
						Label2:
							// line 1808: href = ''
							πF.SetLineno(1808)
							µhref = ß.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Contains(πF, µnode, ßrefid.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label7
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Contains(πF, µnode, ßrefname.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label8
							}
							goto Label9
							// line 1809: if 'refid' in node:
							πF.SetLineno(1809)
						Label7:
							// line 1810: href = node['refid']
							πF.SetLineno(1810)
							πTemp001 = ßrefid.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							µhref = πTemp003
							goto Label9
							// line 1811: elif 'refname' in node:
							πF.SetLineno(1811)
						Label8:
							// line 1812: href = self.document.nameids[node['refname']]
							πF.SetLineno(1812)
							πTemp003 = ßrefname.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßnameids, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp006, πTemp001); πE != nil {
								continue
							}
							µhref = πTemp003
							goto Label9
						Label9:
							// line 1813: self.out.append('\\hyperlink{%s}{[' % href)
							πF.SetLineno(1813)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\hyperlink{%s}{[").ToObject(), µhref); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_citation_reference.ToObject(), πTemp046); πE != nil {
						continue
					}
					// line 1815: def depart_citation_reference(self, node):
					πF.SetLineno(1815)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp047 = πg.NewFunction(πg.NewCode("depart_citation_reference", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µfollowup_citation *πg.Object = πg.UnboundLocal
						_ = µfollowup_citation
						var µsibling *πg.Object = πg.UnboundLocal
						_ = µsibling
						var µsibling2 *πg.Object = πg.UnboundLocal
						_ = µsibling2
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_use_latex_citations, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1816: if self._use_latex_citations:
							πF.SetLineno(1816)
						Label1:
							// line 1817: followup_citation = False
							πF.SetLineno(1817)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							µfollowup_citation = πTemp001
							// line 1819: sibling = node.next_node(descend=False, siblings=True)
							πF.SetLineno(1819)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"descend", πTemp001},
								{"siblings", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßnext_node, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µsibling = πTemp003
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µsibling, "sibling"); πE != nil {
								continue
							}
							πTemp005[0] = µsibling
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp003, ßText, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp006
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp006
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µsibling, "sibling"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µsibling, ßastext, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple2(πg.NewStr(" ").ToObject(), πg.NewStr("\n").ToObject()).ToObject()
							if πTemp008, πE = πg.Contains(πF, πTemp006, πTemp007); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp008).ToObject()
							πTemp001 = πTemp003
						Label4:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label5
							}
							goto Label6
							// line 1820: if (isinstance(sibling, nodes.Text)
							πF.SetLineno(1820)
						Label5:
							// line 1822: sibling2 = sibling.next_node(descend=False, siblings=True)
							πF.SetLineno(1822)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πTemp003, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"descend", πTemp001},
								{"siblings", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µsibling, "sibling"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µsibling, ßnext_node, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, πTemp004); πE != nil {
								continue
							}
							µsibling2 = πTemp003
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µsibling2, "sibling2"); πE != nil {
								continue
							}
							πTemp005[0] = µsibling2
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßcitation_reference, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp003
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp002, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label7
							}
							goto Label8
							// line 1823: if isinstance(sibling2, nodes.citation_reference):
							πF.SetLineno(1823)
						Label7:
							// line 1824: followup_citation = True
							πF.SetLineno(1824)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							µfollowup_citation = πTemp001
							goto Label8
						Label8:
							goto Label6
						Label6:
							if πE = πg.CheckLocal(πF, µfollowup_citation, "followup_citation"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, µfollowup_citation); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label9
							}
							goto Label10
							// line 1825: if followup_citation:
							πF.SetLineno(1825)
						Label9:
							// line 1826: self.out.append(',')
							πF.SetLineno(1826)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr(",").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label11
						Label10:
							// line 1828: self.out.append('}')
							πF.SetLineno(1828)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 1829: self.inside_citation_reference_label = False
							πF.SetLineno(1829)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinside_citation_reference_label, πTemp003); πE != nil {
								continue
							}
							goto Label11
						Label11:
							goto Label3
						Label2:
							// line 1831: self.out.append(']}')
							πF.SetLineno(1831)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("]}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_citation_reference.ToObject(), πTemp047); πE != nil {
						continue
					}
					// line 1833: def visit_classifier(self, node):
					πF.SetLineno(1833)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp048 = πg.NewFunction(πg.NewCode("visit_classifier", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1834: self.out.append( '(\\textbf{' )
							πF.SetLineno(1834)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("(\\textbf{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_classifier.ToObject(), πTemp048); πE != nil {
						continue
					}
					// line 1836: def depart_classifier(self, node):
					πF.SetLineno(1836)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp049 = πg.NewFunction(πg.NewCode("depart_classifier", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1837: self.out.append( '})' )
							πF.SetLineno(1837)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("})").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_classifier.ToObject(), πTemp049); πE != nil {
						continue
					}
					// line 1839: def visit_colspec(self, node):
					πF.SetLineno(1839)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp050 = πg.NewFunction(πg.NewCode("visit_colspec", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1840: self.active_table.visit_colspec(node)
							πF.SetLineno(1840)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßvisit_colspec, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_colspec.ToObject(), πTemp050); πE != nil {
						continue
					}
					// line 1842: def depart_colspec(self, node):
					πF.SetLineno(1842)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp051 = πg.NewFunction(πg.NewCode("depart_colspec", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1843: pass
							πF.SetLineno(1843)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_colspec.ToObject(), πTemp051); πE != nil {
						continue
					}
					// line 1845: def visit_comment(self, node):
					πF.SetLineno(1845)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp052 = πg.NewFunction(πg.NewCode("visit_comment", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßcompound, nil); πE != nil {
								continue
							}
							πTemp002[1] = πTemp004
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp005, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 1846: if not isinstance(node.parent, nodes.compound):
							πF.SetLineno(1846)
						Label1:
							// line 1847: self.out.append('\n')
							πF.SetLineno(1847)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label2
						Label2:
							// line 1849: self.out.append('%% %s\n' % node.astext().replace('\n', '\n% '))
							πF.SetLineno(1849)
							πTemp002 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = πg.NewStr("\n").ToObject()
							πTemp006[1] = πg.NewStr("\n% ").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%% %s\n").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßSkipNode, nil); πE != nil {
								continue
							}
							// line 1850: raise nodes.SkipNode
							πF.SetLineno(1850)
							πE = πF.Raise(πTemp003, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_comment.ToObject(), πTemp052); πE != nil {
						continue
					}
					// line 1852: def depart_comment(self, node):
					πF.SetLineno(1852)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp053 = πg.NewFunction(πg.NewCode("depart_comment", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1853: pass
							πF.SetLineno(1853)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_comment.ToObject(), πTemp053); πE != nil {
						continue
					}
					// line 1855: def visit_compound(self, node):
					πF.SetLineno(1855)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp054 = πg.NewFunction(πg.NewCode("visit_compound", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcompound, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 1856: if isinstance(node.parent, nodes.compound):
							πF.SetLineno(1856)
						Label1:
							// line 1857: self.out.append('\n')
							πF.SetLineno(1857)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
							// line 1858: node['classes'].insert(0, 'compound')
							πF.SetLineno(1858)
							πTemp001 = πF.MakeArgs(2)
							πTemp001[0] = πg.NewInt(0).ToObject()
							πTemp001[1] = ßcompound.ToObject()
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1859: self.duclass_open(node)
							πF.SetLineno(1859)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_compound.ToObject(), πTemp054); πE != nil {
						continue
					}
					// line 1861: def depart_compound(self, node):
					πF.SetLineno(1861)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp055 = πg.NewFunction(πg.NewCode("depart_compound", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1862: self.duclass_close(node)
							πF.SetLineno(1862)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_compound.ToObject(), πTemp055); πE != nil {
						continue
					}
					// line 1864: def visit_contact(self, node):
					πF.SetLineno(1864)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp056 = πg.NewFunction(πg.NewCode("visit_contact", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1865: self.visit_docinfo_item(node, 'contact')
							πF.SetLineno(1865)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßcontact.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_contact.ToObject(), πTemp056); πE != nil {
						continue
					}
					// line 1867: def depart_contact(self, node):
					πF.SetLineno(1867)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp057 = πg.NewFunction(πg.NewCode("depart_contact", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1868: self.depart_docinfo_item(node)
							πF.SetLineno(1868)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_contact.ToObject(), πTemp057); πE != nil {
						continue
					}
					// line 1870: def visit_container(self, node):
					πF.SetLineno(1870)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp058 = πg.NewFunction(πg.NewCode("visit_container", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1871: self.duclass_open(node)
							πF.SetLineno(1871)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_container.ToObject(), πTemp058); πE != nil {
						continue
					}
					// line 1873: def depart_container(self, node):
					πF.SetLineno(1873)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp059 = πg.NewFunction(πg.NewCode("depart_container", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1874: self.duclass_close(node)
							πF.SetLineno(1874)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_container.ToObject(), πTemp059); πE != nil {
						continue
					}
					// line 1876: def visit_copyright(self, node):
					πF.SetLineno(1876)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp060 = πg.NewFunction(πg.NewCode("visit_copyright", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1877: self.visit_docinfo_item(node, 'copyright')
							πF.SetLineno(1877)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßcopyright.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_copyright.ToObject(), πTemp060); πE != nil {
						continue
					}
					// line 1879: def depart_copyright(self, node):
					πF.SetLineno(1879)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp061 = πg.NewFunction(πg.NewCode("depart_copyright", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1880: self.depart_docinfo_item(node)
							πF.SetLineno(1880)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_copyright.ToObject(), πTemp061); πE != nil {
						continue
					}
					// line 1882: def visit_date(self, node):
					πF.SetLineno(1882)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp062 = πg.NewFunction(πg.NewCode("visit_date", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1883: self.visit_docinfo_item(node, 'date')
							πF.SetLineno(1883)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßdate.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_date.ToObject(), πTemp062); πE != nil {
						continue
					}
					// line 1885: def depart_date(self, node):
					πF.SetLineno(1885)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp063 = πg.NewFunction(πg.NewCode("depart_date", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1886: self.depart_docinfo_item(node)
							πF.SetLineno(1886)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_date.ToObject(), πTemp063); πE != nil {
						continue
					}
					// line 1888: def visit_decoration(self, node):
					πF.SetLineno(1888)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp064 = πg.NewFunction(πg.NewCode("visit_decoration", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1890: pass
							πF.SetLineno(1890)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_decoration.ToObject(), πTemp064); πE != nil {
						continue
					}
					// line 1892: def depart_decoration(self, node):
					πF.SetLineno(1892)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp065 = πg.NewFunction(πg.NewCode("depart_decoration", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1893: pass
							πF.SetLineno(1893)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_decoration.ToObject(), πTemp065); πE != nil {
						continue
					}
					// line 1895: def visit_definition(self, node):
					πF.SetLineno(1895)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp066 = πg.NewFunction(πg.NewCode("visit_definition", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1896: pass
							πF.SetLineno(1896)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_definition.ToObject(), πTemp066); πE != nil {
						continue
					}
					// line 1898: def depart_definition(self, node):
					πF.SetLineno(1898)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp067 = πg.NewFunction(πg.NewCode("depart_definition", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1899: self.out.append('\n')                # TODO: just pass?
							πF.SetLineno(1899)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_definition.ToObject(), πTemp067); πE != nil {
						continue
					}
					// line 1901: def visit_definition_list(self, node):
					πF.SetLineno(1901)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp068 = πg.NewFunction(πg.NewCode("visit_definition_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1902: self.duclass_open(node)
							πF.SetLineno(1902)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1903: self.out.append( '\\begin{description}\n' )
							πF.SetLineno(1903)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\begin{description}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_definition_list.ToObject(), πTemp068); πE != nil {
						continue
					}
					// line 1905: def depart_definition_list(self, node):
					πF.SetLineno(1905)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp069 = πg.NewFunction(πg.NewCode("depart_definition_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1906: self.out.append( '\\end{description}\n' )
							πF.SetLineno(1906)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\end{description}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1907: self.duclass_close(node)
							πF.SetLineno(1907)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_definition_list.ToObject(), πTemp069); πE != nil {
						continue
					}
					// line 1909: def visit_definition_list_item(self, node):
					πF.SetLineno(1909)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp070 = πg.NewFunction(πg.NewCode("visit_definition_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1910: pass
							πF.SetLineno(1910)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_definition_list_item.ToObject(), πTemp070); πE != nil {
						continue
					}
					// line 1912: def depart_definition_list_item(self, node):
					πF.SetLineno(1912)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp071 = πg.NewFunction(πg.NewCode("depart_definition_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1913: pass
							πF.SetLineno(1913)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_definition_list_item.ToObject(), πTemp071); πE != nil {
						continue
					}
					// line 1915: def visit_description(self, node):
					πF.SetLineno(1915)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp072 = πg.NewFunction(πg.NewCode("visit_description", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1916: self.out.append(' ')
							πF.SetLineno(1916)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr(" ").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_description.ToObject(), πTemp072); πE != nil {
						continue
					}
					// line 1918: def depart_description(self, node):
					πF.SetLineno(1918)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp073 = πg.NewFunction(πg.NewCode("depart_description", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1919: pass
							πF.SetLineno(1919)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_description.ToObject(), πTemp073); πE != nil {
						continue
					}
					// line 1921: def visit_docinfo(self, node):
					πF.SetLineno(1921)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp074 = πg.NewFunction(πg.NewCode("visit_docinfo", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1922: self.push_output_collector(self.docinfo)
							πF.SetLineno(1922)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdocinfo, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_docinfo.ToObject(), πTemp074); πE != nil {
						continue
					}
					// line 1924: def depart_docinfo(self, node):
					πF.SetLineno(1924)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp075 = πg.NewFunction(πg.NewCode("depart_docinfo", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1925: self.pop_output_collector()
							πF.SetLineno(1925)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpop_output_collector, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocinfo, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 1927: if self.docinfo:
							πF.SetLineno(1927)
						Label1:
							// line 1929: self.requirements['tabularx'] = r'\usepackage{tabularx}'
							πF.SetLineno(1929)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\\usepackage{tabularx}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp004 = ßtabularx.ToObject()
							if πE = πg.SetItem(πF, πTemp002, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 1930: self.fallbacks['_providelength'] = PreambleCmds.providelength
							πF.SetLineno(1930)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßprovidelength, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp005 = ß_providelength.ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp001); πE != nil {
								continue
							}
							// line 1931: self.fallbacks['docinfo'] = PreambleCmds.docinfo
							πF.SetLineno(1931)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßdocinfo, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp005 = ßdocinfo.ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp001); πE != nil {
								continue
							}
							// line 1933: self.docinfo.insert(0, '\n% Docinfo\n'
							πF.SetLineno(1933)
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = πg.NewInt(0).ToObject()
							πTemp006[1] = πg.NewStr("\n% Docinfo\n\\begin{center}\n\\begin{tabularx}{\\DUdocinfowidth}{lX}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocinfo, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 1936: self.docinfo.append('\\end{tabularx}\n'
							πF.SetLineno(1936)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewStr("\\end{tabularx}\n\\end{center}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocinfo, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_docinfo.ToObject(), πTemp075); πE != nil {
						continue
					}
					// line 1939: def visit_docinfo_item(self, node, name):
					πF.SetLineno(1939)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp002[2] = πg.Param{Name: "name", Def: nil}
					πTemp076 = πg.NewFunction(πg.NewCode("visit_docinfo_item", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µname *πg.Object = πArgs[2]
						_ = µname
						var µtext *πg.Object = πg.UnboundLocal
						_ = µtext
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßuse_latex_docinfo, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							goto Label2
							// line 1940: if self.use_latex_docinfo:
							πF.SetLineno(1940)
						Label1:
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple4(ßauthor.ToObject(), ßorganization.ToObject(), ßcontact.ToObject(), ßaddress.ToObject()).ToObject()
							if πTemp002, πE = πg.Contains(πF, πTemp003, µname); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label3
							}
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µname, ßdate.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label4
							}
							goto Label5
							// line 1941: if name in ('author', 'organization', 'contact', 'address'):
							πF.SetLineno(1941)
						Label3:
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µname, ßauthor.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label6
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßauthor_stack, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp005).ToObject()
							πTemp001 = πTemp003
						Label6:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label7
							}
							goto Label8
							// line 1945: if name == 'author' or not self.author_stack:
							πF.SetLineno(1945)
						Label7:
							// line 1946: self.author_stack.append([])
							πF.SetLineno(1946)
							πTemp006 = πF.MakeArgs(1)
							πTemp007 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp007...).ToObject()
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßauthor_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label8
						Label8:
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µname, ßaddress.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label9
							}
							goto Label10
							// line 1947: if name == 'address':   # newlines are meaningful
							πF.SetLineno(1947)
						Label9:
							// line 1948: self.insert_newline = True
							πF.SetLineno(1948)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinsert_newline, πTemp003); πE != nil {
								continue
							}
							// line 1949: text = self.encode(node.astext())
							πF.SetLineno(1949)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µtext = πTemp003
							// line 1950: self.insert_newline = False
							πF.SetLineno(1950)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinsert_newline, πTemp003); πE != nil {
								continue
							}
							goto Label11
						Label10:
							// line 1952: text = self.attval(node.astext())
							πF.SetLineno(1952)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßattval, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µtext = πTemp003
							goto Label11
						Label11:
							// line 1953: self.author_stack[-1].append(text)
							πF.SetLineno(1953)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtext, "text"); πE != nil {
								continue
							}
							πTemp006[0] = µtext
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßauthor_stack, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßSkipNode, nil); πE != nil {
								continue
							}
							// line 1954: raise nodes.SkipNode
							πF.SetLineno(1954)
							πE = πF.Raise(πTemp003, nil, nil)
							continue
							goto Label5
							// line 1955: elif name == 'date':
							πF.SetLineno(1955)
						Label4:
							// line 1956: self.date.append(self.attval(node.astext()))
							πF.SetLineno(1956)
							πTemp006 = πF.MakeArgs(1)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßattval, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp006[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdate, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßSkipNode, nil); πE != nil {
								continue
							}
							// line 1957: raise nodes.SkipNode
							πF.SetLineno(1957)
							πE = πF.Raise(πTemp003, nil, nil)
							continue
							goto Label5
						Label5:
							goto Label2
						Label2:
							// line 1958: self.out.append('\\textbf{%s}: &\n\t' % self.language_label(name))
							πF.SetLineno(1958)
							πTemp006 = πF.MakeArgs(1)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							πTemp007[0] = µname
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßlanguage_label, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\textbf{%s}: &\n\t").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πg.CheckLocal(πF, µname, "name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µname, ßaddress.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label12
							}
							goto Label13
							// line 1959: if name == 'address':
							πF.SetLineno(1959)
						Label12:
							// line 1960: self.insert_newline = True
							πF.SetLineno(1960)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinsert_newline, πTemp003); πE != nil {
								continue
							}
							// line 1961: self.out.append('{\\raggedright\n')
							πF.SetLineno(1961)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewStr("{\\raggedright\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 1962: self.context.append(' } \\\\\n')
							πF.SetLineno(1962)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewStr(" } \\\\\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label14
						Label13:
							// line 1964: self.context.append(' \\\\\n')
							πF.SetLineno(1964)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewStr(" \\\\\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label14
						Label14:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_docinfo_item.ToObject(), πTemp076); πE != nil {
						continue
					}
					// line 1966: def depart_docinfo_item(self, node):
					πF.SetLineno(1966)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp077 = πg.NewFunction(πg.NewCode("depart_docinfo_item", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1967: self.out.append(self.context.pop())
							πF.SetLineno(1967)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 1969: self.insert_newline = False
							πF.SetLineno(1969)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinsert_newline, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_docinfo_item.ToObject(), πTemp077); πE != nil {
						continue
					}
					// line 1971: def visit_doctest_block(self, node):
					πF.SetLineno(1971)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp078 = πg.NewFunction(πg.NewCode("visit_doctest_block", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1972: self.visit_literal_block(node)
							πF.SetLineno(1972)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_literal_block, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_doctest_block.ToObject(), πTemp078); πE != nil {
						continue
					}
					// line 1974: def depart_doctest_block(self, node):
					πF.SetLineno(1974)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp079 = πg.NewFunction(πg.NewCode("depart_doctest_block", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 1975: self.depart_literal_block(node)
							πF.SetLineno(1975)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_literal_block, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_doctest_block.ToObject(), πTemp079); πE != nil {
						continue
					}
					// line 1977: def visit_document(self, node):
					πF.SetLineno(1977)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp080 = πg.NewFunction(πg.NewCode("visit_document", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßuse_latex_docinfo, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πTemp006, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003 = πTemp007
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label2
							}
							πTemp005 = πF.MakeArgs(2)
							πTemp006 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, µnode, πTemp006); πE != nil {
								continue
							}
							πTemp005[0] = πTemp007
							if πTemp006, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßtitle, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp007
							if πTemp006, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp003 = πTemp007
						Label2:
							πTemp001 = πTemp003
						Label1:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label3
							}
							goto Label4
							// line 1979: if (self.use_latex_docinfo or len(node) and
							πF.SetLineno(1979)
						Label3:
							// line 1981: self.title_labels += self.ids_to_labels(node, set_anchor=False)
							πF.SetLineno(1981)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtitle_labels, nil); πE != nil {
								continue
							}
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"set_anchor", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp005, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp003, πE = πg.IAdd(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßtitle_labels, πTemp003); πE != nil {
								continue
							}
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_document.ToObject(), πTemp080); πE != nil {
						continue
					}
					// line 1983: def depart_document(self, node):
					πF.SetLineno(1983)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp081 = πg.NewFunction(πg.NewCode("depart_document", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µauthors *πg.Object = πg.UnboundLocal
						_ = µauthors
						var µtitle *πg.Object = πg.UnboundLocal
						_ = µtitle
						var µwidest_label *πg.Object = πg.UnboundLocal
						_ = µwidest_label
						var µbi *πg.Object = πg.UnboundLocal
						_ = µbi
						var µcite_key *πg.Object = πg.UnboundLocal
						_ = µcite_key
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πTemp011 []πg.Param
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πTemp013 *πg.Object
						_ = πTemp013
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 24:
								goto Label24
							case 28:
								goto Label28
							case 29:
								goto Label29
							case 23:
								goto Label23
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßotherlanguages, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp004
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßlanguage, nil); πE != nil {
								continue
							}
							πTemp004 = πg.NewTuple2(ß.ToObject(), ßenglish.ToObject()).ToObject()
							if πTemp006, πE = πg.Contains(πF, πTemp004, πTemp005); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp006).ToObject()
							πTemp001 = πTemp003
						Label1:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							goto Label3
							// line 1986: if (self.babel.otherlanguages or
							πF.SetLineno(1986)
						Label2:
							// line 1988: self.requirements['babel'] = self.babel()
							πF.SetLineno(1988)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp005 = ßbabel.ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp001); πE != nil {
								continue
							}
							goto Label3
						Label3:
							// line 1990: self.requirements = self.requirements.sortedvalues()
							πF.SetLineno(1990)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßsortedvalues, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßrequirements, πTemp003); πE != nil {
								continue
							}
							// line 1992: self.fallbacks = self.fallbacks.sortedvalues()
							πF.SetLineno(1992)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßsortedvalues, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßfallbacks, πTemp003); πE != nil {
								continue
							}
							// line 1994: self.pdfsetup.append(PreambleCmds.linking % self.hyperref_options)
							πF.SetLineno(1994)
							πTemp007 = πF.MakeArgs(1)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßlinking, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßhyperref_options, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpdfsetup, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpdfauthor, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label4
							}
							goto Label5
							// line 1995: if self.pdfauthor:
							πF.SetLineno(1995)
						Label4:
							// line 1996: authors = self.author_separator.join(self.pdfauthor)
							πF.SetLineno(1996)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpdfauthor, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßauthor_separator, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßjoin, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µauthors = πTemp001
							// line 1997: self.pdfinfo.append('  pdfauthor={%s}' % authors)
							πF.SetLineno(1997)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µauthors, "authors"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("  pdfauthor={%s}").ToObject(), µauthors); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpdfinfo, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label5
						Label5:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpdfinfo, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label6
							}
							goto Label7
							// line 1998: if self.pdfinfo:
							πF.SetLineno(1998)
						Label6:
							// line 1999: self.pdfsetup += [r'\hypersetup{'] + self.pdfinfo + ['}']
							πF.SetLineno(1999)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpdfsetup, nil); πE != nil {
								continue
							}
							πTemp007 = make([]*πg.Object, 1)
							πTemp007[0] = πg.NewStr("\\hypersetup{").ToObject()
							πTemp005 = πg.NewList(πTemp007...).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µself, ßpdfinfo, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Add(πF, πTemp005, πTemp008); πE != nil {
								continue
							}
							πTemp007 = make([]*πg.Object, 1)
							πTemp007[0] = πg.NewStr("}").ToObject()
							πTemp005 = πg.NewList(πTemp007...).ToObject()
							if πTemp003, πE = πg.Add(πF, πTemp004, πTemp005); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IAdd(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßpdfsetup, πTemp004); πE != nil {
								continue
							}
							goto Label7
						Label7:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßtitle, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label8
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßuse_latex_docinfo, nil); πE != nil {
								continue
							}
							πTemp003 = πTemp004
							if πTemp006, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if !πTemp006 {
								goto Label9
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßauthor_stack, nil); πE != nil {
								continue
							}
							πTemp004 = πTemp005
							if πTemp009, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp009 {
								goto Label10
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßdate, nil); πE != nil {
								continue
							}
							πTemp004 = πTemp005
						Label10:
							πTemp003 = πTemp004
						Label9:
							πTemp001 = πTemp003
						Label8:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label11
							}
							goto Label12
							// line 2003: if self.title or (
							πF.SetLineno(2003)
						Label11:
							// line 2006: title = [''.join(self.title)]
							πF.SetLineno(2006)
							πTemp007 = make([]*πg.Object, 1)
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtitle, nil); πE != nil {
								continue
							}
							πTemp010[0] = πTemp001
							if πTemp001, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							πTemp007[0] = πTemp003
							πTemp001 = πg.NewList(πTemp007...).ToObject()
							µtitle = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtitle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label13
							}
							goto Label14
							// line 2007: if self.title:
							πF.SetLineno(2007)
						Label13:
							// line 2008: title += self.title_labels
							πF.SetLineno(2008)
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtitle_labels, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, µtitle, πTemp001); πE != nil {
								continue
							}
							µtitle = πTemp003
							goto Label14
						Label14:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsubtitle, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label15
							}
							goto Label16
							// line 2009: if self.subtitle:
							πF.SetLineno(2009)
						Label15:
							// line 2010: title += [r'\\',
							πF.SetLineno(2010)
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							πTemp007 = make([]*πg.Object, 2)
							πTemp007[0] = πg.NewStr("\\\\").ToObject()
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßsubtitle, nil); πE != nil {
								continue
							}
							πTemp010[0] = πTemp004
							if πTemp004, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\DUdocumentsubtitle{%s}").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp007[1] = πTemp003
							πTemp003 = πg.NewList(πTemp007...).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßsubtitle_labels, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, µtitle, πTemp001); πE != nil {
								continue
							}
							µtitle = πTemp003
							goto Label16
						Label16:
							// line 2013: self.titledata.append(r'\title{%s}' % '%\n  '.join(title))
							πF.SetLineno(2013)
							πTemp007 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							πTemp010[0] = µtitle
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr("%\n  ").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\title{%s}").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtitledata, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 2015: authors = ['\\\\\n'.join(author_entry)
							πF.SetLineno(2015)
							πTemp011 = make([]πg.Param, 0)
							πTemp003 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp011, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µauthor_entry *πg.Object = πg.UnboundLocal
								_ = µauthor_entry
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 bool
								_ = πTemp003
								var πTemp004 bool
								_ = πTemp004
								var πTemp005 []*πg.Object
								_ = πTemp005
								var πTemp006 *πg.Object
								_ = πTemp006
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
											continue
										}
										if πTemp002, πE = πg.GetAttr(πF, µself, ßauthor_stack, nil); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, πTemp002); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp003 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp003 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp004 = !isStop
										} else {
											πTemp004 = true
											µauthor_entry = πTemp002
										}
										if πE != nil || !πTemp004 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 2015: authors = ['\\\\\n'.join(author_entry)
										πF.SetLineno(2015)
										πTemp005 = πF.MakeArgs(1)
										if πE = πg.CheckLocal(πF, µauthor_entry, "author_entry"); πE != nil {
											continue
										}
										πTemp005[0] = µauthor_entry
										if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("\\\\\n").ToObject(), ßjoin, nil); πE != nil {
											continue
										}
										if πTemp006, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp005)
										πF.PushCheckpoint(4)
										return πTemp006, nil
									Label4:
										πTemp002 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ListType.Call(πF, πg.Args{πTemp004}, nil); πE != nil {
								continue
							}
							µauthors = πTemp001
							// line 2017: self.titledata.append(r'\author{%s}' %
							πF.SetLineno(2017)
							πTemp007 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µauthors, "authors"); πE != nil {
								continue
							}
							πTemp010[0] = µauthors
							if πTemp004, πE = πg.GetAttr(πF, πg.NewStr(" \\and\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\author{%s}").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtitledata, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 2020: self.titledata.append(r'\date{%s}' % ', '.join(self.date))
							πF.SetLineno(2020)
							πTemp007 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßdate, nil); πE != nil {
								continue
							}
							πTemp010[0] = πTemp004
							if πTemp004, πE = πg.GetAttr(πF, πg.NewStr(", ").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\date{%s}").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtitledata, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 2022: self.body_pre_docinfo.append('\\maketitle\n')
							πF.SetLineno(2022)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("\\maketitle\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßbody_pre_docinfo, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label12
						Label12:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_use_latex_citations, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp004
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label17
							}
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ß_bibitems, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp005.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp004, πE = πg.GT(πF, πTemp008, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp004
						Label17:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label18
							}
							goto Label19
							// line 2026: if self._use_latex_citations and len(self._bibitems)>0:
							πF.SetLineno(2026)
						Label18:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßbibtex, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label20
							}
							goto Label21
							// line 2027: if not self.bibtex:
							πF.SetLineno(2027)
						Label20:
							// line 2028: widest_label = ''
							πF.SetLineno(2028)
							µwidest_label = ß.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_bibitems, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(24)
							πTemp002 = false
						Label23:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label25
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µbi = πTemp004
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(23)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µwidest_label, "widest_label"); πE != nil {
								continue
							}
							πTemp007[0] = µwidest_label
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp005.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp007 = πF.MakeArgs(1)
							πTemp005 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µbi, "bi"); πE != nil {
								continue
							}
							if πTemp012, πE = πg.GetItem(πF, µbi, πTemp005); πE != nil {
								continue
							}
							πTemp007[0] = πTemp012
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp012, πE = πTemp005.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp004, πE = πg.LT(πF, πTemp008, πTemp012); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label26
							}
							goto Label27
							// line 2030: if len(widest_label)<len(bi[0]):
							πF.SetLineno(2030)
						Label26:
							// line 2031: widest_label = bi[0]
							πF.SetLineno(2031)
							πTemp004 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µbi, "bi"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µbi, πTemp004); πE != nil {
								continue
							}
							µwidest_label = πTemp005
							goto Label27
						Label27:
							continue
						Label24:
							if πE != nil || πR != nil {
								continue
							}
						Label25:
							// line 2032: self.out.append('\n\\begin{thebibliography}{%s}\n' %
							πF.SetLineno(2032)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µwidest_label, "widest_label"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\n\\begin{thebibliography}{%s}\n").ToObject(), µwidest_label); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_bibitems, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
								continue
							}
							πF.PushCheckpoint(29)
							πTemp002 = false
						Label28:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label30
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp006 = !isStop
							} else {
								πTemp006 = true
								µbi = πTemp004
							}
							if πE != nil || !πTemp006 {
								continue
							}
							πF.PushCheckpoint(28)
							// line 2036: cite_key = bi[0].replace(r'\_', '_')
							πF.SetLineno(2036)
							πTemp007 = πF.MakeArgs(2)
							πTemp007[0] = πg.NewStr("\\_").ToObject()
							πTemp007[1] = ß_.ToObject()
							πTemp004 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µbi, "bi"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µbi, πTemp004); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp005, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µcite_key = πTemp005
							// line 2037: self.out.append('\\bibitem[%s]{%s}{%s}\n' %
							πF.SetLineno(2037)
							πTemp007 = πF.MakeArgs(1)
							πTemp008 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µbi, "bi"); πE != nil {
								continue
							}
							if πTemp012, πE = πg.GetItem(πF, µbi, πTemp008); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcite_key, "cite_key"); πE != nil {
								continue
							}
							πTemp008 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µbi, "bi"); πE != nil {
								continue
							}
							if πTemp013, πE = πg.GetItem(πF, µbi, πTemp008); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple3(πTemp012, µcite_key, πTemp013).ToObject()
							if πTemp004, πE = πg.Mod(πF, πg.NewStr("\\bibitem[%s]{%s}{%s}\n").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp007[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßappend, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							continue
						Label29:
							if πE != nil || πR != nil {
								continue
							}
						Label30:
							// line 2039: self.out.append('\\end{thebibliography}\n')
							πF.SetLineno(2039)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("\\end{thebibliography}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label22
						Label21:
							// line 2041: self.out.append('\n\\bibliographystyle{%s}\n' %
							πF.SetLineno(2041)
							πTemp007 = πF.MakeArgs(1)
							πTemp004 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µself, ßbibtex, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp008, πTemp004); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\n\\bibliographystyle{%s}\n").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 2043: self.out.append('\\bibliography{%s}\n' % self.bibtex[1])
							πF.SetLineno(2043)
							πTemp007 = πF.MakeArgs(1)
							πTemp004 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µself, ßbibtex, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp008, πTemp004); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\bibliography{%s}\n").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label22
						Label22:
							goto Label19
						Label19:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp005, ßminitoc.ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp004
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label31
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßhas_latex_toc, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(!πTemp006).ToObject()
							πTemp001 = πTemp004
						Label31:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label32
							}
							goto Label33
							// line 2045: if 'minitoc' in self.requirements and not self.has_latex_toc:
							πF.SetLineno(2045)
						Label32:
							// line 2046: self.out.append('\n\\faketableofcontents % for local ToCs\n')
							πF.SetLineno(2046)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("\n\\faketableofcontents % for local ToCs\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label33
						Label33:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_document.ToObject(), πTemp081); πE != nil {
						continue
					}
					// line 2048: def visit_emphasis(self, node):
					πF.SetLineno(2048)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp082 = πg.NewFunction(πg.NewCode("visit_emphasis", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2049: self.out.append('\\emph{')
							πF.SetLineno(2049)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\emph{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2050: if node['classes']:
							πF.SetLineno(2050)
						Label1:
							// line 2051: self.visit_inline(node)
							πF.SetLineno(2051)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_emphasis.ToObject(), πTemp082); πE != nil {
						continue
					}
					// line 2053: def depart_emphasis(self, node):
					πF.SetLineno(2053)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp083 = πg.NewFunction(πg.NewCode("depart_emphasis", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2054: if node['classes']:
							πF.SetLineno(2054)
						Label1:
							// line 2055: self.depart_inline(node)
							πF.SetLineno(2055)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							// line 2056: self.out.append('}')
							πF.SetLineno(2056)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_emphasis.ToObject(), πTemp083); πE != nil {
						continue
					}
					// line 2060: def insert_additional_table_colum_delimiters(self):
					πF.SetLineno(2060)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp084 = πg.NewFunction(πg.NewCode("insert_additional_table_colum_delimiters", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 bool
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2061: while self.active_table.get_rowspan(
							πF.SetLineno(2061)
							πF.PushCheckpoint(2)
							πTemp001 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp001 {
								πF.PopCheckpoint()
								goto Label3
							}
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßget_entry_number, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßget_rowspan, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp002, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πE != nil || !πTemp002 {
								continue
							}
							πF.PushCheckpoint(1)
							// line 2063: self.out.append(' & ')
							πF.SetLineno(2063)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr(" & ").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßappend, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2064: self.active_table.visit_entry() # increment cell count
							πF.SetLineno(2064)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßvisit_entry, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßinsert_additional_table_colum_delimiters.ToObject(), πTemp084); πE != nil {
						continue
					}
					// line 2066: def visit_entry(self, node):
					πF.SetLineno(2066)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp085 = πg.NewFunction(πg.NewCode("visit_entry", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µmrows *πg.Object = πg.UnboundLocal
						_ = µmrows
						var µbar1 *πg.Object = πg.UnboundLocal
						_ = µbar1
						var µmcols *πg.Object = πg.UnboundLocal
						_ = µmcols
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget_entry_number, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp002, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2068: if self.active_table.get_entry_number() == 0:
							πF.SetLineno(2068)
						Label1:
							// line 2069: self.insert_additional_table_colum_delimiters()
							πF.SetLineno(2069)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßinsert_additional_table_colum_delimiters, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label3
						Label2:
							// line 2071: self.out.append(' & ')
							πF.SetLineno(2071)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr(" & ").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label3:
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, µnode, ßmorerows.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp002
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, µnode, ßmorecols.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp002
						Label4:
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label5
							}
							goto Label6
							// line 2074: if 'morerows' in node and 'morecols' in node:
							πF.SetLineno(2074)
						Label5:
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("Cells that span multiple rows *and* columns currently not supported, sorry.").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNotImplementedError); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2075: raise NotImplementedError('Cells that '
							πF.SetLineno(2075)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
							goto Label6
						Label6:
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µnode, ßmorerows.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label7
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µnode, ßmorecols.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label8
							}
							goto Label9
							// line 2081: if 'morerows' in node:
							πF.SetLineno(2081)
						Label7:
							// line 2082: self.requirements['multirow'] = r'\usepackage{multirow}'
							πF.SetLineno(2082)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\\usepackage{multirow}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp003 = ßmultirow.ToObject()
							if πE = πg.SetItem(πF, πTemp002, πTemp003, πTemp001); πE != nil {
								continue
							}
							// line 2083: mrows = node['morerows'] + 1
							πF.SetLineno(2083)
							πTemp002 = ßmorerows.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µmrows = πTemp001
							// line 2084: self.active_table.set_rowspan(
							πF.SetLineno(2084)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßget_entry_number, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µmrows, "mrows"); πE != nil {
								continue
							}
							πTemp005[1] = µmrows
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßset_rowspan, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2086: self.out.append('\\multirow{%d}{%s}{' %
							πF.SetLineno(2086)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmrows, "mrows"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp003, ßget_column_width, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp007.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(µmrows, πTemp003).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\multirow{%d}{%s}{").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2088: self.context.append('}')
							πF.SetLineno(2088)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label10
							// line 2089: elif 'morecols' in node:
							πF.SetLineno(2089)
						Label8:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget_entry_number, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp002, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label11
							}
							goto Label12
							// line 2092: if self.active_table.get_entry_number() == 0:
							πF.SetLineno(2092)
						Label11:
							// line 2093: bar1 = self.active_table.get_vertical_bar()
							πF.SetLineno(2093)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßget_vertical_bar, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							µbar1 = πTemp001
							goto Label13
						Label12:
							// line 2095: bar1 = ''
							πF.SetLineno(2095)
							µbar1 = ß.ToObject()
							goto Label13
						Label13:
							// line 2096: mcols = node['morecols'] + 1
							πF.SetLineno(2096)
							πTemp002 = ßmorecols.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µmcols = πTemp001
							// line 2097: self.out.append('\\multicolumn{%d}{%s%s%s}{' %
							πF.SetLineno(2097)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µmcols, "mcols"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbar1, "bar1"); πE != nil {
								continue
							}
							πTemp008 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp003, ßget_entry_number, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp007.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp008[0] = πTemp003
							if πE = πg.CheckLocal(πF, µmcols, "mcols"); πE != nil {
								continue
							}
							πTemp008[1] = µmcols
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp003, ßget_multicolumn_width, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp007.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, πTemp007, ßget_vertical_bar, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp009.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple4(µmcols, µbar1, πTemp003, πTemp007).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\multicolumn{%d}{%s%s%s}{").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2103: self.context.append('}')
							πF.SetLineno(2103)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label10
						Label9:
							// line 2105: self.context.append('')
							πF.SetLineno(2105)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label10
						Label10:
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label14
							}
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp003, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp007
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp003, ßthead, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp007
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp002 = πTemp007
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label15
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp003, ßis_stub_column, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp007.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp003
						Label15:
							πTemp001 = πTemp002
						Label14:
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label16
							}
							goto Label17
							// line 2108: if len(node) and (isinstance(node.parent.parent, nodes.thead)
							πF.SetLineno(2108)
						Label16:
							// line 2110: self.out.append('\\textbf{')
							πF.SetLineno(2110)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\textbf{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2111: self.context.append('}')
							πF.SetLineno(2111)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label18
						Label17:
							// line 2113: self.context.append('')
							πF.SetLineno(2113)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label18
						Label18:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp003, ßcolwidths_auto, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp007); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(!πTemp006).ToObject()
							πTemp001 = πTemp002
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label19
							}
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("{").ToObject()
							if πTemp003, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp007, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp003, ßendswith, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label19
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp003
						Label19:
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label20
							}
							goto Label21
							// line 2116: if (not self.active_table.colwidths_auto
							πF.SetLineno(2116)
						Label20:
							// line 2119: self.out.append("%")
							πF.SetLineno(2119)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("%").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label21
						Label21:
							// line 2121: self.active_table.visit_entry() # increment cell count
							πF.SetLineno(2121)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßvisit_entry, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_entry.ToObject(), πTemp085); πE != nil {
						continue
					}
					// line 2123: def depart_entry(self, node):
					πF.SetLineno(2123)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp086 = πg.NewFunction(πg.NewCode("depart_entry", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2124: self.out.append(self.context.pop()) # header / not header
							πF.SetLineno(2124)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2125: self.out.append(self.context.pop()) # multirow/column
							πF.SetLineno(2125)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2127: self.insert_additional_table_colum_delimiters()
							πF.SetLineno(2127)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßinsert_additional_table_colum_delimiters, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_entry.ToObject(), πTemp086); πE != nil {
						continue
					}
					// line 2129: def visit_row(self, node):
					πF.SetLineno(2129)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp087 = πg.NewFunction(πg.NewCode("visit_row", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2130: self.active_table.visit_row()
							πF.SetLineno(2130)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßvisit_row, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_row.ToObject(), πTemp087); πE != nil {
						continue
					}
					// line 2132: def depart_row(self, node):
					πF.SetLineno(2132)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp088 = πg.NewFunction(πg.NewCode("depart_row", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2133: self.out.extend(self.active_table.depart_row())
							πF.SetLineno(2133)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdepart_row, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßextend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_row.ToObject(), πTemp088); πE != nil {
						continue
					}
					// line 2135: def visit_enumerated_list(self, node):
					πF.SetLineno(2135)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp089 = πg.NewFunction(πg.NewCode("visit_enumerated_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µtypes *πg.Object = πg.UnboundLocal
						_ = µtypes
						var µlabels *πg.Object = πg.UnboundLocal
						_ = µlabels
						var µprefix *πg.Object = πg.UnboundLocal
						_ = µprefix
						var µenumtype *πg.Object = πg.UnboundLocal
						_ = µenumtype
						var µsuffix *πg.Object = πg.UnboundLocal
						_ = µsuffix
						var µenumeration_level *πg.Object = πg.UnboundLocal
						_ = µenumeration_level
						var µcounter_name *πg.Object = πg.UnboundLocal
						_ = µcounter_name
						var µlabel *πg.Object = πg.UnboundLocal
						_ = µlabel
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 []πg.Param
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2137: types = {'': '',
							πF.SetLineno(2137)
							πTemp001 = πg.NewDict()
							if πE = πTemp001.SetItem(πF, ß.ToObject(), ß.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßarabic.ToObject(), ßarabic.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßloweralpha.ToObject(), ßalph.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßupperalpha.ToObject(), ßAlph.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßlowerroman.ToObject(), ßroman.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßupperroman.ToObject(), ßRoman.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp001.ToObject()
							µtypes = πTemp002
							// line 2144: labels = [('',  'arabic', '.'), #  1.
							πF.SetLineno(2144)
							πTemp003 = make([]*πg.Object, 4)
							πTemp002 = πg.NewTuple3(ß.ToObject(), ßarabic.ToObject(), πg.NewStr(".").ToObject()).ToObject()
							πTemp003[0] = πTemp002
							πTemp002 = πg.NewTuple3(πg.NewStr("(").ToObject(), ßalph.ToObject(), πg.NewStr(")").ToObject()).ToObject()
							πTemp003[1] = πTemp002
							πTemp002 = πg.NewTuple3(ß.ToObject(), ßroman.ToObject(), πg.NewStr(".").ToObject()).ToObject()
							πTemp003[2] = πTemp002
							πTemp002 = πg.NewTuple3(ß.ToObject(), ßAlph.ToObject(), πg.NewStr(".").ToObject()).ToObject()
							πTemp003[3] = πTemp002
							πTemp002 = πg.NewList(πTemp003...).ToObject()
							µlabels = πTemp002
							// line 2149: prefix = ''
							πF.SetLineno(2149)
							µprefix = ß.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcompound_enumerators, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2150: if self.compound_enumerators:
							πF.SetLineno(2150)
						Label1:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßsection_prefix_for_enumerators, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp005
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label3
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp005
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label3
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ß_enumeration_counters, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							πTemp005 = πg.GetBool(!πTemp007).ToObject()
							πTemp002 = πTemp005
						Label3:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 2151: if (self.section_prefix_for_enumerators and self.section_level
							πF.SetLineno(2151)
						Label4:
							// line 2153: prefix = '.'.join([str(n) for n in
							πF.SetLineno(2153)
							πTemp003 = πF.MakeArgs(1)
							πTemp008 = make([]πg.Param, 0)
							πTemp006 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp008, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µn *πg.Object = πg.UnboundLocal
								_ = µn
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 *πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πTemp007 []*πg.Object
								_ = πTemp007
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
											continue
										}
										if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πTemp003, πg.None}, nil); πE != nil {
											continue
										}
										if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
											continue
										}
										if πTemp004, πE = πg.GetAttr(πF, µself, ß_section_number, nil); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetItem(πF, πTemp004, πTemp002); πE != nil {
											continue
										}
										if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp005 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp005 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp006 = !isStop
										} else {
											πTemp006 = true
											µn = πTemp002
										}
										if πE != nil || !πTemp006 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 2153: prefix = '.'.join([str(n) for n in
										πF.SetLineno(2153)
										πTemp007 = πF.MakeArgs(1)
										if πE = πg.CheckLocal(πF, µn, "n"); πE != nil {
											continue
										}
										πTemp007[0] = µn
										if πTemp002, πE = πg.ResolveGlobal(πF, ßstr); πE != nil {
											continue
										}
										if πTemp003, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp007)
										πF.PushCheckpoint(4)
										return πTemp003, nil
									Label4:
										πTemp002 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp009, πE = πTemp006.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ListType.Call(πF, πg.Args{πTemp009}, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp005, πE = πg.GetAttr(πF, πg.NewStr(".").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßsection_enumerator_separator, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp009, πTemp005); πE != nil {
								continue
							}
							µprefix = πTemp002
							goto Label5
						Label5:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_enumeration_counters, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label6
							}
							goto Label7
							// line 2156: if self._enumeration_counters:
							πF.SetLineno(2156)
						Label6:
							// line 2157: prefix += self._enumeration_counters[-1]
							πF.SetLineno(2157)
							if πE = πg.CheckLocal(πF, µprefix, "prefix"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp005
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µself, ß_enumeration_counters, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp009, πTemp002); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, µprefix, πTemp005); πE != nil {
								continue
							}
							µprefix = πTemp002
							goto Label7
						Label7:
							goto Label2
						Label2:
							// line 2160: prefix += node.get('prefix', '')
							πF.SetLineno(2160)
							if πE = πg.CheckLocal(πF, µprefix, "prefix"); πE != nil {
								continue
							}
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = ßprefix.ToObject()
							πTemp003[1] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp002, πE = πg.IAdd(πF, µprefix, πTemp005); πE != nil {
								continue
							}
							µprefix = πTemp002
							// line 2161: enumtype = types[node.get('enumtype' '')]
							πF.SetLineno(2161)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßenumtype.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp002 = πTemp009
							if πE = πg.CheckLocal(πF, µtypes, "types"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µtypes, πTemp002); πE != nil {
								continue
							}
							µenumtype = πTemp005
							// line 2162: suffix = node.get('suffix', '')
							πF.SetLineno(2162)
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = ßsuffix.ToObject()
							πTemp003[1] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µsuffix = πTemp005
							// line 2164: enumeration_level = len(self._enumeration_counters)+1
							πF.SetLineno(2164)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ß_enumeration_counters, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp002, πE = πg.Add(πF, πTemp009, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µenumeration_level = πTemp002
							// line 2165: counter_name = 'enum' + roman.toRoman(enumeration_level).lower()
							πF.SetLineno(2165)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µenumeration_level, "enumeration_level"); πE != nil {
								continue
							}
							πTemp003[0] = µenumeration_level
							if πTemp005, πE = πg.ResolveGlobal(πF, ßroman); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, πTemp005, ßtoRoman, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp009.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp009, πE = πg.GetAttr(πF, πTemp005, ßlower, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp009.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, ßenum.ToObject(), πTemp005); πE != nil {
								continue
							}
							µcounter_name = πTemp002
							// line 2166: label = r'%s\%s{%s}%s' % (prefix, enumtype, counter_name, suffix)
							πF.SetLineno(2166)
							if πE = πg.CheckLocal(πF, µprefix, "prefix"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µenumtype, "enumtype"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcounter_name, "counter_name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsuffix, "suffix"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple4(µprefix, µenumtype, µcounter_name, µsuffix).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("%s\\%s{%s}%s").ToObject(), πTemp005); πE != nil {
								continue
							}
							µlabel = πTemp002
							// line 2167: self._enumeration_counters.append(label)
							πF.SetLineno(2167)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πTemp003[0] = µlabel
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ß_enumeration_counters, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2169: self.duclass_open(node)
							πF.SetLineno(2169)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.CheckLocal(πF, µenumeration_level, "enumeration_level"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.LE(πF, µenumeration_level, πg.NewInt(4).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label8
							}
							goto Label9
							// line 2170: if enumeration_level <= 4:
							πF.SetLineno(2170)
						Label8:
							// line 2171: self.out.append('\\begin{enumerate}')
							πF.SetLineno(2171)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\\begin{enumerate}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.CheckLocal(πF, µprefix, "prefix"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µenumtype, "enumtype"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsuffix, "suffix"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple3(µprefix, µenumtype, µsuffix).ToObject()
							if πE = πg.CheckLocal(πF, µenumeration_level, "enumeration_level"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.Sub(πF, µenumeration_level, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp009 = πTemp010
							if πE = πg.CheckLocal(πF, µlabels, "labels"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.GetItem(πF, µlabels, πTemp009); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, πTemp005, πTemp010); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label11
							}
							goto Label12
							// line 2172: if (prefix, enumtype, suffix
							πF.SetLineno(2172)
						Label11:
							// line 2174: self.out.append('\n\\renewcommand{\\label%s}{%s}' %
							πF.SetLineno(2174)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcounter_name, "counter_name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(µcounter_name, µlabel).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\n\\renewcommand{\\label%s}{%s}").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label12
						Label12:
							goto Label10
						Label9:
							// line 2177: self.fallbacks[counter_name] = '\\newcounter{%s}' % counter_name
							πF.SetLineno(2177)
							if πE = πg.CheckLocal(πF, µcounter_name, "counter_name"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\newcounter{%s}").ToObject(), µcounter_name); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp005}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcounter_name, "counter_name"); πE != nil {
								continue
							}
							πTemp010 = µcounter_name
							if πE = πg.SetItem(πF, πTemp009, πTemp010, πTemp005); πE != nil {
								continue
							}
							// line 2178: self.out.append('\\begin{list}')
							πF.SetLineno(2178)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\\begin{list}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2179: self.out.append('{%s}' % label)
							πF.SetLineno(2179)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlabel, "label"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("{%s}").ToObject(), µlabel); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2180: self.out.append('{\\usecounter{%s}}' % counter_name)
							πF.SetLineno(2180)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcounter_name, "counter_name"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("{\\usecounter{%s}}").ToObject(), µcounter_name); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label10
						Label10:
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µnode, ßstart.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label13
							}
							goto Label14
							// line 2181: if 'start' in node:
							πF.SetLineno(2181)
						Label13:
							// line 2182: self.out.append('\n\\setcounter{%s}{%d}' %
							πF.SetLineno(2182)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcounter_name, "counter_name"); πE != nil {
								continue
							}
							πTemp010 = ßstart.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetItem(πF, µnode, πTemp010); πE != nil {
								continue
							}
							if πTemp009, πE = πg.Sub(πF, πTemp011, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp005 = πg.NewTuple2(µcounter_name, πTemp009).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\n\\setcounter{%s}{%d}").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp005.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label14
						Label14:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_enumerated_list.ToObject(), πTemp089); πE != nil {
						continue
					}
					// line 2186: def depart_enumerated_list(self, node):
					πF.SetLineno(2186)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp090 = πg.NewFunction(πg.NewCode("depart_enumerated_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_enumeration_counters, nil); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp001, πE = πg.LE(πF, πTemp004, πg.NewInt(4).ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 2187: if len(self._enumeration_counters) <= 4:
							πF.SetLineno(2187)
						Label1:
							// line 2188: self.out.append('\\end{enumerate}\n')
							πF.SetLineno(2188)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("\\end{enumerate}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label3
						Label2:
							// line 2190: self.out.append('\\end{list}\n')
							πF.SetLineno(2190)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("\\end{list}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label3
						Label3:
							// line 2191: self.duclass_close(node)
							πF.SetLineno(2191)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp002[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2192: self._enumeration_counters.pop()
							πF.SetLineno(2192)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_enumeration_counters, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_enumerated_list.ToObject(), πTemp090); πE != nil {
						continue
					}
					// line 2194: def visit_field(self, node):
					πF.SetLineno(2194)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp091 = πg.NewFunction(πg.NewCode("visit_field", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2196: pass
							πF.SetLineno(2196)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_field.ToObject(), πTemp091); πE != nil {
						continue
					}
					// line 2198: def depart_field(self, node):
					πF.SetLineno(2198)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp092 = πg.NewFunction(πg.NewCode("depart_field", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2199: pass
							πF.SetLineno(2199)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_field.ToObject(), πTemp092); πE != nil {
						continue
					}
					// line 2201: def visit_field_body(self, node):
					πF.SetLineno(2201)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp093 = πg.NewFunction(πg.NewCode("visit_field_body", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2202: pass
							πF.SetLineno(2202)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_field_body.ToObject(), πTemp093); πE != nil {
						continue
					}
					// line 2204: def depart_field_body(self, node):
					πF.SetLineno(2204)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp094 = πg.NewFunction(πg.NewCode("depart_field_body", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßdocinfo, nil); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002 == πTemp003).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2205: if self.out is self.docinfo:
							πF.SetLineno(2205)
						Label1:
							// line 2206: self.out.append(r'\\'+'\n')
							πF.SetLineno(2206)
							πTemp005 = πF.MakeArgs(1)
							if πTemp001, πE = πg.Add(πF, πg.NewStr("\\\\").ToObject(), πg.NewStr("\n").ToObject()); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_field_body.ToObject(), πTemp094); πE != nil {
						continue
					}
					// line 2208: def visit_field_list(self, node):
					πF.SetLineno(2208)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp095 = πg.NewFunction(πg.NewCode("visit_field_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2209: self.duclass_open(node)
							πF.SetLineno(2209)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßdocinfo, nil); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp003 != πTemp004).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 2210: if self.out is not self.docinfo:
							πF.SetLineno(2210)
						Label1:
							// line 2211: self.fallbacks['fieldlist'] = PreambleCmds.fieldlist
							πF.SetLineno(2211)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfieldlist, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp006 = ßfieldlist.ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp006, πTemp002); πE != nil {
								continue
							}
							// line 2212: self.out.append('\\begin{DUfieldlist}')
							πF.SetLineno(2212)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\begin{DUfieldlist}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_field_list.ToObject(), πTemp095); πE != nil {
						continue
					}
					// line 2214: def depart_field_list(self, node):
					πF.SetLineno(2214)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp096 = πg.NewFunction(πg.NewCode("depart_field_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßdocinfo, nil); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002 != πTemp003).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2215: if self.out is not self.docinfo:
							πF.SetLineno(2215)
						Label1:
							// line 2216: self.out.append('\\end{DUfieldlist}\n')
							πF.SetLineno(2216)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\end{DUfieldlist}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label2
						Label2:
							// line 2217: self.duclass_close(node)
							πF.SetLineno(2217)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_field_list.ToObject(), πTemp096); πE != nil {
						continue
					}
					// line 2219: def visit_field_name(self, node):
					πF.SetLineno(2219)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp097 = πg.NewFunction(πg.NewCode("visit_field_name", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßdocinfo, nil); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002 == πTemp003).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2220: if self.out is self.docinfo:
							πF.SetLineno(2220)
						Label1:
							// line 2221: self.out.append('\\textbf{')
							πF.SetLineno(2221)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\textbf{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label2:
							// line 2225: self.out.append('\n\\item[{')
							πF.SetLineno(2225)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\n\\item[{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_field_name.ToObject(), πTemp097); πE != nil {
						continue
					}
					// line 2227: def depart_field_name(self, node):
					πF.SetLineno(2227)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp098 = πg.NewFunction(πg.NewCode("depart_field_name", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßdocinfo, nil); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002 == πTemp003).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2228: if self.out is self.docinfo:
							πF.SetLineno(2228)
						Label1:
							// line 2229: self.out.append('}: &')
							πF.SetLineno(2229)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("}: &").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label2:
							// line 2231: self.out.append(':}]')
							πF.SetLineno(2231)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr(":}]").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_field_name.ToObject(), πTemp098); πE != nil {
						continue
					}
					// line 2233: def visit_figure(self, node):
					πF.SetLineno(2233)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp099 = πg.NewFunction(πg.NewCode("visit_figure", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µalignment *πg.Object = πg.UnboundLocal
						_ = µalignment
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2234: self.requirements['float_settings'] = PreambleCmds.float_settings
							πF.SetLineno(2234)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßfloat_settings, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp004 = ßfloat_settings.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2235: self.duclass_open(node)
							πF.SetLineno(2235)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2238: alignment = node.attributes.get('align', 'center')
							πF.SetLineno(2238)
							πTemp005 = πF.MakeArgs(2)
							πTemp005[0] = ßalign.ToObject()
							πTemp005[1] = ßcenter.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßget, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µalignment = πTemp001
							if πE = πg.CheckLocal(πF, µalignment, "alignment"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.NE(πF, µalignment, ßcenter.ToObject()); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 2239: if alignment != 'center':
							πF.SetLineno(2239)
						Label1:
							// line 2243: self.out.append('\\begin{figure} %% align = "%s"\n' % alignment)
							πF.SetLineno(2243)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µalignment, "alignment"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\begin{figure} %% align = \"%s\"\n").ToObject(), µalignment); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label2:
							// line 2245: self.out.append('\\begin{figure}\n')
							πF.SetLineno(2245)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\begin{figure}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label3:
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label4
							}
							goto Label5
							// line 2246: if node.get('ids'):
							πF.SetLineno(2246)
						Label4:
							// line 2247: self.out += self.ids_to_labels(node) + ['\n']
							πF.SetLineno(2247)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp005 = make([]*πg.Object, 1)
							πTemp005[0] = πg.NewStr("\n").ToObject()
							πTemp003 = πg.NewList(πTemp005...).ToObject()
							if πTemp002, πE = πg.Add(πF, πTemp004, πTemp003); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IAdd(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp003); πE != nil {
								continue
							}
							goto Label5
						Label5:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_figure.ToObject(), πTemp099); πE != nil {
						continue
					}
					// line 2249: def depart_figure(self, node):
					πF.SetLineno(2249)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp100 = πg.NewFunction(πg.NewCode("depart_figure", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2250: self.out.append('\\end{figure}\n')
							πF.SetLineno(2250)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\end{figure}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2251: self.duclass_close(node)
							πF.SetLineno(2251)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_figure.ToObject(), πTemp100); πE != nil {
						continue
					}
					// line 2253: def visit_footer(self, node):
					πF.SetLineno(2253)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp101 = πg.NewFunction(πg.NewCode("visit_footer", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2254: self.push_output_collector([])
							πF.SetLineno(2254)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = make([]*πg.Object, 0)
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2255: self.out.append(r'\newcommand{\DUfooter}{')
							πF.SetLineno(2255)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\newcommand{\\DUfooter}{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_footer.ToObject(), πTemp101); πE != nil {
						continue
					}
					// line 2257: def depart_footer(self, node):
					πF.SetLineno(2257)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp102 = πg.NewFunction(πg.NewCode("depart_footer", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2258: self.out.append('}')
							πF.SetLineno(2258)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2259: self.requirements['~footer'] = ''.join(self.out)
							πF.SetLineno(2259)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp005 = πg.NewStr("~footer").ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp002); πE != nil {
								continue
							}
							// line 2260: self.pop_output_collector()
							πF.SetLineno(2260)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßpop_output_collector, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_footer.ToObject(), πTemp102); πE != nil {
						continue
					}
					// line 2262: def visit_footnote(self, node):
					πF.SetLineno(2262)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp103 = πg.NewFunction(πg.NewCode("visit_footnote", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µbackref *πg.Object = πg.UnboundLocal
						_ = µbackref
						var µnum *πg.Object = πg.UnboundLocal
						_ = µnum
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.BaseException
						_ = πTemp005
						var πTemp006 *πg.Traceback
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 []*πg.Object
						_ = πTemp011
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2263: try:
							πF.SetLineno(2263)
							πF.PushCheckpoint(2)
							// line 2264: backref = node['backrefs'][0]
							πF.SetLineno(2264)
							πTemp001 = πg.NewInt(0).ToObject()
							πTemp003 = ßbackrefs.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µbackref = πTemp002
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp005, πTemp006 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßIndexError); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsInstance(πF, πTemp005.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label3
							}
							πE = πF.Raise(πTemp005.ToObject(), nil, πTemp006.ToObject())
							continue
							// line 2265: except IndexError:
							πF.SetLineno(2265)
						Label3:
							// line 2266: backref = node['ids'][0] # no backref, use self-ref instead
							πF.SetLineno(2266)
							πTemp001 = πg.NewInt(0).ToObject()
							πTemp003 = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							µbackref = πTemp002
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdocutils_footnotes, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label4
							}
							goto Label5
							// line 2267: if self.docutils_footnotes:
							πF.SetLineno(2267)
						Label4:
							// line 2268: self.fallbacks['footnotes'] = PreambleCmds.footnotes
							πF.SetLineno(2268)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßfootnotes, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßfootnotes.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2269: num = node[0].astext()
							πF.SetLineno(2269)
							πTemp001 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							µnum = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfootnote_references, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp003, ßbrackets.ToObject()); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label6
							}
							goto Label7
							// line 2270: if self.settings.footnote_references == 'brackets':
							πF.SetLineno(2270)
						Label6:
							// line 2271: num = '[%s]' % num
							πF.SetLineno(2271)
							if πE = πg.CheckLocal(πF, µnum, "num"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("[%s]").ToObject(), µnum); πE != nil {
								continue
							}
							µnum = πTemp001
							goto Label7
						Label7:
							// line 2272: self.out.append('%%\n\\DUfootnotetext{%s}{%s}{%s}{' %
							πF.SetLineno(2272)
							πTemp008 = πF.MakeArgs(1)
							πTemp003 = πg.NewInt(0).ToObject()
							πTemp009 = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.GetItem(πF, µnode, πTemp009); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp010, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µbackref, "backref"); πE != nil {
								continue
							}
							πTemp011 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnum, "num"); πE != nil {
								continue
							}
							πTemp011[0] = µnum
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp003.Call(πF, πTemp011, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp011)
							πTemp002 = πg.NewTuple3(πTemp004, µbackref, πTemp009).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%%\n\\DUfootnotetext{%s}{%s}{%s}{").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp008[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp002 = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							πTemp002 = ßnames.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label8
							}
							goto Label9
							// line 2274: if node['ids'] == node['names']:
							πF.SetLineno(2274)
						Label8:
							// line 2275: self.out += self.ids_to_labels(node)
							πF.SetLineno(2275)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp008[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp002); πE != nil {
								continue
							}
							goto Label9
						Label9:
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(1).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp007 {
								goto Label10
							}
							πTemp008 = πF.MakeArgs(2)
							πTemp002 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							πTemp008[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßparagraph, nil); πE != nil {
								continue
							}
							πTemp008[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							πTemp001 = πTemp003
						Label10:
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label11
							}
							goto Label12
							// line 2277: if node[1:] and isinstance(node[1], nodes.paragraph):
							πF.SetLineno(2277)
						Label11:
							// line 2278: self.out.append('%')
							πF.SetLineno(2278)
							πTemp008 = πF.MakeArgs(1)
							πTemp008[0] = πg.NewStr("%").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							goto Label12
						Label12:
							goto Label5
						Label5:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_footnote.ToObject(), πTemp103); πE != nil {
						continue
					}
					// line 2281: def depart_footnote(self, node):
					πF.SetLineno(2281)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp104 = πg.NewFunction(πg.NewCode("depart_footnote", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2282: self.out.append('}\n')
							πF.SetLineno(2282)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_footnote.ToObject(), πTemp104); πE != nil {
						continue
					}
					// line 2284: def visit_footnote_reference(self, node):
					πF.SetLineno(2284)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp105 = πg.NewFunction(πg.NewCode("visit_footnote_reference", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µhref *πg.Object = πg.UnboundLocal
						_ = µhref
						var µformat *πg.Object = πg.UnboundLocal
						_ = µformat
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2285: href = ''
							πF.SetLineno(2285)
							µhref = ß.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Contains(πF, µnode, ßrefid.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Contains(πF, µnode, ßrefname.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp002).ToObject()
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							goto Label3
							// line 2286: if 'refid' in node:
							πF.SetLineno(2286)
						Label1:
							// line 2287: href = node['refid']
							πF.SetLineno(2287)
							πTemp001 = ßrefid.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							µhref = πTemp003
							goto Label3
							// line 2288: elif 'refname' in node:
							πF.SetLineno(2288)
						Label2:
							// line 2289: href = self.document.nameids[node['refname']]
							πF.SetLineno(2289)
							πTemp003 = ßrefname.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßnameids, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp005, πTemp001); πE != nil {
								continue
							}
							µhref = πTemp003
							goto Label3
						Label3:
							// line 2300: format = self.settings.footnote_references
							πF.SetLineno(2300)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßfootnote_references, nil); πE != nil {
								continue
							}
							µformat = πTemp003
							if πE = πg.CheckLocal(πF, µformat, "format"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µformat, ßbrackets.ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label4
							}
							goto Label5
							// line 2301: if format == 'brackets':
							πF.SetLineno(2301)
						Label4:
							// line 2302: self.append_hypertargets(node)
							πF.SetLineno(2302)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp006[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_hypertargets, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 2303: self.out.append('\\hyperlink{%s}{[' % href)
							πF.SetLineno(2303)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\hyperlink{%s}{[").ToObject(), µhref); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 2304: self.context.append(']}')
							πF.SetLineno(2304)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewStr("]}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label6
						Label5:
							// line 2306: self.fallbacks['footnotes'] = PreambleCmds.footnotes
							πF.SetLineno(2306)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßfootnotes, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp005 = ßfootnotes.ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp001); πE != nil {
								continue
							}
							// line 2307: self.out.append(r'\DUfootnotemark{%s}{%s}{' %
							πF.SetLineno(2307)
							πTemp006 = πF.MakeArgs(1)
							πTemp004 = πg.NewInt(0).ToObject()
							πTemp007 = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetItem(πF, µnode, πTemp007); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, πTemp008, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(πTemp005, µhref).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\DUfootnotemark{%s}{%s}{").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 2309: self.context.append('}')
							πF.SetLineno(2309)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label6
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_footnote_reference.ToObject(), πTemp105); πE != nil {
						continue
					}
					// line 2311: def depart_footnote_reference(self, node):
					πF.SetLineno(2311)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp106 = πg.NewFunction(πg.NewCode("depart_footnote_reference", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2312: self.out.append(self.context.pop())
							πF.SetLineno(2312)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_footnote_reference.ToObject(), πTemp106); πE != nil {
						continue
					}
					// line 2315: def label_delim(self, node, bracket, superscript):
					πF.SetLineno(2315)
					πTemp002 = make([]πg.Param, 4)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp002[2] = πg.Param{Name: "bracket", Def: nil}
					πTemp002[3] = πg.Param{Name: "superscript", Def: nil}
					πTemp107 = πg.NewFunction(πg.NewCode("label_delim", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µbracket *πg.Object = πArgs[2]
						_ = µbracket
						var µsuperscript *πg.Object = πArgs[3]
						_ = µsuperscript
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßfootnote, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2316: if isinstance(node.parent, nodes.footnote):
							πF.SetLineno(2316)
						Label1:
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßSkipNode, nil); πE != nil {
								continue
							}
							// line 2317: raise nodes.SkipNode
							πF.SetLineno(2317)
							πE = πF.Raise(πTemp003, nil, nil)
							continue
							goto Label3
						Label2:
							// line 2319: assert isinstance(node.parent, nodes.citation)
							πF.SetLineno(2319)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcitation, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Assert(πF, πTemp003, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_use_latex_citations, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(!πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 2320: if not self._use_latex_citations:
							πF.SetLineno(2320)
						Label4:
							// line 2321: self.out.append(bracket)
							πF.SetLineno(2321)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µbracket, "bracket"); πE != nil {
								continue
							}
							πTemp001[0] = µbracket
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label5
						Label5:
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßlabel_delim.ToObject(), πTemp107); πE != nil {
						continue
					}
					// line 2323: def visit_label(self, node):
					πF.SetLineno(2323)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp108 = πg.NewFunction(πg.NewCode("visit_label", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2324: """footnote or citation label: in brackets or as superscript"""
							πF.SetLineno(2324)
							// line 2325: self.label_delim(node, '[', '\\textsuperscript{')
							πF.SetLineno(2325)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = πg.NewStr("[").ToObject()
							πTemp001[2] = πg.NewStr("\\textsuperscript{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßlabel_delim, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_label.ToObject(), πTemp108); πE != nil {
						continue
					}
					// line 2324: """footnote or citation label: in brackets or as superscript"""
					πF.SetLineno(2324)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp109}, πg.NewStr("footnote or citation label: in brackets or as superscript").ToObject()); πE != nil {
						continue
					}
					if πTemp110, πE = πg.ResolveClass(πF, πClass, nil, ßvisit_label); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp110, ß__doc__, πTemp109); πE != nil {
						continue
					}
					// line 2327: def depart_label(self, node):
					πF.SetLineno(2327)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp109 = πg.NewFunction(πg.NewCode("depart_label", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2328: self.label_delim(node, ']', '}')
							πF.SetLineno(2328)
							πTemp001 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = πg.NewStr("]").ToObject()
							πTemp001[2] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßlabel_delim, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_label.ToObject(), πTemp109); πE != nil {
						continue
					}
					// line 2331: def visit_generated(self, node):
					πF.SetLineno(2331)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp110 = πg.NewFunction(πg.NewCode("visit_generated", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2332: pass
							πF.SetLineno(2332)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_generated.ToObject(), πTemp110); πE != nil {
						continue
					}
					// line 2334: def depart_generated(self, node):
					πF.SetLineno(2334)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp111 = πg.NewFunction(πg.NewCode("depart_generated", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2335: pass
							πF.SetLineno(2335)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_generated.ToObject(), πTemp111); πE != nil {
						continue
					}
					// line 2337: def visit_header(self, node):
					πF.SetLineno(2337)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp112 = πg.NewFunction(πg.NewCode("visit_header", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2338: self.push_output_collector([])
							πF.SetLineno(2338)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = make([]*πg.Object, 0)
							πTemp003 = πg.NewList(πTemp002...).ToObject()
							πTemp001[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2339: self.out.append(r'\newcommand{\DUheader}{')
							πF.SetLineno(2339)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\newcommand{\\DUheader}{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_header.ToObject(), πTemp112); πE != nil {
						continue
					}
					// line 2341: def depart_header(self, node):
					πF.SetLineno(2341)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp113 = πg.NewFunction(πg.NewCode("depart_header", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2342: self.out.append('}')
							πF.SetLineno(2342)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2343: self.requirements['~header'] = ''.join(self.out)
							πF.SetLineno(2343)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.GetAttr(πF, ß.ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp005 = πg.NewStr("~header").ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp002); πE != nil {
								continue
							}
							// line 2344: self.pop_output_collector()
							πF.SetLineno(2344)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßpop_output_collector, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_header.ToObject(), πTemp113); πE != nil {
						continue
					}
					// line 2346: def to_latex_length(self, length_str, pxunit=None):
					πF.SetLineno(2346)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "length_str", Def: nil}
					if πTemp115, πE = πg.ResolveClass(πF, πClass, nil, ßNone); πE != nil {
						continue
					}
					πTemp002[2] = πg.Param{Name: "pxunit", Def: πTemp115}
					πTemp114 = πg.NewFunction(πg.NewCode("to_latex_length", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µlength_str *πg.Object = πArgs[1]
						_ = µlength_str
						var µpxunit *πg.Object = πArgs[2]
						_ = µpxunit
						var µmatch *πg.Object = πg.UnboundLocal
						_ = µmatch
						var µvalue *πg.Object = πg.UnboundLocal
						_ = µvalue
						var µunit *πg.Object = πg.UnboundLocal
						_ = µunit
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2347: """Convert `length_str` with rst lenght to LaTeX length
							πF.SetLineno(2347)
							if πE = πg.CheckLocal(πF, µpxunit, "pxunit"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µpxunit != πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2349: if pxunit is not None:
							πF.SetLineno(2349)
						Label1:
							// line 2350: sys.stderr.write('deprecation warning: LaTeXTranslator.to_latex_length()'
							πF.SetLineno(2350)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("deprecation warning: LaTeXTranslator.to_latex_length() option `pxunit` will be removed.").ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßsys); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßstderr, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßwrite, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							// line 2352: match = re.match(r'(\d*\.?\d*)\s*(\S*)', length_str)
							πF.SetLineno(2352)
							πTemp004 = πF.MakeArgs(2)
							πTemp004[0] = πg.NewStr("(\\d*\\.?\\d*)\\s*(\\S*)").ToObject()
							if πE = πg.CheckLocal(πF, µlength_str, "length_str"); πE != nil {
								continue
							}
							πTemp004[1] = µlength_str
							if πTemp001, πE = πg.ResolveGlobal(πF, ßre); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßmatch, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µmatch = πTemp001
							if πE = πg.CheckLocal(πF, µmatch, "match"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, µmatch); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 2353: if not match:
							πF.SetLineno(2353)
						Label3:
							// line 2354: return length_str
							πF.SetLineno(2354)
							if πE = πg.CheckLocal(πF, µlength_str, "length_str"); πE != nil {
								continue
							}
							πR = µlength_str
							continue
							goto Label4
						Label4:
							// line 2355: value, unit = match.groups()[:2]
							πF.SetLineno(2355)
							if πTemp001, πE = πg.SliceType.Call(πF, πg.Args{πg.None, πg.NewInt(2).ToObject(), πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmatch, "match"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µmatch, ßgroups, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp006, πTemp001); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp005}}}, πTemp002); πE != nil {
								continue
							}
							µvalue = πTemp001
							µunit = πTemp005
							if πE = πg.CheckLocal(πF, µunit, "unit"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(ß.ToObject(), ßpt.ToObject()).ToObject()
							if πTemp003, πE = πg.Contains(πF, πTemp002, µunit); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							if πE = πg.CheckLocal(πF, µunit, "unit"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µunit, πg.NewStr("%").ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label6
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßis_xetex, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp003 {
								goto Label7
							}
							if πE = πg.CheckLocal(πF, µunit, "unit"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µunit, ßpx.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
						Label7:
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label8
							}
							goto Label9
							// line 2357: if unit in ('', 'pt'):
							πF.SetLineno(2357)
						Label5:
							// line 2358: length_str = '%sbp' % value
							πF.SetLineno(2358)
							if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%sbp").ToObject(), µvalue); πE != nil {
								continue
							}
							µlength_str = πTemp001
							goto Label9
							// line 2360: elif unit == '%':
							πF.SetLineno(2360)
						Label6:
							// line 2361: length_str = '%.3f\\linewidth' % (float(value)/100.0)
							πF.SetLineno(2361)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
								continue
							}
							πTemp004[0] = µvalue
							if πTemp005, πE = πg.ResolveGlobal(πF, ßfloat); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp002, πE = πg.Div(πF, πTemp006, πg.NewFloat(100.0).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%.3f\\linewidth").ToObject(), πTemp002); πE != nil {
								continue
							}
							µlength_str = πTemp001
							goto Label9
							// line 2362: elif self.is_xetex and unit == 'px':
							πF.SetLineno(2362)
						Label8:
							// line 2366: self.fallbacks['_providelength'] = PreambleCmds.providelength
							πF.SetLineno(2366)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßprovidelength, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp006 = ß_providelength.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp006, πTemp001); πE != nil {
								continue
							}
							// line 2367: self.fallbacks['px'] = '\n\\DUprovidelength{\\pdfpxdimen}{1bp}\n'
							πF.SetLineno(2367)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\n\\DUprovidelength{\\pdfpxdimen}{1bp}\n").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp005 = ßpx.ToObject()
							if πE = πg.SetItem(πF, πTemp002, πTemp005, πTemp001); πE != nil {
								continue
							}
							// line 2368: length_str = r'%s\pdfpxdimen' % value
							πF.SetLineno(2368)
							if πE = πg.CheckLocal(πF, µvalue, "value"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("%s\\pdfpxdimen").ToObject(), µvalue); πE != nil {
								continue
							}
							µlength_str = πTemp001
							goto Label9
						Label9:
							// line 2369: return length_str
							πF.SetLineno(2369)
							if πE = πg.CheckLocal(πF, µlength_str, "length_str"); πE != nil {
								continue
							}
							πR = µlength_str
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßto_latex_length.ToObject(), πTemp114); πE != nil {
						continue
					}
					// line 2347: """Convert `length_str` with rst lenght to LaTeX length
					πF.SetLineno(2347)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp115}, πg.NewStr("Convert `length_str` with rst lenght to LaTeX length\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp116, πE = πg.ResolveClass(πF, πClass, nil, ßto_latex_length); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp116, ß__doc__, πTemp115); πE != nil {
						continue
					}
					// line 2371: def visit_image(self, node):
					πF.SetLineno(2371)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp115 = πg.NewFunction(πg.NewCode("visit_image", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µattrs *πg.Object = πg.UnboundLocal
						_ = µattrs
						var µimagepath *πg.Object = πg.UnboundLocal
						_ = µimagepath
						var µpre *πg.Object = πg.UnboundLocal
						_ = µpre
						var µpost *πg.Object = πg.UnboundLocal
						_ = µpost
						var µinclude_graphics_options *πg.Object = πg.UnboundLocal
						_ = µinclude_graphics_options
						var µalign_codes *πg.Object = πg.UnboundLocal
						_ = µalign_codes
						var µalign_code *πg.Object = πg.UnboundLocal
						_ = µalign_code
						var µoptions *πg.Object = πg.UnboundLocal
						_ = µoptions
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 *πg.Dict
						_ = πTemp008
						var πTemp009 *πg.BaseException
						_ = πTemp009
						var πTemp010 *πg.Traceback
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 8:
								goto Label8
							default:
								panic("unexpected function state")
							}
							// line 2372: self.requirements['graphicx'] = self.graphicx_package
							πF.SetLineno(2372)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßgraphicx_package, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp004 = ßgraphicx.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp002); πE != nil {
								continue
							}
							// line 2373: attrs = node.attributes
							πF.SetLineno(2373)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							µattrs = πTemp001
							// line 2375: imagepath = url2pathname(attrs['uri']).replace('\\', '/')
							πF.SetLineno(2375)
							πTemp005 = πF.MakeArgs(2)
							πTemp005[0] = πg.NewStr("\\").ToObject()
							πTemp005[1] = πg.NewStr("/").ToObject()
							πTemp006 = πF.MakeArgs(1)
							πTemp001 = ßuri.ToObject()
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µattrs, πTemp001); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßurl2pathname); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µimagepath = πTemp002
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Contains(πF, µattrs, ßalign.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label1
							}
							goto Label2
							// line 2377: if not 'align' in attrs:
							πF.SetLineno(2377)
						Label1:
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßfigure, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label3
							}
							goto Label4
							// line 2379: if isinstance(node.parent, nodes.figure):
							πF.SetLineno(2379)
						Label3:
							// line 2380: attrs['align'] = 'center'
							πF.SetLineno(2380)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, ßcenter.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							πTemp002 = ßalign.ToObject()
							if πE = πg.SetItem(πF, µattrs, πTemp002, πTemp001); πE != nil {
								continue
							}
							goto Label4
						Label4:
							// line 2381: self.set_align_from_classes(node)
							πF.SetLineno(2381)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_align_from_classes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label2
						Label2:
							// line 2383: pre = []
							πF.SetLineno(2383)
							πTemp005 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp005...).ToObject()
							µpre = πTemp001
							// line 2384: post = []
							πF.SetLineno(2384)
							πTemp005 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp005...).ToObject()
							µpost = πTemp001
							// line 2385: include_graphics_options = []
							πF.SetLineno(2385)
							πTemp005 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp005...).ToObject()
							µinclude_graphics_options = πTemp001
							// line 2386: align_codes = {
							πF.SetLineno(2386)
							πTemp008 = πg.NewDict()
							πTemp001 = πg.NewTuple2(ß.ToObject(), ß.ToObject()).ToObject()
							if πE = πTemp008.SetItem(πF, ßbottom.ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(πg.NewStr("\\raisebox{-0.5\\height}{").ToObject(), πg.NewStr("}").ToObject()).ToObject()
							if πE = πTemp008.SetItem(πF, ßmiddle.ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(πg.NewStr("\\raisebox{-\\height}{").ToObject(), πg.NewStr("}").ToObject()).ToObject()
							if πE = πTemp008.SetItem(πF, ßtop.ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(πg.NewStr("\\noindent\\makebox[\\linewidth][c]{").ToObject(), πg.NewStr("}").ToObject()).ToObject()
							if πE = πTemp008.SetItem(πF, ßcenter.ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(πg.NewStr("\\noindent{").ToObject(), πg.NewStr("\\hfill}").ToObject()).ToObject()
							if πE = πTemp008.SetItem(πF, ßleft.ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πg.NewTuple2(πg.NewStr("\\noindent{\\hfill").ToObject(), πg.NewStr("}").ToObject()).ToObject()
							if πE = πTemp008.SetItem(πF, ßright.ToObject(), πTemp001); πE != nil {
								continue
							}
							πTemp001 = πTemp008.ToObject()
							µalign_codes = πTemp001
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Contains(πF, µattrs, ßalign.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label5
							}
							goto Label6
							// line 2395: if 'align' in attrs:
							πF.SetLineno(2395)
						Label5:
							// line 2397: try:
							πF.SetLineno(2397)
							πF.PushCheckpoint(8)
							// line 2398: align_code = align_codes[attrs['align']]
							πF.SetLineno(2398)
							πTemp002 = ßalign.ToObject()
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µattrs, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.CheckLocal(πF, µalign_codes, "align_codes"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µalign_codes, πTemp001); πE != nil {
								continue
							}
							µalign_code = πTemp002
							// line 2399: pre.append(align_code[0])
							πF.SetLineno(2399)
							πTemp005 = πF.MakeArgs(1)
							πTemp001 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µalign_code, "align_code"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µalign_code, πTemp001); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µpre, "pre"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µpre, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2400: post.append(align_code[1])
							πF.SetLineno(2400)
							πTemp005 = πF.MakeArgs(1)
							πTemp001 = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µalign_code, "align_code"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µalign_code, πTemp001); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µpost, "post"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µpost, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πF.PopCheckpoint()
							goto Label7
						Label8:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp009, πTemp010 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßKeyError); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsInstance(πF, πTemp009.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label9
							}
							πE = πF.Raise(πTemp009.ToObject(), nil, πTemp010.ToObject())
							continue
							// line 2401: except KeyError:
							πF.SetLineno(2401)
						Label9:
							// line 2402: pass                    # TODO: warn?
							πF.SetLineno(2402)
							πF.RestoreExc(nil, nil)
							goto Label7
						Label7:
							goto Label6
						Label6:
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Contains(πF, µattrs, ßheight.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label10
							}
							goto Label11
							// line 2403: if 'height' in attrs:
							πF.SetLineno(2403)
						Label10:
							// line 2404: include_graphics_options.append('height=%s' %
							πF.SetLineno(2404)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(1)
							πTemp002 = ßheight.ToObject()
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µattrs, πTemp002); πE != nil {
								continue
							}
							πTemp006[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßto_latex_length, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("height=%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µinclude_graphics_options, "include_graphics_options"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µinclude_graphics_options, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label11
						Label11:
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Contains(πF, µattrs, ßscale.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label12
							}
							goto Label13
							// line 2406: if 'scale' in attrs:
							πF.SetLineno(2406)
						Label12:
							// line 2407: include_graphics_options.append('scale=%f' %
							πF.SetLineno(2407)
							πTemp005 = πF.MakeArgs(1)
							πTemp003 = ßscale.ToObject()
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µattrs, πTemp003); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Div(πF, πTemp004, πg.NewFloat(100.0).ToObject()); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("scale=%f").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µinclude_graphics_options, "include_graphics_options"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µinclude_graphics_options, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label13
						Label13:
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.Contains(πF, µattrs, ßwidth.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label14
							}
							goto Label15
							// line 2409: if 'width' in attrs:
							πF.SetLineno(2409)
						Label14:
							// line 2410: include_graphics_options.append('width=%s' %
							πF.SetLineno(2410)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(1)
							πTemp002 = ßwidth.ToObject()
							if πE = πg.CheckLocal(πF, µattrs, "attrs"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µattrs, πTemp002); πE != nil {
								continue
							}
							πTemp006[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßto_latex_length, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("width=%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µinclude_graphics_options, "include_graphics_options"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µinclude_graphics_options, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label15
						Label15:
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßis_inline, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp002 = πTemp004
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label16
							}
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp003
							if πTemp004, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetAttr(πF, πTemp004, ßfigure, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp012, πE = πg.GetAttr(πF, πTemp004, ßcompound, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(πTemp011, πTemp012).ToObject()
							πTemp005[1] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp002 = πTemp004
						Label16:
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label17
							}
							goto Label18
							// line 2412: if not (self.is_inline(node) or
							πF.SetLineno(2412)
						Label17:
							// line 2414: pre.append('\n')
							πF.SetLineno(2414)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µpre, "pre"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µpre, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label18
						Label18:
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßis_inline, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp002 = πTemp004
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label19
							}
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßfigure, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp004
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp002 = πTemp004
						Label19:
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp007).ToObject()
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label20
							}
							goto Label21
							// line 2415: if not (self.is_inline(node) or
							πF.SetLineno(2415)
						Label20:
							// line 2417: post.append('\n')
							πF.SetLineno(2417)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µpost, "post"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µpost, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label21
						Label21:
							// line 2418: pre.reverse()
							πF.SetLineno(2418)
							if πE = πg.CheckLocal(πF, µpre, "pre"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µpre, ßreverse, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2419: self.out.extend(pre)
							πF.SetLineno(2419)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpre, "pre"); πE != nil {
								continue
							}
							πTemp005[0] = µpre
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßextend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2420: options = ''
							πF.SetLineno(2420)
							µoptions = ß.ToObject()
							if πE = πg.CheckLocal(πF, µinclude_graphics_options, "include_graphics_options"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, µinclude_graphics_options); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label22
							}
							goto Label23
							// line 2421: if include_graphics_options:
							πF.SetLineno(2421)
						Label22:
							// line 2422: options = '[%s]' % (','.join(include_graphics_options))
							πF.SetLineno(2422)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µinclude_graphics_options, "include_graphics_options"); πE != nil {
								continue
							}
							πTemp005[0] = µinclude_graphics_options
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr(",").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("[%s]").ToObject(), πTemp003); πE != nil {
								continue
							}
							µoptions = πTemp001
							goto Label23
						Label23:
							// line 2423: self.out.append('\\includegraphics%s{%s}' % (options, imagepath))
							πF.SetLineno(2423)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µoptions, "options"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µimagepath, "imagepath"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(µoptions, µimagepath).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\includegraphics%s{%s}").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2424: self.out.extend(post)
							πF.SetLineno(2424)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µpost, "post"); πE != nil {
								continue
							}
							πTemp005[0] = µpost
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßextend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_image.ToObject(), πTemp115); πE != nil {
						continue
					}
					// line 2426: def depart_image(self, node):
					πF.SetLineno(2426)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp116 = πg.NewFunction(πg.NewCode("depart_image", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2427: if node.get('ids'):
							πF.SetLineno(2427)
						Label1:
							// line 2428: self.out += self.ids_to_labels(node) + ['\n']
							πF.SetLineno(2428)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = make([]*πg.Object, 1)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							πTemp005 = πg.NewList(πTemp001...).ToObject()
							if πTemp003, πE = πg.Add(πF, πTemp006, πTemp005); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IAdd(πF, πTemp002, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp005); πE != nil {
								continue
							}
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_image.ToObject(), πTemp116); πE != nil {
						continue
					}
					// line 2430: def visit_inline(self, node): # <span>, i.e. custom roles
					πF.SetLineno(2430)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp117 = πg.NewFunction(πg.NewCode("visit_inline", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µcls *πg.Object = πg.UnboundLocal
						_ = µcls
						var µlanguage *πg.Object = πg.UnboundLocal
						_ = µlanguage
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, πTemp003); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp004 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp004 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp002, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp005 = !isStop
							} else {
								πTemp005 = true
								µcls = πTemp002
							}
							if πE != nil || !πTemp005 {
								continue
							}
							πF.PushCheckpoint(1)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewStr("language-").ToObject()
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µcls, ßstartswith, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							goto Label5
							// line 2432: if cls.startswith('language-'):
							πF.SetLineno(2432)
						Label4:
							// line 2433: language = self.babel.language_name(cls[9:])
							πF.SetLineno(2433)
							πTemp006 = πF.MakeArgs(1)
							if πTemp002, πE = πg.SliceType.Call(πF, πg.Args{πg.NewInt(9).ToObject(), πg.None, πg.None}, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µcls, πTemp002); πE != nil {
								continue
							}
							πTemp006[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßlanguage_name, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							µlanguage = πTemp002
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, µlanguage); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label7
							}
							goto Label8
							// line 2434: if language:
							πF.SetLineno(2434)
						Label7:
							// line 2435: self.babel.otherlanguages[language] = True
							πF.SetLineno(2435)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßbabel, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßotherlanguages, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							πTemp007 = µlanguage
							if πE = πg.SetItem(πF, πTemp008, πTemp007, πTemp003); πE != nil {
								continue
							}
							// line 2436: self.out.append(r'\foreignlanguage{%s}{' % language)
							πF.SetLineno(2436)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µlanguage, "language"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\foreignlanguage{%s}{").ToObject(), µlanguage); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label8
						Label8:
							goto Label6
						Label5:
							// line 2438: self.fallbacks['inline'] = PreambleCmds.inline
							πF.SetLineno(2438)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßinline, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp008 = ßinline.ToObject()
							if πE = πg.SetItem(πF, πTemp007, πTemp008, πTemp002); πE != nil {
								continue
							}
							// line 2439: self.out.append(r'\DUrole{%s}{' % cls)
							πF.SetLineno(2439)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µcls, "cls"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\DUrole{%s}{").ToObject(), µcls); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label6
						Label6:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_inline.ToObject(), πTemp117); πE != nil {
						continue
					}
					// line 2441: def depart_inline(self, node):
					πF.SetLineno(2441)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp118 = πg.NewFunction(πg.NewCode("depart_inline", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2442: self.out.append('}' * len(node['classes']))
							πF.SetLineno(2442)
							πTemp001 = πF.MakeArgs(1)
							πTemp003 = πF.MakeArgs(1)
							πTemp004 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							πTemp003[0] = πTemp005
							if πTemp004, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp002, πE = πg.Mul(πF, πg.NewStr("}").ToObject(), πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_inline.ToObject(), πTemp118); πE != nil {
						continue
					}
					// line 2444: def visit_legend(self, node):
					πF.SetLineno(2444)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp119 = πg.NewFunction(πg.NewCode("visit_legend", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2445: self.fallbacks['legend'] = PreambleCmds.legend
							πF.SetLineno(2445)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßlegend, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßlegend.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2446: self.out.append('\\begin{DUlegend}')
							πF.SetLineno(2446)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\begin{DUlegend}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_legend.ToObject(), πTemp119); πE != nil {
						continue
					}
					// line 2448: def depart_legend(self, node):
					πF.SetLineno(2448)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp120 = πg.NewFunction(πg.NewCode("depart_legend", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2449: self.out.append('\\end{DUlegend}\n')
							πF.SetLineno(2449)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\end{DUlegend}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_legend.ToObject(), πTemp120); πE != nil {
						continue
					}
					// line 2451: def visit_line(self, node):
					πF.SetLineno(2451)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp121 = πg.NewFunction(πg.NewCode("visit_line", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2452: self.out.append(r'\item[] ')
							πF.SetLineno(2452)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\item[] ").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_line.ToObject(), πTemp121); πE != nil {
						continue
					}
					// line 2454: def depart_line(self, node):
					πF.SetLineno(2454)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp122 = πg.NewFunction(πg.NewCode("depart_line", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2455: self.out.append('\n')
							πF.SetLineno(2455)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_line.ToObject(), πTemp122); πE != nil {
						continue
					}
					// line 2457: def visit_line_block(self, node):
					πF.SetLineno(2457)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp123 = πg.NewFunction(πg.NewCode("visit_line_block", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2458: self.fallbacks['_providelength'] = PreambleCmds.providelength
							πF.SetLineno(2458)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßprovidelength, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ß_providelength.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2459: self.fallbacks['lineblock'] = PreambleCmds.lineblock
							πF.SetLineno(2459)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßlineblock, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßlineblock.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2460: self.set_align_from_classes(node)
							πF.SetLineno(2460)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßset_align_from_classes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßline_block, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 2461: if isinstance(node.parent, nodes.line_block):
							πF.SetLineno(2461)
						Label1:
							// line 2462: self.out.append('\\item[]\n'
							πF.SetLineno(2462)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\item[]\n\\begin{DUlineblock}{\\DUlineblockindent}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label2:
							// line 2466: self.duclass_open(node)
							πF.SetLineno(2466)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2467: self.out.append('\\begin{DUlineblock}{0em}\n')
							πF.SetLineno(2467)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\begin{DUlineblock}{0em}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2468: self.insert_align_declaration(node)
							πF.SetLineno(2468)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßinsert_align_declaration, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_line_block.ToObject(), πTemp123); πE != nil {
						continue
					}
					// line 2470: def depart_line_block(self, node):
					πF.SetLineno(2470)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp124 = πg.NewFunction(πg.NewCode("depart_line_block", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2471: self.out.append('\\end{DUlineblock}\n')
							πF.SetLineno(2471)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\end{DUlineblock}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2472: self.duclass_close(node)
							πF.SetLineno(2472)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_line_block.ToObject(), πTemp124); πE != nil {
						continue
					}
					// line 2474: def visit_list_item(self, node):
					πF.SetLineno(2474)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp125 = πg.NewFunction(πg.NewCode("visit_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2475: self.out.append('\n\\item ')
							πF.SetLineno(2475)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n\\item ").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_list_item.ToObject(), πTemp125); πE != nil {
						continue
					}
					// line 2477: def depart_list_item(self, node):
					πF.SetLineno(2477)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp126 = πg.NewFunction(πg.NewCode("depart_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2478: pass
							πF.SetLineno(2478)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_list_item.ToObject(), πTemp126); πE != nil {
						continue
					}
					// line 2480: def visit_literal(self, node):
					πF.SetLineno(2480)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp127 = πg.NewFunction(πg.NewCode("visit_literal", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2481: self.literal = True
							πF.SetLineno(2481)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßliteral, πTemp002); πE != nil {
								continue
							}
							πTemp004 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp005, ßcode.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp002
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp003 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp004, ßsyntax_highlight, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, πTemp005, ßnone.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
						Label1:
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label2
							}
							goto Label3
							// line 2482: if 'code' in node['classes'] and (
							πF.SetLineno(2482)
						Label2:
							// line 2484: self.requirements['color'] = PreambleCmds.color
							πF.SetLineno(2484)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcolor, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp005 = ßcolor.ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp001); πE != nil {
								continue
							}
							// line 2485: self.fallbacks['code'] = PreambleCmds.highlight_rules
							πF.SetLineno(2485)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßhighlight_rules, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp005 = ßcode.ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp001); πE != nil {
								continue
							}
							goto Label3
						Label3:
							// line 2486: self.out.append('\\texttt{')
							πF.SetLineno(2486)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("\\texttt{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label4
							}
							goto Label5
							// line 2487: if node['classes']:
							πF.SetLineno(2487)
						Label4:
							// line 2488: self.visit_inline(node)
							πF.SetLineno(2488)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp007[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label5
						Label5:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_literal.ToObject(), πTemp127); πE != nil {
						continue
					}
					// line 2490: def depart_literal(self, node):
					πF.SetLineno(2490)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp128 = πg.NewFunction(πg.NewCode("depart_literal", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2491: self.literal = False
							πF.SetLineno(2491)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßliteral, πTemp002); πE != nil {
								continue
							}
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2492: if node['classes']:
							πF.SetLineno(2492)
						Label1:
							// line 2493: self.depart_inline(node)
							πF.SetLineno(2493)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							// line 2494: self.out.append('}')
							πF.SetLineno(2494)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_literal.ToObject(), πTemp128); πE != nil {
						continue
					}
					// line 2511: def is_plaintext(self, node):
					πF.SetLineno(2511)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp129 = πg.NewFunction(πg.NewCode("is_plaintext", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2512: """Check whether a node can be typeset verbatim"""
							πF.SetLineno(2512)
							// line 2513: return (len(node) == 1) and isinstance(node[0], nodes.Text)
							πF.SetLineno(2513)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πTemp005, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp003, πE = πg.Eq(πF, πTemp006, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp002 {
								goto Label1
							}
							πTemp004 = πF.MakeArgs(2)
							πTemp003 = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							πTemp004[0] = πTemp005
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßText, nil); πE != nil {
								continue
							}
							πTemp004[1] = πTemp005
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001 = πTemp005
						Label1:
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßis_plaintext.ToObject(), πTemp129); πE != nil {
						continue
					}
					// line 2512: """Check whether a node can be typeset verbatim"""
					πF.SetLineno(2512)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp130}, πg.NewStr("Check whether a node can be typeset verbatim").ToObject()); πE != nil {
						continue
					}
					if πTemp131, πE = πg.ResolveClass(πF, πClass, nil, ßis_plaintext); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp131, ß__doc__, πTemp130); πE != nil {
						continue
					}
					// line 2515: def visit_literal_block(self, node):
					πF.SetLineno(2515)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp130 = πg.NewFunction(πg.NewCode("visit_literal_block", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µpackages *πg.Object = πg.UnboundLocal
						_ = µpackages
						var µliteral_env *πg.Object = πg.UnboundLocal
						_ = µliteral_env
						var µ_plaintext *πg.Object = πg.UnboundLocal
						_ = µ_plaintext
						var µ_in_table *πg.Object = πg.UnboundLocal
						_ = µ_in_table
						var µ_autowidth_table *πg.Object = πg.UnboundLocal
						_ = µ_autowidth_table
						var µ_use_env *πg.Object = πg.UnboundLocal
						_ = µ_use_env
						var µ_use_listings *πg.Object = πg.UnboundLocal
						_ = µ_use_listings
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 bool
						_ = πTemp010
						var πTemp011 []*πg.Object
						_ = πTemp011
						var πTemp012 []πg.Param
						_ = πTemp012
						var πTemp013 bool
						_ = πTemp013
						var πTemp014 *πg.BaseException
						_ = πTemp014
						var πTemp015 *πg.Traceback
						_ = πTemp015
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 23:
								goto Label23
							default:
								panic("unexpected function state")
							}
							// line 2516: """Render a literal block.
							πF.SetLineno(2516)
							// line 2520: packages = {'lstlisting':  r'\usepackage{listings}' '\n'
							πF.SetLineno(2520)
							πTemp001 = πg.NewDict()
							if πE = πTemp001.SetItem(πF, ßlstlisting.ToObject(), πg.NewStr("\\usepackage{listings}\n\\lstset{xleftmargin=\\leftmargin}").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßlisting.ToObject(), πg.NewStr("\\usepackage{moreverb}").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßVerbatim.ToObject(), πg.NewStr("\\usepackage{fancyvrb}").ToObject()); πE != nil {
								continue
							}
							if πE = πTemp001.SetItem(πF, ßverbatimtab.ToObject(), πg.NewStr("\\usepackage{moreverb}").ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp001.ToObject()
							µpackages = πTemp002
							// line 2526: literal_env = self.literal_block_env
							πF.SetLineno(2526)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßliteral_block_env, nil); πE != nil {
								continue
							}
							µliteral_env = πTemp002
							// line 2529: _plaintext = self.is_plaintext(node)
							πF.SetLineno(2529)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßis_plaintext, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µ_plaintext = πTemp004
							// line 2530: _in_table = self.active_table.is_open()
							πF.SetLineno(2530)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßis_open, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							µ_in_table = πTemp002
							// line 2533: _autowidth_table = _in_table and self.active_table.colwidths_auto
							πF.SetLineno(2533)
							if πE = πg.CheckLocal(πF, µ_in_table, "_in_table"); πE != nil {
								continue
							}
							πTemp002 = µ_in_table
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp004, ßcolwidths_auto, nil); πE != nil {
								continue
							}
							πTemp002 = πTemp006
						Label1:
							µ_autowidth_table = πTemp002
							// line 2534: _use_env = _plaintext and not isinstance(node.parent,
							πF.SetLineno(2534)
							if πE = πg.CheckLocal(πF, µ_plaintext, "_plaintext"); πE != nil {
								continue
							}
							πTemp002 = µ_plaintext
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label2
							}
							πTemp003 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp006
							if πTemp007, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßfootnote, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetAttr(πF, πTemp007, ßadmonition, nil); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple2(πTemp008, πTemp009).ToObject()
							πTemp003[1] = πTemp006
							if πTemp006, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp010, πE = πg.IsTrue(πF, πTemp007); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(!πTemp010).ToObject()
							πTemp002 = πTemp004
						Label2:
							µ_use_env = πTemp002
							// line 2536: _use_listings = (literal_env == 'lstlisting') and _use_env
							πF.SetLineno(2536)
							if πE = πg.CheckLocal(πF, µliteral_env, "literal_env"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Eq(πF, µliteral_env, ßlstlisting.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp004
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label3
							}
							if πE = πg.CheckLocal(πF, µ_use_env, "_use_env"); πE != nil {
								continue
							}
							πTemp002 = µ_use_env
						Label3:
							µ_use_listings = πTemp002
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp005, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							goto Label5
							// line 2539: if node.get('ids'):
							πF.SetLineno(2539)
						Label4:
							// line 2540: self.out += ['\n'] + self.ids_to_labels(node)
							πF.SetLineno(2540)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp003 = make([]*πg.Object, 1)
							πTemp003[0] = πg.NewStr("\n").ToObject()
							πTemp006 = πg.NewList(πTemp003...).ToObject()
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.Add(πF, πTemp006, πTemp008); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IAdd(πF, πTemp002, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp006); πE != nil {
								continue
							}
							goto Label5
						Label5:
							// line 2541: self.duclass_open(node)
							πF.SetLineno(2541)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.CheckLocal(πF, µ_plaintext, "_plaintext"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.IsTrue(πF, µ_plaintext); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(!πTemp010).ToObject()
							πTemp002 = πTemp004
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label6
							}
							πTemp006 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, µnode, πTemp006); πE != nil {
								continue
							}
							if πTemp010, πE = πg.Contains(πF, πTemp007, ßcode.ToObject()); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(πTemp010).ToObject()
							πTemp002 = πTemp004
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label6
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßsyntax_highlight, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.NE(πF, πTemp007, ßnone.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp004
						Label6:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label7
							}
							goto Label8
							// line 2543: if (not _plaintext and 'code' in node['classes']
							πF.SetLineno(2543)
						Label7:
							// line 2545: self.requirements['color'] = PreambleCmds.color
							πF.SetLineno(2545)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßcolor, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp007 = ßcolor.ToObject()
							if πE = πg.SetItem(πF, πTemp006, πTemp007, πTemp002); πE != nil {
								continue
							}
							// line 2546: self.fallbacks['code'] = PreambleCmds.highlight_rules
							πF.SetLineno(2546)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßhighlight_rules, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp007 = ßcode.ToObject()
							if πE = πg.SetItem(πF, πTemp006, πTemp007, πTemp002); πE != nil {
								continue
							}
							goto Label8
						Label8:
							if πE = πg.CheckLocal(πF, µ_in_table, "_in_table"); πE != nil {
								continue
							}
							πTemp002 = µ_in_table
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label9
							}
							if πE = πg.CheckLocal(πF, µ_use_env, "_use_env"); πE != nil {
								continue
							}
							πTemp002 = µ_use_env
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label9
							}
							if πE = πg.CheckLocal(πF, µ_autowidth_table, "_autowidth_table"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.IsTrue(πF, µ_autowidth_table); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(!πTemp010).ToObject()
							πTemp002 = πTemp004
						Label9:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label10
							}
							if πE = πg.CheckLocal(πF, µ_in_table, "_in_table"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.IsTrue(πF, µ_in_table); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(!πTemp010).ToObject()
							πTemp002 = πTemp004
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label11
							}
							if πE = πg.CheckLocal(πF, µ_use_listings, "_use_listings"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.IsTrue(πF, µ_use_listings); πE != nil {
								continue
							}
							πTemp004 = πg.GetBool(!πTemp010).ToObject()
							πTemp002 = πTemp004
						Label11:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label12
							}
							goto Label13
							// line 2548: if _in_table and _use_env and not _autowidth_table:
							πF.SetLineno(2548)
						Label10:
							// line 2551: self.fallbacks['ttem'] = '\n'.join(['',
							πF.SetLineno(2551)
							πTemp003 = πF.MakeArgs(1)
							πTemp011 = make([]*πg.Object, 4)
							πTemp011[0] = ß.ToObject()
							πTemp011[1] = πg.NewStr("% character width in monospaced font").ToObject()
							πTemp011[2] = πg.NewStr("\\newlength{\\ttemwidth}").ToObject()
							πTemp011[3] = πg.NewStr("\\settowidth{\\ttemwidth}{\\ttfamily M}").ToObject()
							πTemp002 = πg.NewList(πTemp011...).ToObject()
							πTemp003[0] = πTemp002
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp007 = ßttem.ToObject()
							if πE = πg.SetItem(πF, πTemp006, πTemp007, πTemp002); πE != nil {
								continue
							}
							// line 2555: self.out.append('\\begin{minipage}{%d\\ttemwidth}\n' %
							πF.SetLineno(2555)
							πTemp003 = πF.MakeArgs(1)
							πTemp011 = πF.MakeArgs(1)
							πTemp012 = make([]πg.Param, 0)
							πTemp004 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µline *πg.Object = πg.UnboundLocal
								_ = µline
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []*πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										πTemp002 = πF.MakeArgs(1)
										πTemp002[0] = πg.NewStr("\n").ToObject()
										if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
											continue
										}
										if πTemp004, πE = πTemp003.Call(πF, nil, nil); πE != nil {
											continue
										}
										if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßsplit, nil); πE != nil {
											continue
										}
										if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp002)
										if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp005 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp005 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp006 = !isStop
										} else {
											πTemp006 = true
											µline = πTemp003
										}
										if πE != nil || !πTemp006 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 2556: (max(len(line) for line in node.astext().split('\n'))))
										πF.SetLineno(2556)
										πTemp002 = πF.MakeArgs(1)
										if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
											continue
										}
										πTemp002[0] = µline
										if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
											continue
										}
										if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp002)
										πF.PushCheckpoint(4)
										return πTemp004, nil
									Label4:
										πTemp003 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp006, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp011[0] = πTemp006
							if πTemp006, πE = πg.ResolveGlobal(πF, ßmax); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp006.Call(πF, πTemp011, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp011)
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\begin{minipage}{%d\\ttemwidth}\n").ToObject(), πTemp007); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2557: self.context.append('\n\\end{minipage}\n')
							πF.SetLineno(2557)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\n\\end{minipage}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label14
							// line 2558: elif not _in_table and not _use_listings:
							πF.SetLineno(2558)
						Label12:
							// line 2560: self.out.append('\\begin{quote}\n')
							πF.SetLineno(2560)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\\begin{quote}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2561: self.context.append('\n\\end{quote}\n')
							πF.SetLineno(2561)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\n\\end{quote}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label14
						Label13:
							// line 2563: self.context.append('\n')
							πF.SetLineno(2563)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label14
						Label14:
							if πE = πg.CheckLocal(πF, µliteral_env, "literal_env"); πE != nil {
								continue
							}
							πTemp002 = µliteral_env
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label15
							}
							if πE = πg.CheckLocal(πF, µ_use_env, "_use_env"); πE != nil {
								continue
							}
							πTemp002 = µ_use_env
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label15
							}
							if πE = πg.CheckLocal(πF, µ_autowidth_table, "_autowidth_table"); πE != nil {
								continue
							}
							if πTemp013, πE = πg.IsTrue(πF, µ_autowidth_table); πE != nil {
								continue
							}
							πTemp007 = πg.GetBool(!πTemp013).ToObject()
							πTemp006 = πTemp007
							if πTemp010, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							if πTemp010 {
								goto Label16
							}
							if πE = πg.CheckLocal(πF, µ_use_listings, "_use_listings"); πE != nil {
								continue
							}
							πTemp006 = µ_use_listings
						Label16:
							πTemp002 = πTemp006
						Label15:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label17
							}
							if πE = πg.CheckLocal(πF, µ_use_env, "_use_env"); πE != nil {
								continue
							}
							πTemp002 = µ_use_env
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label18
							}
							if πE = πg.CheckLocal(πF, µ_autowidth_table, "_autowidth_table"); πE != nil {
								continue
							}
							if πTemp010, πE = πg.IsTrue(πF, µ_autowidth_table); πE != nil {
								continue
							}
							πTemp006 = πg.GetBool(!πTemp010).ToObject()
							πTemp002 = πTemp006
						Label18:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label19
							}
							goto Label20
							// line 2567: if literal_env and _use_env and (not _autowidth_table
							πF.SetLineno(2567)
						Label17:
							// line 2569: try:
							πF.SetLineno(2569)
							πF.PushCheckpoint(23)
							// line 2570: self.requirements['literal_block'] = packages[literal_env]
							πF.SetLineno(2570)
							if πE = πg.CheckLocal(πF, µliteral_env, "literal_env"); πE != nil {
								continue
							}
							πTemp002 = µliteral_env
							if πE = πg.CheckLocal(πF, µpackages, "packages"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, µpackages, πTemp002); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp008 = ßliteral_block.ToObject()
							if πE = πg.SetItem(πF, πTemp007, πTemp008, πTemp002); πE != nil {
								continue
							}
							πF.PopCheckpoint()
							goto Label22
						Label23:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp014, πTemp015 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßKeyError); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsInstance(πF, πTemp014.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label24
							}
							πE = πF.Raise(πTemp014.ToObject(), nil, πTemp015.ToObject())
							continue
							// line 2571: except KeyError:
							πF.SetLineno(2571)
						Label24:
							// line 2572: pass
							πF.SetLineno(2572)
							πF.RestoreExc(nil, nil)
							goto Label22
						Label22:
							// line 2573: self.verbatim = True
							πF.SetLineno(2573)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp006}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßverbatim, πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µ_in_table, "_in_table"); πE != nil {
								continue
							}
							πTemp002 = µ_in_table
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label25
							}
							if πE = πg.CheckLocal(πF, µ_use_listings, "_use_listings"); πE != nil {
								continue
							}
							πTemp002 = µ_use_listings
						Label25:
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label26
							}
							goto Label27
							// line 2574: if _in_table and _use_listings:
							πF.SetLineno(2574)
						Label26:
							// line 2575: self.out.append('\\lstset{xleftmargin=0pt}\n')
							πF.SetLineno(2575)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\\lstset{xleftmargin=0pt}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label27
						Label27:
							// line 2576: self.out.append('\\begin{%s}%s\n' %
							πF.SetLineno(2576)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µliteral_env, "literal_env"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßliteral_block_options, nil); πE != nil {
								continue
							}
							πTemp006 = πg.NewTuple2(µliteral_env, πTemp007).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\begin{%s}%s\n").ToObject(), πTemp006); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2578: self.context.append('\n\\end{%s}' % literal_env)
							πF.SetLineno(2578)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µliteral_env, "literal_env"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\n\\end{%s}").ToObject(), µliteral_env); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label21
							// line 2579: elif _use_env and not _autowidth_table:
							πF.SetLineno(2579)
						Label19:
							// line 2580: self.alltt = True
							πF.SetLineno(2580)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp006}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßalltt, πTemp006); πE != nil {
								continue
							}
							// line 2581: self.requirements['alltt'] = r'\usepackage{alltt}'
							πF.SetLineno(2581)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πg.NewStr("\\usepackage{alltt}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp007 = ßalltt.ToObject()
							if πE = πg.SetItem(πF, πTemp006, πTemp007, πTemp002); πE != nil {
								continue
							}
							// line 2582: self.out.append('\\begin{alltt}\n')
							πF.SetLineno(2582)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\\begin{alltt}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2583: self.context.append('\n\\end{alltt}')
							πF.SetLineno(2583)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\n\\end{alltt}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label21
						Label20:
							// line 2585: self.literal = True
							πF.SetLineno(2585)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp006}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßliteral, πTemp006); πE != nil {
								continue
							}
							// line 2586: self.insert_newline = True
							πF.SetLineno(2586)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp006}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinsert_newline, πTemp006); πE != nil {
								continue
							}
							// line 2587: self.insert_non_breaking_blanks = True
							πF.SetLineno(2587)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp006}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinsert_non_breaking_blanks, πTemp006); πE != nil {
								continue
							}
							// line 2591: self.out.append('\\ttfamily\\raggedright\n')
							πF.SetLineno(2591)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\\ttfamily\\raggedright\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2592: self.context.append('')
							πF.SetLineno(2592)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp006.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label21
						Label21:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_literal_block.ToObject(), πTemp130); πE != nil {
						continue
					}
					// line 2516: """Render a literal block.
					πF.SetLineno(2516)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp131}, πg.NewStr("Render a literal block.\n\n        Corresponding rST elements: literal block, parsed-literal, code.\n        ").ToObject()); πE != nil {
						continue
					}
					if πTemp132, πE = πg.ResolveClass(πF, πClass, nil, ßvisit_literal_block); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp132, ß__doc__, πTemp131); πE != nil {
						continue
					}
					// line 2594: def depart_literal_block(self, node):
					πF.SetLineno(2594)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp131 = πg.NewFunction(πg.NewCode("depart_literal_block", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2595: self.insert_non_breaking_blanks = False
							πF.SetLineno(2595)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinsert_non_breaking_blanks, πTemp002); πE != nil {
								continue
							}
							// line 2596: self.insert_newline = False
							πF.SetLineno(2596)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßinsert_newline, πTemp002); πE != nil {
								continue
							}
							// line 2597: self.literal = False
							πF.SetLineno(2597)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßliteral, πTemp002); πE != nil {
								continue
							}
							// line 2598: self.verbatim = False
							πF.SetLineno(2598)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßverbatim, πTemp002); πE != nil {
								continue
							}
							// line 2599: self.alltt = False
							πF.SetLineno(2599)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßalltt, πTemp002); πE != nil {
								continue
							}
							// line 2600: self.out.append(self.context.pop())
							πF.SetLineno(2600)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2601: self.out.append(self.context.pop())
							πF.SetLineno(2601)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2602: self.duclass_close(node)
							πF.SetLineno(2602)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_literal_block.ToObject(), πTemp131); πE != nil {
						continue
					}
					// line 2620: def visit_math(self, node, math_env='$'):
					πF.SetLineno(2620)
					πTemp002 = make([]πg.Param, 3)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp002[2] = πg.Param{Name: "math_env", Def: πg.NewStr("$").ToObject()}
					πTemp132 = πg.NewFunction(πg.NewCode("visit_math", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µmath_env *πg.Object = πArgs[2]
						_ = µmath_env
						var µmath_code *πg.Object = πg.UnboundLocal
						_ = µmath_code
						var µwrapper *πg.Object = πg.UnboundLocal
						_ = µwrapper
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2621: """math role"""
							πF.SetLineno(2621)
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2622: if node['classes']:
							πF.SetLineno(2622)
						Label1:
							// line 2623: self.visit_inline(node)
							πF.SetLineno(2623)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							// line 2624: self.requirements['amsmath'] = r'\usepackage{amsmath}'
							πF.SetLineno(2624)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\\usepackage{amsmath}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp005 = ßamsmath.ToObject()
							if πE = πg.SetItem(πF, πTemp002, πTemp005, πTemp001); πE != nil {
								continue
							}
							// line 2625: math_code = node.astext().translate(unichar2tex.uni2tex_table)
							πF.SetLineno(2625)
							πTemp004 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßunichar2tex); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßuni2tex_table, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp002
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßtranslate, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µmath_code = πTemp002
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 2626: if node.get('ids'):
							πF.SetLineno(2626)
						Label3:
							// line 2627: math_code = '\n'.join([math_code] + self.ids_to_labels(node))
							πF.SetLineno(2627)
							πTemp004 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 1)
							if πE = πg.CheckLocal(πF, µmath_code, "math_code"); πE != nil {
								continue
							}
							πTemp006[0] = µmath_code
							πTemp002 = πg.NewList(πTemp006...).ToObject()
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp006[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp005.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.Add(πF, πTemp002, πTemp007); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr("\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µmath_code = πTemp002
							goto Label4
						Label4:
							if πE = πg.CheckLocal(πF, µmath_env, "math_env"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, µmath_env, πg.NewStr("$").ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							goto Label6
							// line 2628: if math_env == '$':
							πF.SetLineno(2628)
						Label5:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßalltt, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label8
							}
							goto Label9
							// line 2629: if self.alltt:
							πF.SetLineno(2629)
						Label8:
							// line 2630: wrapper = u'\\(%s\\)'
							πF.SetLineno(2630)
							µwrapper = πg.NewUnicode("\\(%s\\)").ToObject()
							goto Label10
						Label9:
							// line 2632: wrapper = u'$%s$'
							πF.SetLineno(2632)
							µwrapper = πg.NewUnicode("$%s$").ToObject()
							goto Label10
						Label10:
							goto Label7
						Label6:
							// line 2634: wrapper = u'\n'.join(['%%',
							πF.SetLineno(2634)
							πTemp004 = πF.MakeArgs(1)
							πTemp006 = make([]*πg.Object, 4)
							πTemp006[0] = πg.NewStr("%%").ToObject()
							if πE = πg.CheckLocal(πF, µmath_env, "math_env"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\begin{%s}").ToObject(), µmath_env); πE != nil {
								continue
							}
							πTemp006[1] = πTemp001
							πTemp006[2] = πg.NewStr("%s").ToObject()
							if πE = πg.CheckLocal(πF, µmath_env, "math_env"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\end{%s}").ToObject(), µmath_env); πE != nil {
								continue
							}
							πTemp006[3] = πTemp001
							πTemp001 = πg.NewList(πTemp006...).ToObject()
							πTemp004[0] = πTemp001
							if πTemp001, πE = πg.GetAttr(πF, πg.NewUnicode("\n").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							µwrapper = πTemp002
							goto Label7
						Label7:
							// line 2638: self.out.append(wrapper % math_code)
							πF.SetLineno(2638)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µwrapper, "wrapper"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmath_code, "math_code"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, µwrapper, µmath_code); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label11
							}
							goto Label12
							// line 2639: if node['classes']:
							πF.SetLineno(2639)
						Label11:
							// line 2640: self.depart_inline(node)
							πF.SetLineno(2640)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label12
						Label12:
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßSkipNode, nil); πE != nil {
								continue
							}
							// line 2642: raise nodes.SkipNode
							πF.SetLineno(2642)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_math.ToObject(), πTemp132); πE != nil {
						continue
					}
					// line 2621: """math role"""
					πF.SetLineno(2621)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp133}, πg.NewStr("math role").ToObject()); πE != nil {
						continue
					}
					if πTemp134, πE = πg.ResolveClass(πF, πClass, nil, ßvisit_math); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp134, ß__doc__, πTemp133); πE != nil {
						continue
					}
					// line 2644: def depart_math(self, node):
					πF.SetLineno(2644)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp133 = πg.NewFunction(πg.NewCode("depart_math", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2645: pass # never reached
							πF.SetLineno(2645)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_math.ToObject(), πTemp133); πE != nil {
						continue
					}
					// line 2647: def visit_math_block(self, node):
					πF.SetLineno(2647)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp134 = πg.NewFunction(πg.NewCode("visit_math_block", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µmath_env *πg.Object = πg.UnboundLocal
						_ = µmath_env
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 πg.KWArgs
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2648: math_env = pick_math_environment(node.astext())
							πF.SetLineno(2648)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßpick_math_environment); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmath_env = πTemp003
							// line 2649: self.visit_math(node, math_env=math_env)
							πF.SetLineno(2649)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µmath_env, "math_env"); πE != nil {
								continue
							}
							πTemp004 = πg.KWArgs{
								{"math_env", µmath_env},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_math, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp004); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_math_block.ToObject(), πTemp134); πE != nil {
						continue
					}
					// line 2651: def depart_math_block(self, node):
					πF.SetLineno(2651)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp135 = πg.NewFunction(πg.NewCode("depart_math_block", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2652: pass # never reached
							πF.SetLineno(2652)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_math_block.ToObject(), πTemp135); πE != nil {
						continue
					}
					// line 2654: def visit_option(self, node):
					πF.SetLineno(2654)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp136 = πg.NewFunction(πg.NewCode("visit_option", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp003, πTemp001); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2655: if self.context[-1]:
							πF.SetLineno(2655)
						Label1:
							// line 2657: self.out.append(', ')
							πF.SetLineno(2657)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr(", ").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option.ToObject(), πTemp136); πE != nil {
						continue
					}
					// line 2659: def depart_option(self, node):
					πF.SetLineno(2659)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp137 = πg.NewFunction(πg.NewCode("depart_option", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2661: self.context[-1] += 1
							πF.SetLineno(2661)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp003, πTemp001); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IAdd(πF, πTemp002, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp004 = πTemp005
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option.ToObject(), πTemp137); πE != nil {
						continue
					}
					// line 2663: def visit_option_argument(self, node):
					πF.SetLineno(2663)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp138 = πg.NewFunction(πg.NewCode("visit_option_argument", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2664: """Append the delimiter betweeen an option and its argument to body."""
							πF.SetLineno(2664)
							// line 2665: self.out.append(node.get('delimiter', ' '))
							πF.SetLineno(2665)
							πTemp001 = πF.MakeArgs(1)
							πTemp002 = πF.MakeArgs(2)
							πTemp002[0] = ßdelimiter.ToObject()
							πTemp002[1] = πg.NewStr(" ").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp001[0] = πTemp004
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_argument.ToObject(), πTemp138); πE != nil {
						continue
					}
					// line 2664: """Append the delimiter betweeen an option and its argument to body."""
					πF.SetLineno(2664)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp139}, πg.NewStr("Append the delimiter betweeen an option and its argument to body.").ToObject()); πE != nil {
						continue
					}
					if πTemp140, πE = πg.ResolveClass(πF, πClass, nil, ßvisit_option_argument); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp140, ß__doc__, πTemp139); πE != nil {
						continue
					}
					// line 2667: def depart_option_argument(self, node):
					πF.SetLineno(2667)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp139 = πg.NewFunction(πg.NewCode("depart_option_argument", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2668: pass
							πF.SetLineno(2668)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_argument.ToObject(), πTemp139); πE != nil {
						continue
					}
					// line 2670: def visit_option_group(self, node):
					πF.SetLineno(2670)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp140 = πg.NewFunction(πg.NewCode("visit_option_group", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2671: self.out.append('\n\\item[')
							πF.SetLineno(2671)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n\\item[").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2673: self.context.append(0)
							πF.SetLineno(2673)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_group.ToObject(), πTemp140); πE != nil {
						continue
					}
					// line 2675: def depart_option_group(self, node):
					πF.SetLineno(2675)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp141 = πg.NewFunction(πg.NewCode("depart_option_group", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2676: self.context.pop() # the flag
							πF.SetLineno(2676)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2677: self.out.append('] ')
							πF.SetLineno(2677)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("] ").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_group.ToObject(), πTemp141); πE != nil {
						continue
					}
					// line 2679: def visit_option_list(self, node):
					πF.SetLineno(2679)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp142 = πg.NewFunction(πg.NewCode("visit_option_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2680: self.fallbacks['_providelength'] = PreambleCmds.providelength
							πF.SetLineno(2680)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßprovidelength, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ß_providelength.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2681: self.fallbacks['optionlist'] = PreambleCmds.optionlist
							πF.SetLineno(2681)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßoptionlist, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßoptionlist.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2682: self.duclass_open(node)
							πF.SetLineno(2682)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2683: self.out.append('\\begin{DUoptionlist}')
							πF.SetLineno(2683)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\begin{DUoptionlist}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_list.ToObject(), πTemp142); πE != nil {
						continue
					}
					// line 2685: def depart_option_list(self, node):
					πF.SetLineno(2685)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp143 = πg.NewFunction(πg.NewCode("depart_option_list", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2686: self.out.append('\\end{DUoptionlist}\n')
							πF.SetLineno(2686)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\end{DUoptionlist}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2687: self.duclass_close(node)
							πF.SetLineno(2687)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_list.ToObject(), πTemp143); πE != nil {
						continue
					}
					// line 2689: def visit_option_list_item(self, node):
					πF.SetLineno(2689)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp144 = πg.NewFunction(πg.NewCode("visit_option_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2690: pass
							πF.SetLineno(2690)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_list_item.ToObject(), πTemp144); πE != nil {
						continue
					}
					// line 2692: def depart_option_list_item(self, node):
					πF.SetLineno(2692)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp145 = πg.NewFunction(πg.NewCode("depart_option_list_item", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2693: pass
							πF.SetLineno(2693)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_list_item.ToObject(), πTemp145); πE != nil {
						continue
					}
					// line 2695: def visit_option_string(self, node):
					πF.SetLineno(2695)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp146 = πg.NewFunction(πg.NewCode("visit_option_string", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2697: pass
							πF.SetLineno(2697)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_option_string.ToObject(), πTemp146); πE != nil {
						continue
					}
					// line 2699: def depart_option_string(self, node):
					πF.SetLineno(2699)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp147 = πg.NewFunction(πg.NewCode("depart_option_string", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2701: pass
							πF.SetLineno(2701)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_option_string.ToObject(), πTemp147); πE != nil {
						continue
					}
					// line 2703: def visit_organization(self, node):
					πF.SetLineno(2703)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp148 = πg.NewFunction(πg.NewCode("visit_organization", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2704: self.visit_docinfo_item(node, 'organization')
							πF.SetLineno(2704)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßorganization.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_organization.ToObject(), πTemp148); πE != nil {
						continue
					}
					// line 2706: def depart_organization(self, node):
					πF.SetLineno(2706)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp149 = πg.NewFunction(πg.NewCode("depart_organization", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2707: self.depart_docinfo_item(node)
							πF.SetLineno(2707)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_organization.ToObject(), πTemp149); πE != nil {
						continue
					}
					// line 2709: def visit_paragraph(self, node):
					πF.SetLineno(2709)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp150 = πg.NewFunction(πg.NewCode("visit_paragraph", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µindex *πg.Object = πg.UnboundLocal
						_ = µindex
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 bool
						_ = πTemp009
						var πTemp010 πg.KWArgs
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2714: index = node.parent.index(node)
							πF.SetLineno(2714)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßindex, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µindex = πTemp002
							if πE = πg.CheckLocal(πF, µindex, "index"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, µindex, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label1
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp005, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßlist_item, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp005, ßdescription, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp005, ßcompound, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple3(πTemp006, πTemp007, πTemp008).ToObject()
							πTemp001[1] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp002 = πTemp005
						Label1:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							if πE = πg.CheckLocal(πF, µindex, "index"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GT(πF, µindex, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label3
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßcompound, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp005
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp002 = πTemp005
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label3
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µindex, "index"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Sub(πF, µindex, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp005 = πTemp006
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp007, πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							if πTemp005, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßparagraph, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp006
							if πTemp005, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp009, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp009).ToObject()
							πTemp002 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label3
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µindex, "index"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Sub(πF, µindex, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp005 = πTemp006
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetItem(πF, πTemp007, πTemp005); πE != nil {
								continue
							}
							πTemp001[0] = πTemp006
							if πTemp005, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßcompound, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp006
							if πTemp005, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp009, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp009).ToObject()
							πTemp002 = πTemp003
						Label3:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcolwidths_auto, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label5
							}
							goto Label6
							// line 2715: if index == 0 and isinstance(node.parent,
							πF.SetLineno(2715)
						Label2:
							// line 2717: pass
							πF.SetLineno(2717)
							goto Label7
							// line 2718: elif (index > 0 and isinstance(node.parent, nodes.compound) and
							πF.SetLineno(2718)
						Label4:
							// line 2721: pass
							πF.SetLineno(2721)
							goto Label7
							// line 2722: elif self.active_table.colwidths_auto:
							πF.SetLineno(2722)
						Label5:
							if πE = πg.CheckLocal(πF, µindex, "index"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, µindex, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label8
							}
							goto Label9
							// line 2723: if index == 1: # second paragraph
							πF.SetLineno(2723)
						Label8:
							// line 2724: self.warn('LaTeX merges paragraphs in tables '
							πF.SetLineno(2724)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("LaTeX merges paragraphs in tables with auto-sized columns!").ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp010 = πg.KWArgs{
								{"base_node", µnode},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwarn, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp010); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label9
						Label9:
							if πE = πg.CheckLocal(πF, µindex, "index"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GT(πF, µindex, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label10
							}
							goto Label11
							// line 2726: if index > 0:
							πF.SetLineno(2726)
						Label10:
							// line 2727: self.out.append('\n')
							πF.SetLineno(2727)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label11
						Label11:
							goto Label7
						Label6:
							// line 2729: self.out.append('\n')
							πF.SetLineno(2729)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label7
						Label7:
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label12
							}
							goto Label13
							// line 2730: if node.get('ids'):
							πF.SetLineno(2730)
						Label12:
							// line 2731: self.out += self.ids_to_labels(node) + ['\n']
							πF.SetLineno(2731)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp005.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = make([]*πg.Object, 1)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							πTemp005 = πg.NewList(πTemp001...).ToObject()
							if πTemp003, πE = πg.Add(πF, πTemp006, πTemp005); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IAdd(πF, πTemp002, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp005); πE != nil {
								continue
							}
							goto Label13
						Label13:
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label14
							}
							goto Label15
							// line 2732: if node['classes']:
							πF.SetLineno(2732)
						Label14:
							// line 2733: self.visit_inline(node)
							πF.SetLineno(2733)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label15
						Label15:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_paragraph.ToObject(), πTemp150); πE != nil {
						continue
					}
					// line 2735: def depart_paragraph(self, node):
					πF.SetLineno(2735)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp151 = πg.NewFunction(πg.NewCode("depart_paragraph", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2736: if node['classes']:
							πF.SetLineno(2736)
						Label1:
							// line 2737: self.depart_inline(node)
							πF.SetLineno(2737)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp002, ßcolwidths_auto, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 2738: if not self.active_table.colwidths_auto:
							πF.SetLineno(2738)
						Label3:
							// line 2739: self.out.append('\n')
							πF.SetLineno(2739)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_paragraph.ToObject(), πTemp151); πE != nil {
						continue
					}
					// line 2741: def visit_problematic(self, node):
					πF.SetLineno(2741)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp152 = πg.NewFunction(πg.NewCode("visit_problematic", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2742: self.requirements['color'] = PreambleCmds.color
							πF.SetLineno(2742)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcolor, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp004 = ßcolor.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2743: self.out.append('%\n')
							πF.SetLineno(2743)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("%\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2744: self.append_hypertargets(node)
							πF.SetLineno(2744)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_hypertargets, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2745: self.out.append(r'\hyperlink{%s}{\textbf{\color{red}' % node['refid'])
							πF.SetLineno(2745)
							πTemp005 = πF.MakeArgs(1)
							πTemp002 = ßrefid.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\hyperlink{%s}{\\textbf{\\color{red}").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_problematic.ToObject(), πTemp152); πE != nil {
						continue
					}
					// line 2747: def depart_problematic(self, node):
					πF.SetLineno(2747)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp153 = πg.NewFunction(πg.NewCode("depart_problematic", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2748: self.out.append('}}')
							πF.SetLineno(2748)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_problematic.ToObject(), πTemp153); πE != nil {
						continue
					}
					// line 2750: def visit_raw(self, node):
					πF.SetLineno(2750)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp154 = πg.NewFunction(πg.NewCode("visit_raw", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp003 = πF.MakeArgs(2)
							πTemp003[0] = ßformat.ToObject()
							πTemp003[1] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp004, πE = πg.GetAttr(πF, πTemp005, ßsplit, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp005, ßlatex.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp006).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp006).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 2751: if not 'latex' in node.get('format', '').split():
							πF.SetLineno(2751)
						Label1:
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßSkipNode, nil); πE != nil {
								continue
							}
							// line 2752: raise nodes.SkipNode
							πF.SetLineno(2752)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
							goto Label2
						Label2:
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßis_inline, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp006, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp006).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label3
							}
							goto Label4
							// line 2753: if not self.is_inline(node):
							πF.SetLineno(2753)
						Label3:
							// line 2754: self.out.append('\n')
							πF.SetLineno(2754)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label4
						Label4:
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label5
							}
							goto Label6
							// line 2755: if node['classes']:
							πF.SetLineno(2755)
						Label5:
							// line 2756: self.visit_inline(node)
							πF.SetLineno(2756)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							goto Label6
						Label6:
							// line 2758: self.verbatim = True
							πF.SetLineno(2758)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßverbatim, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_raw.ToObject(), πTemp154); πE != nil {
						continue
					}
					// line 2760: def depart_raw(self, node):
					πF.SetLineno(2760)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp155 = πg.NewFunction(πg.NewCode("depart_raw", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2761: self.verbatim = False
							πF.SetLineno(2761)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßverbatim, πTemp002); πE != nil {
								continue
							}
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2762: if node['classes']:
							πF.SetLineno(2762)
						Label1:
							// line 2763: self.depart_inline(node)
							πF.SetLineno(2763)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßis_inline, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πTemp003, πE = πg.IsTrue(πF, πTemp005); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 2764: if not self.is_inline(node):
							πF.SetLineno(2764)
						Label3:
							// line 2765: self.out.append('\n')
							πF.SetLineno(2765)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_raw.ToObject(), πTemp155); πE != nil {
						continue
					}
					// line 2767: def has_unbalanced_braces(self, string):
					πF.SetLineno(2767)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "string", Def: nil}
					πTemp156 = πg.NewFunction(πg.NewCode("has_unbalanced_braces", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µstring *πg.Object = πArgs[1]
						_ = µstring
						var µlevel *πg.Object = πg.UnboundLocal
						_ = µlevel
						var µch *πg.Object = πg.UnboundLocal
						_ = µch
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 1:
								goto Label1
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2768: """Test whether there are unmatched '{' or '}' characters."""
							πF.SetLineno(2768)
							// line 2769: level = 0
							πF.SetLineno(2769)
							µlevel = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µstring, "string"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Iter(πF, µstring); πE != nil {
								continue
							}
							πF.PushCheckpoint(2)
							πTemp002 = false
						Label1:
							if πE != nil || πR != nil {
								continue
							}
							if πTemp002 {
								πF.PopCheckpoint()
								goto Label3
							}
							if πTemp004, πE = πg.Next(πF, πTemp001); πE != nil {
								isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
								if exc != nil {
									πE = exc
								} else if isStop {
									πE = nil
									πF.RestoreExc(nil, nil)
								}
								πTemp003 = !isStop
							} else {
								πTemp003 = true
								µch = πTemp004
							}
							if πE != nil || !πTemp003 {
								continue
							}
							πF.PushCheckpoint(1)
							if πE = πg.CheckLocal(πF, µch, "ch"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Eq(πF, µch, πg.NewStr("{").ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label4
							}
							goto Label5
							// line 2771: if ch == '{':
							πF.SetLineno(2771)
						Label4:
							// line 2772: level += 1
							πF.SetLineno(2772)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IAdd(πF, µlevel, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µlevel = πTemp004
							goto Label5
						Label5:
							if πE = πg.CheckLocal(πF, µch, "ch"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Eq(πF, µch, πg.NewStr("}").ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label6
							}
							goto Label7
							// line 2773: if ch == '}':
							πF.SetLineno(2773)
						Label6:
							// line 2774: level -= 1
							πF.SetLineno(2774)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.ISub(πF, µlevel, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							µlevel = πTemp004
							goto Label7
						Label7:
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.LT(πF, µlevel, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label8
							}
							goto Label9
							// line 2775: if level < 0:
							πF.SetLineno(2775)
						Label8:
							// line 2776: return True
							πF.SetLineno(2776)
							if πTemp004, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							πR = πTemp004
							continue
							goto Label9
						Label9:
							continue
						Label2:
							if πE != nil || πR != nil {
								continue
							}
						Label3:
							// line 2777: return level != 0
							πF.SetLineno(2777)
							if πE = πg.CheckLocal(πF, µlevel, "level"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.NE(πF, µlevel, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßhas_unbalanced_braces.ToObject(), πTemp156); πE != nil {
						continue
					}
					// line 2768: """Test whether there are unmatched '{' or '}' characters."""
					πF.SetLineno(2768)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp157}, πg.NewStr("Test whether there are unmatched '{' or '}' characters.").ToObject()); πE != nil {
						continue
					}
					if πTemp158, πE = πg.ResolveClass(πF, πClass, nil, ßhas_unbalanced_braces); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp158, ß__doc__, πTemp157); πE != nil {
						continue
					}
					// line 2779: def visit_reference(self, node):
					πF.SetLineno(2779)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp157 = πg.NewFunction(πg.NewCode("visit_reference", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µspecial_chars *πg.Object = πg.UnboundLocal
						_ = µspecial_chars
						var µhref *πg.Object = πg.UnboundLocal
						_ = µhref
						var πTemp001 *πg.Dict
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2781: special_chars = {ord('#'): u'\\#',
							πF.SetLineno(2781)
							πTemp001 = πg.NewDict()
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("#").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\#").ToObject()); πE != nil {
								continue
							}
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("%").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\%").ToObject()); πE != nil {
								continue
							}
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("\\").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßord); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πTemp001.SetItem(πF, πTemp004, πg.NewUnicode("\\\\").ToObject()); πE != nil {
								continue
							}
							πTemp003 = πTemp001.ToObject()
							µspecial_chars = πTemp003
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µnode, ßrefuri.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 2786: if 'refuri' in node:
							πF.SetLineno(2786)
						Label1:
							// line 2787: href = unicode(node['refuri']).translate(special_chars)
							πF.SetLineno(2787)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µspecial_chars, "special_chars"); πE != nil {
								continue
							}
							πTemp002[0] = µspecial_chars
							πTemp006 = πF.MakeArgs(1)
							πTemp003 = ßrefuri.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							πTemp006[0] = πTemp004
							if πTemp003, πE = πg.ResolveGlobal(πF, ßunicode); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp003, πE = πg.GetAttr(πF, πTemp004, ßtranslate, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							µhref = πTemp004
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("^^").ToObject()
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µhref, ßfind, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp007.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp007, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.NE(πF, πTemp008, πTemp007); πE != nil {
								continue
							}
							πTemp003 = πTemp004
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label3
							}
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							πTemp002[0] = µhref
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßhas_unbalanced_braces, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							πTemp003 = πTemp007
						Label3:
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							goto Label5
							// line 2789: if href.find('^^') != -1 or self.has_unbalanced_braces(href):
							πF.SetLineno(2789)
						Label4:
							// line 2790: self.error(
							πF.SetLineno(2790)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("External link \"%s\" not supported by LaTeX.\n (Must not contain \"^^\" or unbalanced braces.)").ToObject(), µhref); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßerror, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label5
						Label5:
							πTemp004 = ßrefuri.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp007, πTemp008); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label6
							}
							goto Label7
							// line 2793: if node['refuri'] == node.astext():
							πF.SetLineno(2793)
						Label6:
							// line 2794: self.out.append(r'\url{%s}' % href)
							πF.SetLineno(2794)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\url{%s}").ToObject(), µhref); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßSkipNode, nil); πE != nil {
								continue
							}
							// line 2795: raise nodes.SkipNode
							πF.SetLineno(2795)
							πE = πF.Raise(πTemp004, nil, nil)
							continue
							goto Label7
						Label7:
							// line 2796: self.out.append(r'\href{%s}{' % href)
							πF.SetLineno(2796)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\href{%s}{").ToObject(), µhref); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2797: return
							πF.SetLineno(2797)
							πR = πg.None
							continue
							goto Label2
						Label2:
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µnode, ßrefid.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label8
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µnode, ßrefname.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label9
							}
							goto Label10
							// line 2799: if 'refid' in node:
							πF.SetLineno(2799)
						Label8:
							// line 2800: href = node['refid']
							πF.SetLineno(2800)
							πTemp003 = ßrefid.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							µhref = πTemp004
							goto Label11
							// line 2801: elif 'refname' in node:
							πF.SetLineno(2801)
						Label9:
							// line 2802: href = self.document.nameids[node['refname']]
							πF.SetLineno(2802)
							πTemp004 = ßrefname.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							πTemp003 = πTemp007
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßdocument, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp007, ßnameids, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, πTemp008, πTemp003); πE != nil {
								continue
							}
							µhref = πTemp004
							goto Label11
						Label10:
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("Unknown reference.").ToObject()
							if πTemp003, πE = πg.ResolveGlobal(πF, ßAssertionError); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2804: raise AssertionError('Unknown reference.')
							πF.SetLineno(2804)
							πE = πF.Raise(πTemp004, nil, nil)
							continue
							goto Label11
						Label11:
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp002[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßis_inline, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp005, πE = πg.IsTrue(πF, πTemp007); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(!πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label12
							}
							goto Label13
							// line 2805: if not self.is_inline(node):
							πF.SetLineno(2805)
						Label12:
							// line 2806: self.out.append('\n')
							πF.SetLineno(2806)
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label13
						Label13:
							// line 2807: self.out.append('\\hyperref[%s]{' % href)
							πF.SetLineno(2807)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\hyperref[%s]{").ToObject(), µhref); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ß_reference_label, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label14
							}
							goto Label15
							// line 2808: if self._reference_label:
							πF.SetLineno(2808)
						Label14:
							// line 2809: self.out.append('\\%s{%s}}' %
							πF.SetLineno(2809)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ß_reference_label, nil); πE != nil {
								continue
							}
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = πg.NewStr("#").ToObject()
							πTemp006[1] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, µhref, ßreplace, nil); πE != nil {
								continue
							}
							if πTemp009, πE = πTemp008.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp004 = πg.NewTuple2(πTemp007, πTemp009).ToObject()
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\%s{%s}}").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp002[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßappend, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßSkipNode, nil); πE != nil {
								continue
							}
							// line 2811: raise nodes.SkipNode
							πF.SetLineno(2811)
							πE = πF.Raise(πTemp004, nil, nil)
							continue
							goto Label15
						Label15:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_reference.ToObject(), πTemp157); πE != nil {
						continue
					}
					// line 2813: def depart_reference(self, node):
					πF.SetLineno(2813)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp158 = πg.NewFunction(πg.NewCode("depart_reference", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2814: self.out.append('}')
							πF.SetLineno(2814)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßis_inline, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp005, πE = πg.IsTrue(πF, πTemp004); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(!πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 2815: if not self.is_inline(node):
							πF.SetLineno(2815)
						Label1:
							// line 2816: self.out.append('\n')
							πF.SetLineno(2816)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_reference.ToObject(), πTemp158); πE != nil {
						continue
					}
					// line 2818: def visit_revision(self, node):
					πF.SetLineno(2818)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp159 = πg.NewFunction(πg.NewCode("visit_revision", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2819: self.visit_docinfo_item(node, 'revision')
							πF.SetLineno(2819)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßrevision.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_revision.ToObject(), πTemp159); πE != nil {
						continue
					}
					// line 2821: def depart_revision(self, node):
					πF.SetLineno(2821)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp160 = πg.NewFunction(πg.NewCode("depart_revision", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2822: self.depart_docinfo_item(node)
							πF.SetLineno(2822)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_revision.ToObject(), πTemp160); πE != nil {
						continue
					}
					// line 2824: def visit_rubric(self, node):
					πF.SetLineno(2824)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp161 = πg.NewFunction(πg.NewCode("visit_rubric", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2825: self.fallbacks['rubric'] = PreambleCmds.rubric
							πF.SetLineno(2825)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßrubric, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßrubric.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2828: self.out.append('\n\\DUrubric{')
							πF.SetLineno(2828)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\n\\DUrubric{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_rubric.ToObject(), πTemp161); πE != nil {
						continue
					}
					// line 2830: def depart_rubric(self, node):
					πF.SetLineno(2830)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp162 = πg.NewFunction(πg.NewCode("depart_rubric", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2831: self.out.append('}\n')
							πF.SetLineno(2831)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_rubric.ToObject(), πTemp162); πE != nil {
						continue
					}
					// line 2833: def visit_section(self, node):
					πF.SetLineno(2833)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp163 = πg.NewFunction(πg.NewCode("visit_section", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2834: self.section_level += 1
							πF.SetLineno(2834)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_level, πTemp002); πE != nil {
								continue
							}
							// line 2836: self._section_number.append(0)
							πF.SetLineno(2836)
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_section_number, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2838: self._section_number[self.section_level - 1] += 1
							πF.SetLineno(2838)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Sub(πF, πTemp004, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_section_number, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							if πTemp001, πE = πg.IAdd(πF, πTemp002, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ß_section_number, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Sub(πF, πTemp007, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp005 = πTemp006
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp001); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_section.ToObject(), πTemp163); πE != nil {
						continue
					}
					// line 2840: def depart_section(self, node):
					πF.SetLineno(2840)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp164 = πg.NewFunction(πg.NewCode("depart_section", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2842: self._section_number.pop()
							πF.SetLineno(2842)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_section_number, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2843: self.section_level -= 1
							πF.SetLineno(2843)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsection_level, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_section.ToObject(), πTemp164); πE != nil {
						continue
					}
					// line 2845: def visit_sidebar(self, node):
					πF.SetLineno(2845)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp165 = πg.NewFunction(πg.NewCode("visit_sidebar", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2846: self.duclass_open(node)
							πF.SetLineno(2846)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_open, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2847: self.requirements['color'] = PreambleCmds.color
							πF.SetLineno(2847)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßcolor, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp005 = ßcolor.ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp002); πE != nil {
								continue
							}
							// line 2848: self.fallbacks['sidebar'] = PreambleCmds.sidebar
							πF.SetLineno(2848)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsidebar, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp005 = ßsidebar.ToObject()
							if πE = πg.SetItem(πF, πTemp004, πTemp005, πTemp002); πE != nil {
								continue
							}
							// line 2849: self.out.append('\\DUsidebar{')
							πF.SetLineno(2849)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\DUsidebar{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_sidebar.ToObject(), πTemp165); πE != nil {
						continue
					}
					// line 2851: def depart_sidebar(self, node):
					πF.SetLineno(2851)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp166 = πg.NewFunction(πg.NewCode("depart_sidebar", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2852: self.out.append('}\n')
							πF.SetLineno(2852)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2853: self.duclass_close(node)
							πF.SetLineno(2853)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßduclass_close, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_sidebar.ToObject(), πTemp166); πE != nil {
						continue
					}
					// line 2855: attribution_formats = {'dash': (u'—', ''), # EM DASH
					πF.SetLineno(2855)
					πTemp167 = πg.NewDict()
					πTemp168 = πg.NewTuple2(πg.NewUnicode("\xe2\x80\x94").ToObject(), ß.ToObject()).ToObject()
					if πE = πTemp167.SetItem(πF, ßdash.ToObject(), πTemp168); πE != nil {
						continue
					}
					πTemp168 = πg.NewTuple2(πg.NewStr("(").ToObject(), πg.NewStr(")").ToObject()).ToObject()
					if πE = πTemp167.SetItem(πF, ßparentheses.ToObject(), πTemp168); πE != nil {
						continue
					}
					πTemp168 = πg.NewTuple2(πg.NewStr("(").ToObject(), πg.NewStr(")").ToObject()).ToObject()
					if πE = πTemp167.SetItem(πF, ßparens.ToObject(), πTemp168); πE != nil {
						continue
					}
					πTemp168 = πg.NewTuple2(ß.ToObject(), ß.ToObject()).ToObject()
					if πE = πTemp167.SetItem(πF, ßnone.ToObject(), πTemp168); πE != nil {
						continue
					}
					πTemp168 = πTemp167.ToObject()
					if πE = πClass.SetItem(πF, ßattribution_formats.ToObject(), πTemp168); πE != nil {
						continue
					}
					// line 2860: def visit_attribution(self, node):
					πF.SetLineno(2860)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp168 = πg.NewFunction(πg.NewCode("visit_attribution", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µprefix *πg.Object = πg.UnboundLocal
						_ = µprefix
						var µsuffix *πg.Object = πg.UnboundLocal
						_ = µsuffix
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2861: prefix, suffix = self.attribution_formats[self.settings.attribution]
							πF.SetLineno(2861)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßattribution, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßattribution_formats, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp003, πTemp001); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp001}, πg.TieTarget{Target: &πTemp003}}}, πTemp002); πE != nil {
								continue
							}
							µprefix = πTemp001
							µsuffix = πTemp003
							// line 2862: self.out.append('\\nopagebreak\n\n\\raggedleft ')
							πF.SetLineno(2862)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("\\nopagebreak\n\n\\raggedleft ").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2863: self.out.append(prefix)
							πF.SetLineno(2863)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µprefix, "prefix"); πE != nil {
								continue
							}
							πTemp004[0] = µprefix
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							// line 2864: self.context.append(suffix)
							πF.SetLineno(2864)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsuffix, "suffix"); πE != nil {
								continue
							}
							πTemp004[0] = µsuffix
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_attribution.ToObject(), πTemp168); πE != nil {
						continue
					}
					// line 2866: def depart_attribution(self, node):
					πF.SetLineno(2866)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp169 = πg.NewFunction(πg.NewCode("depart_attribution", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2867: self.out.append(self.context.pop() + '\n')
							πF.SetLineno(2867)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßpop, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("\n").ToObject()); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_attribution.ToObject(), πTemp169); πE != nil {
						continue
					}
					// line 2869: def visit_status(self, node):
					πF.SetLineno(2869)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp170 = πg.NewFunction(πg.NewCode("visit_status", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2870: self.visit_docinfo_item(node, 'status')
							πF.SetLineno(2870)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßstatus.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_status.ToObject(), πTemp170); πE != nil {
						continue
					}
					// line 2872: def depart_status(self, node):
					πF.SetLineno(2872)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp171 = πg.NewFunction(πg.NewCode("depart_status", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2873: self.depart_docinfo_item(node)
							πF.SetLineno(2873)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_status.ToObject(), πTemp171); πE != nil {
						continue
					}
					// line 2875: def visit_strong(self, node):
					πF.SetLineno(2875)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp172 = πg.NewFunction(πg.NewCode("visit_strong", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2876: self.out.append('\\textbf{')
							πF.SetLineno(2876)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\textbf{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2877: if node['classes']:
							πF.SetLineno(2877)
						Label1:
							// line 2878: self.visit_inline(node)
							πF.SetLineno(2878)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_inline, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_strong.ToObject(), πTemp172); πE != nil {
						continue
					}
					// line 2880: def depart_strong(self, node):
					πF.SetLineno(2880)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp173 = πg.NewFunction(πg.NewCode("depart_strong", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 2881: if node['classes']:
							πF.SetLineno(2881)
						Label1:
							// line 2882: self.depart_inline(node)
							πF.SetLineno(2882)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp004[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_inline, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label2
						Label2:
							// line 2883: self.out.append('}')
							πF.SetLineno(2883)
							πTemp004 = πF.MakeArgs(1)
							πTemp004[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_strong.ToObject(), πTemp173); πE != nil {
						continue
					}
					// line 2885: def visit_substitution_definition(self, node):
					πF.SetLineno(2885)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp174 = πg.NewFunction(πg.NewCode("visit_substitution_definition", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßSkipNode, nil); πE != nil {
								continue
							}
							// line 2886: raise nodes.SkipNode
							πF.SetLineno(2886)
							πE = πF.Raise(πTemp002, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_substitution_definition.ToObject(), πTemp174); πE != nil {
						continue
					}
					// line 2888: def visit_substitution_reference(self, node):
					πF.SetLineno(2888)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp175 = πg.NewFunction(πg.NewCode("visit_substitution_reference", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2889: self.unimplemented_visit(node)
							πF.SetLineno(2889)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßunimplemented_visit, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_substitution_reference.ToObject(), πTemp175); πE != nil {
						continue
					}
					// line 2891: def visit_subtitle(self, node):
					πF.SetLineno(2891)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp176 = πg.NewFunction(πg.NewCode("visit_subtitle", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 πg.KWArgs
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdocument, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsection, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							goto Label3
							// line 2892: if isinstance(node.parent, nodes.document):
							πF.SetLineno(2892)
						Label1:
							// line 2893: self.push_output_collector(self.subtitle)
							πF.SetLineno(2893)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsubtitle, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2894: self.fallbacks['documentsubtitle'] = PreambleCmds.documentsubtitle
							πF.SetLineno(2894)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdocumentsubtitle, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp006 = ßdocumentsubtitle.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp006, πTemp002); πE != nil {
								continue
							}
							// line 2895: self.subtitle_labels += self.ids_to_labels(node, set_anchor=False)
							πF.SetLineno(2895)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsubtitle_labels, nil); πE != nil {
								continue
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πTemp003, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp007 = πg.KWArgs{
								{"set_anchor", πTemp003},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, πTemp007); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp003, πE = πg.IAdd(πF, πTemp002, πTemp005); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßsubtitle_labels, πTemp003); πE != nil {
								continue
							}
							goto Label4
							// line 2897: elif isinstance(node.parent, nodes.section):
							πF.SetLineno(2897)
						Label2:
							// line 2898: self.out.append(r'\%s*{' %
							πF.SetLineno(2898)
							πTemp001 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp005, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp008[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßsection, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp005.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\%s*{").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label4
						Label3:
							// line 2901: self.fallbacks['subtitle'] = PreambleCmds.subtitle
							πF.SetLineno(2901)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsubtitle, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp006 = ßsubtitle.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp006, πTemp002); πE != nil {
								continue
							}
							// line 2902: self.out.append('\n\\DUsubtitle{')
							πF.SetLineno(2902)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\n\\DUsubtitle{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label4
						Label4:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_subtitle.ToObject(), πTemp176); πE != nil {
						continue
					}
					// line 2904: def depart_subtitle(self, node):
					πF.SetLineno(2904)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp177 = πg.NewFunction(πg.NewCode("depart_subtitle", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßdocument, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							if πTemp004, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 2905: if isinstance(node.parent, nodes.document):
							πF.SetLineno(2905)
						Label1:
							// line 2906: self.pop_output_collector()
							πF.SetLineno(2906)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßpop_output_collector, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label3
						Label2:
							// line 2908: self.out.append('}\n')
							πF.SetLineno(2908)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_subtitle.ToObject(), πTemp177); πE != nil {
						continue
					}
					// line 2910: def visit_system_message(self, node):
					πF.SetLineno(2910)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp178 = πg.NewFunction(πg.NewCode("visit_system_message", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µline *πg.Object = πg.UnboundLocal
						_ = µline
						var µbackrefs *πg.Object = πg.UnboundLocal
						_ = µbackrefs
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.BaseException
						_ = πTemp006
						var πTemp007 *πg.Traceback
						_ = πTemp007
						var πTemp008 bool
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πTemp012 []πg.Param
						_ = πTemp012
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2911: self.requirements['color'] = PreambleCmds.color
							πF.SetLineno(2911)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcolor, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp004 = ßcolor.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2912: self.fallbacks['title'] = PreambleCmds.title
							πF.SetLineno(2912)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtitle, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßtitle.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 2913: node['classes'] = ['system-message']
							πF.SetLineno(2913)
							πTemp005 = make([]*πg.Object, 1)
							πTemp005[0] = πg.NewStr("system-message").ToObject()
							πTemp001 = πg.NewList(πTemp005...).ToObject()
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003 = ßclasses.ToObject()
							if πE = πg.SetItem(πF, µnode, πTemp003, πTemp002); πE != nil {
								continue
							}
							// line 2914: self.visit_admonition(node)
							πF.SetLineno(2914)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisit_admonition, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2915: self.out.append('\n\\DUtitle[system-message]{system-message}\n')
							πF.SetLineno(2915)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\n\\DUtitle[system-message]{system-message}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2916: self.append_hypertargets(node)
							πF.SetLineno(2916)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßappend_hypertargets, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2917: try:
							πF.SetLineno(2917)
							πF.PushCheckpoint(2)
							// line 2918: line = ', line~%s' % node['line']
							πF.SetLineno(2918)
							πTemp002 = ßline.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr(", line~%s").ToObject(), πTemp003); πE != nil {
								continue
							}
							µline = πTemp001
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp006, πTemp007 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßKeyError); πE != nil {
								continue
							}
							if πTemp008, πE = πg.IsInstance(πF, πTemp006.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label3
							}
							πE = πF.Raise(πTemp006.ToObject(), nil, πTemp007.ToObject())
							continue
							// line 2919: except KeyError:
							πF.SetLineno(2919)
						Label3:
							// line 2920: line = ''
							πF.SetLineno(2920)
							µline = ß.ToObject()
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
							// line 2921: self.out.append('\n\n{\\color{red}%s/%s} in \\texttt{%s}%s\n' %
							πF.SetLineno(2921)
							πTemp005 = πF.MakeArgs(1)
							πTemp003 = ßtype.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							πTemp003 = ßlevel.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							πTemp010 = πF.MakeArgs(1)
							πTemp003 = ßsource.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							πTemp010[0] = πTemp011
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp011, πE = πTemp003.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πE = πg.CheckLocal(πF, µline, "line"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple4(πTemp004, πTemp009, πTemp011, µline).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\n\n{\\color{red}%s/%s} in \\texttt{%s}%s\n").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp005 = πF.MakeArgs(1)
							πTemp002 = ßbackrefs.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp001, πE = πg.Eq(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp008, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp008 {
								goto Label4
							}
							goto Label5
							// line 2924: if len(node['backrefs']) == 1:
							πF.SetLineno(2924)
						Label4:
							// line 2925: self.out.append('\n\\hyperlink{%s}{' % node['backrefs'][0])
							πF.SetLineno(2925)
							πTemp005 = πF.MakeArgs(1)
							πTemp002 = πg.NewInt(0).ToObject()
							πTemp004 = ßbackrefs.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp009, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp009, πTemp002); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\n\\hyperlink{%s}{").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2926: self.context.append('}')
							πF.SetLineno(2926)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label6
						Label5:
							// line 2928: backrefs = ['\\hyperlink{%s}{%d}' % (href, i+1)
							πF.SetLineno(2928)
							πTemp012 = make([]πg.Param, 0)
							πTemp002 = πg.NewFunction(πg.NewCode("<generator>", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp012, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
								var µi *πg.Object = πg.UnboundLocal
								_ = µi
								var µhref *πg.Object = πg.UnboundLocal
								_ = µhref
								var πTemp001 *πg.Object
								_ = πTemp001
								var πTemp002 []*πg.Object
								_ = πTemp002
								var πTemp003 *πg.Object
								_ = πTemp003
								var πTemp004 *πg.Object
								_ = πTemp004
								var πTemp005 bool
								_ = πTemp005
								var πTemp006 bool
								_ = πTemp006
								var πTemp007 *πg.Object
								_ = πTemp007
								var πR *πg.Object
								_ = πR
								var πE *πg.BaseException
								_ = πE
								return πg.NewGenerator(πF, func(πSent *πg.Object) (*πg.Object, *πg.BaseException) {
									for ; πF.State() >= 0; πF.PopCheckpoint() {
										switch πF.State() {
										case 0:
										case 1:
											goto Label1
										case 2:
											goto Label2
										case 4:
											goto Label4
										default:
											panic("unexpected function state")
										}
										πTemp002 = πF.MakeArgs(1)
										πTemp003 = ßbackrefs.ToObject()
										if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
											continue
										}
										if πTemp004, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
											continue
										}
										πTemp002[0] = πTemp004
										if πTemp003, πE = πg.ResolveGlobal(πF, ßenumerate); πE != nil {
											continue
										}
										if πTemp004, πE = πTemp003.Call(πF, πTemp002, nil); πE != nil {
											continue
										}
										πF.FreeArgs(πTemp002)
										if πTemp001, πE = πg.Iter(πF, πTemp004); πE != nil {
											continue
										}
										πF.PushCheckpoint(2)
										πTemp005 = false
									Label1:
										if πE != nil || πR != nil {
											continue
										}
										if πTemp005 {
											πF.PopCheckpoint()
											goto Label3
										}
										if πTemp003, πE = πg.Next(πF, πTemp001); πE != nil {
											isStop, exc := πg.IsInstance(πF, πE.ToObject(), πg.StopIterationType.ToObject())
											if exc != nil {
												πE = exc
											} else if isStop {
												πE = nil
												πF.RestoreExc(nil, nil)
											}
											πTemp006 = !isStop
										} else {
											πTemp006 = true
											if πE = πg.Tie(πF, πg.TieTarget{Children: []πg.TieTarget{πg.TieTarget{Target: &πTemp004}, πg.TieTarget{Target: &πTemp007}}}, πTemp003); πE != nil {
												continue
											}
											µi = πTemp004
											µhref = πTemp007
										}
										if πE != nil || !πTemp006 {
											continue
										}
										πF.PushCheckpoint(1)
										// line 2928: backrefs = ['\\hyperlink{%s}{%d}' % (href, i+1)
										πF.SetLineno(2928)
										if πE = πg.CheckLocal(πF, µhref, "href"); πE != nil {
											continue
										}
										if πE = πg.CheckLocal(πF, µi, "i"); πE != nil {
											continue
										}
										if πTemp007, πE = πg.Add(πF, µi, πg.NewInt(1).ToObject()); πE != nil {
											continue
										}
										πTemp004 = πg.NewTuple2(µhref, πTemp007).ToObject()
										if πTemp003, πE = πg.Mod(πF, πg.NewStr("\\hyperlink{%s}{%d}").ToObject(), πTemp004); πE != nil {
											continue
										}
										πF.PushCheckpoint(4)
										return πTemp003, nil
									Label4:
										πTemp004 = πSent
										continue
									Label2:
										if πE != nil || πR != nil {
											continue
										}
									Label3:
									}
									return nil, πE
								}).ToObject(), nil
							}), πF.Globals()).ToObject()
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.ListType.Call(πF, πg.Args{πTemp003}, nil); πE != nil {
								continue
							}
							µbackrefs = πTemp001
							// line 2930: self.context.append('backrefs: ' + ' '.join(backrefs))
							πF.SetLineno(2930)
							πTemp005 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µbackrefs, "backrefs"); πE != nil {
								continue
							}
							πTemp010[0] = µbackrefs
							if πTemp003, πE = πg.GetAttr(πF, πg.NewStr(" ").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp003.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πTemp001, πE = πg.Add(πF, πg.NewStr("backrefs: ").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label6
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_system_message.ToObject(), πTemp178); πE != nil {
						continue
					}
					// line 2932: def depart_system_message(self, node):
					πF.SetLineno(2932)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp179 = πg.NewFunction(πg.NewCode("depart_system_message", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2933: self.out.append(self.context.pop())
							πF.SetLineno(2933)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 2934: self.depart_admonition(node)
							πF.SetLineno(2934)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_admonition, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_system_message.ToObject(), πTemp179); πE != nil {
						continue
					}
					// line 2936: def visit_table(self, node):
					πF.SetLineno(2936)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp180 = πg.NewFunction(πg.NewCode("visit_table", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2937: self.requirements['table'] = PreambleCmds.table
							πF.SetLineno(2937)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtable, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp004 = ßtable.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßis_open, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 2938: if self.active_table.is_open():
							πF.SetLineno(2938)
						Label1:
							// line 2939: self.table_stack.append(self.active_table)
							πF.SetLineno(2939)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtable_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							// line 2941: self.active_table = Table(self, 'tabular')
							πF.SetLineno(2941)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp006[0] = µself
							πTemp006[1] = ßtabular.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTable); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßactive_table, πTemp001); πE != nil {
								continue
							}
							goto Label2
						Label2:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ß_latex_type, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Eq(πF, πTemp004, ßlongtable.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label3
							}
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsection, nil); πE != nil {
								continue
							}
							πTemp006[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							πTemp001 = πTemp003
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label3
							}
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp006[0] = µnode
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßindex, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp002, πE = πg.Eq(πF, πTemp003, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							πTemp001 = πTemp002
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp005 {
								goto Label3
							}
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = ßparagraph.ToObject()
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßsection, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßfind, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp004, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.NE(πF, πTemp003, πTemp004); πE != nil {
								continue
							}
							πTemp001 = πTemp002
						Label3:
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label4
							}
							goto Label5
							// line 2944: if (self.active_table._latex_type == 'longtable' and
							πF.SetLineno(2944)
						Label4:
							// line 2948: self.out.append('\\leavevmode')
							πF.SetLineno(2948)
							πTemp006 = πF.MakeArgs(1)
							πTemp006[0] = πg.NewStr("\\leavevmode").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label5
						Label5:
							// line 2949: self.active_table.open()
							πF.SetLineno(2949)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßopen, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2950: self.active_table.set_table_style(self.settings.table_style,
							πF.SetLineno(2950)
							πTemp006 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtable_style, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp002
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							πTemp006[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßset_table_style, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Contains(πF, µnode, ßalign.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label6
							}
							goto Label7
							// line 2952: if 'align' in node:
							πF.SetLineno(2952)
						Label6:
							// line 2953: self.active_table.set('align', node['align'])
							πF.SetLineno(2953)
							πTemp006 = πF.MakeArgs(2)
							πTemp006[0] = ßalign.ToObject()
							πTemp001 = ßalign.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							πTemp006[1] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßset, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							goto Label7
						Label7:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßborders, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp003, ßbooktabs.ToObject()); πE != nil {
								continue
							}
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label8
							}
							goto Label9
							// line 2954: if self.active_table.borders == 'booktabs':
							πF.SetLineno(2954)
						Label8:
							// line 2955: self.requirements['booktabs'] = r'\usepackage{booktabs}'
							πF.SetLineno(2955)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πg.NewStr("\\usepackage{booktabs}").ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp003 = ßbooktabs.ToObject()
							if πE = πg.SetItem(πF, πTemp002, πTemp003, πTemp001); πE != nil {
								continue
							}
							goto Label9
						Label9:
							// line 2956: self.push_output_collector([])
							πF.SetLineno(2956)
							πTemp006 = πF.MakeArgs(1)
							πTemp007 = make([]*πg.Object, 0)
							πTemp001 = πg.NewList(πTemp007...).ToObject()
							πTemp006[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_table.ToObject(), πTemp180); πE != nil {
						continue
					}
					// line 2958: def depart_table(self, node):
					πF.SetLineno(2958)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp181 = πg.NewFunction(πg.NewCode("depart_table", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µcontent *πg.Object = πg.UnboundLocal
						_ = µcontent
						var µwidth *πg.Object = πg.UnboundLocal
						_ = µwidth
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 []*πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.BaseException
						_ = πTemp005
						var πTemp006 *πg.Traceback
						_ = πTemp006
						var πTemp007 bool
						_ = πTemp007
						var πTemp008 []*πg.Object
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 2:
								goto Label2
							default:
								panic("unexpected function state")
							}
							// line 2960: content = self.out
							πF.SetLineno(2960)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							µcontent = πTemp001
							// line 2961: self.pop_output_collector()
							πF.SetLineno(2961)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpop_output_collector, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							// line 2962: try:
							πF.SetLineno(2962)
							πF.PushCheckpoint(2)
							// line 2963: width = self.to_latex_length(node.attributes['width'])
							πF.SetLineno(2963)
							πTemp003 = πF.MakeArgs(1)
							πTemp001 = ßwidth.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µnode, ßattributes, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp004, πTemp001); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßto_latex_length, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							µwidth = πTemp002
							πF.PopCheckpoint()
							goto Label1
						Label2:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp005, πTemp006 = πF.ExcInfo()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßKeyError); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsInstance(πF, πTemp005.ToObject(), πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label3
							}
							πE = πF.Raise(πTemp005.ToObject(), nil, πTemp006.ToObject())
							continue
							// line 2964: except KeyError:
							πF.SetLineno(2964)
						Label3:
							// line 2965: width = r'\linewidth'
							πF.SetLineno(2965)
							µwidth = πg.NewStr("\\linewidth").ToObject()
							πF.RestoreExc(nil, nil)
							goto Label1
						Label1:
							// line 2966: self.out.append('\n' + self.active_table.get_opening(width))
							πF.SetLineno(2966)
							πTemp003 = πF.MakeArgs(1)
							πTemp008 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µwidth, "width"); πE != nil {
								continue
							}
							πTemp008[0] = µwidth
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßget_opening, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, πTemp008, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp008)
							if πTemp001, πE = πg.Add(πF, πg.NewStr("\n").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2967: self.out += content
							πF.SetLineno(2967)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µcontent, "content"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, µcontent); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp002); πE != nil {
								continue
							}
							// line 2968: self.out.append(self.active_table.get_closing() + '\n')
							πF.SetLineno(2968)
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßget_closing, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp004.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp002, πg.NewStr("\n").ToObject()); πE != nil {
								continue
							}
							πTemp003[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							// line 2969: self.active_table.close()
							πF.SetLineno(2969)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßclose, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßtable_stack, nil); πE != nil {
								continue
							}
							πTemp003[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp004, πE = πTemp002.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp001, πE = πg.GT(πF, πTemp004, πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πTemp007, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label4
							}
							goto Label5
							// line 2970: if len(self.table_stack)>0:
							πF.SetLineno(2970)
						Label4:
							// line 2971: self.active_table = self.table_stack.pop()
							πF.SetLineno(2971)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtable_stack, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßpop, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßactive_table, πTemp002); πE != nil {
								continue
							}
							goto Label5
						Label5:
							πTemp003 = πF.MakeArgs(1)
							πTemp003[0] = ßids.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp003, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							if πTemp007, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp007 {
								goto Label6
							}
							goto Label7
							// line 2974: if node.get('ids'):
							πF.SetLineno(2974)
						Label6:
							// line 2975: self.out += self.ids_to_labels(node, set_anchor=False) + ['\n']
							πF.SetLineno(2975)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp003 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp003[0] = µnode
							if πTemp004, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp009 = πg.KWArgs{
								{"set_anchor", πTemp004},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp010, πE = πTemp004.Call(πF, πTemp003, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp003)
							πTemp003 = make([]*πg.Object, 1)
							πTemp003[0] = πg.NewStr("\n").ToObject()
							πTemp004 = πg.NewList(πTemp003...).ToObject()
							if πTemp002, πE = πg.Add(πF, πTemp010, πTemp004); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IAdd(πF, πTemp001, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp004); πE != nil {
								continue
							}
							goto Label7
						Label7:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_table.ToObject(), πTemp181); πE != nil {
						continue
					}
					// line 2977: def visit_target(self, node):
					πF.SetLineno(2977)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp182 = πg.NewFunction(πg.NewCode("visit_target", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µset_anchor *πg.Object = πg.UnboundLocal
						_ = µset_anchor
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 bool
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µnode, ßrefuri.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp004).ToObject()
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µnode, ßrefid.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp004).ToObject()
							πTemp001 = πTemp003
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, µnode, ßrefname.ToObject()); πE != nil {
								continue
							}
							πTemp003 = πg.GetBool(πTemp004).ToObject()
							πTemp001 = πTemp003
						Label1:
							if πTemp002, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp002 {
								goto Label2
							}
							goto Label3
							// line 2979: if ('refuri' in node       # external hyperlink
							πF.SetLineno(2979)
						Label2:
							// line 2983: return
							πF.SetLineno(2983)
							πR = πg.None
							continue
							goto Label3
						Label3:
							// line 2984: self.out.append('%\n')
							πF.SetLineno(2984)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("%\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 2986: set_anchor = not isinstance(node.parent, (nodes.caption, nodes.title))
							πF.SetLineno(2986)
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp003
							if πTemp006, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp006, ßcaption, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp008, πE = πg.GetAttr(πF, πTemp006, ßtitle, nil); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(πTemp007, πTemp008).ToObject()
							πTemp005[1] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp002, πE = πg.IsTrue(πF, πTemp006); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp002).ToObject()
							µset_anchor = πTemp001
							// line 2988: self.out += self.ids_to_labels(node, set_anchor)
							πF.SetLineno(2988)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp005[0] = µnode
							if πE = πg.CheckLocal(πF, µset_anchor, "set_anchor"); πE != nil {
								continue
							}
							πTemp005[1] = µset_anchor
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp003, πE = πg.IAdd(πF, πTemp001, πTemp006); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp003); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_target.ToObject(), πTemp182); πE != nil {
						continue
					}
					// line 2990: def depart_target(self, node):
					πF.SetLineno(2990)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp183 = πg.NewFunction(πg.NewCode("depart_target", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 2991: pass
							πF.SetLineno(2991)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_target.ToObject(), πTemp183); πE != nil {
						continue
					}
					// line 2993: def visit_tbody(self, node):
					πF.SetLineno(2993)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp184 = πg.NewFunction(πg.NewCode("visit_tbody", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 []*πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 bool
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp002 = πF.MakeArgs(1)
							πTemp002[0] = πg.NewStr("preamble written").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ßget, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp004.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							if πTemp005, πE = πg.IsTrue(πF, πTemp003); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp005).ToObject()
							if πTemp005, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp005 {
								goto Label1
							}
							goto Label2
							// line 2996: if not self.active_table.get('preamble written'):
							πF.SetLineno(2996)
						Label1:
							// line 2997: self.visit_thead(node)
							πF.SetLineno(2997)
							πTemp002 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp002[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisit_thead, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							// line 2998: self.depart_thead(None)
							πF.SetLineno(2998)
							πTemp002 = πF.MakeArgs(1)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp002[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_thead, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp001.Call(πF, πTemp002, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp002)
							goto Label2
						Label2:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_tbody.ToObject(), πTemp184); πE != nil {
						continue
					}
					// line 3000: def depart_tbody(self, node):
					πF.SetLineno(3000)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp185 = πg.NewFunction(πg.NewCode("depart_tbody", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3001: pass
							πF.SetLineno(3001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_tbody.ToObject(), πTemp185); πE != nil {
						continue
					}
					// line 3003: def visit_term(self, node):
					πF.SetLineno(3003)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp186 = πg.NewFunction(πg.NewCode("visit_term", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3004: """definition list term"""
							πF.SetLineno(3004)
							// line 3007: self.out.append('\\item[{')
							πF.SetLineno(3007)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("\\item[{").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_term.ToObject(), πTemp186); πE != nil {
						continue
					}
					// line 3004: """definition list term"""
					πF.SetLineno(3004)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp187}, πg.NewStr("definition list term").ToObject()); πE != nil {
						continue
					}
					if πTemp188, πE = πg.ResolveClass(πF, πClass, nil, ßvisit_term); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp188, ß__doc__, πTemp187); πE != nil {
						continue
					}
					// line 3009: def depart_term(self, node):
					πF.SetLineno(3009)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp187 = πg.NewFunction(πg.NewCode("depart_term", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3012: self.out.append('}] \\leavevmode ')
							πF.SetLineno(3012)
							πTemp001 = πF.MakeArgs(1)
							πTemp001[0] = πg.NewStr("}] \\leavevmode ").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_term.ToObject(), πTemp187); πE != nil {
						continue
					}
					// line 3014: def visit_tgroup(self, node):
					πF.SetLineno(3014)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp188 = πg.NewFunction(πg.NewCode("visit_tgroup", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3017: pass
							πF.SetLineno(3017)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_tgroup.ToObject(), πTemp188); πE != nil {
						continue
					}
					// line 3019: def depart_tgroup(self, node):
					πF.SetLineno(3019)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp189 = πg.NewFunction(πg.NewCode("depart_tgroup", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3020: pass
							πF.SetLineno(3020)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_tgroup.ToObject(), πTemp189); πE != nil {
						continue
					}
					// line 3022: _thead_depth = 0
					πF.SetLineno(3022)
					if πE = πClass.SetItem(πF, ß_thead_depth.ToObject(), πg.NewInt(0).ToObject()); πE != nil {
						continue
					}
					// line 3023: def thead_depth (self):
					πF.SetLineno(3023)
					πTemp002 = make([]πg.Param, 1)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp190 = πg.NewFunction(πg.NewCode("thead_depth", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var πTemp001 *πg.Object
						_ = πTemp001
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3024: return self._thead_depth
							πF.SetLineno(3024)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_thead_depth, nil); πE != nil {
								continue
							}
							πR = πTemp001
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßthead_depth.ToObject(), πTemp190); πE != nil {
						continue
					}
					// line 3026: def visit_thead(self, node):
					πF.SetLineno(3026)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp191 = πg.NewFunction(πg.NewCode("visit_thead", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3027: self._thead_depth += 1
							πF.SetLineno(3027)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_thead_depth, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_thead_depth, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßthead_depth, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πg.NewInt(1).ToObject(), πTemp003); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							goto Label2
							// line 3028: if 1 == self.thead_depth():
							πF.SetLineno(3028)
						Label1:
							// line 3029: self.out.append('{%s}\n' % self.active_table.get_colspecs(node))
							πF.SetLineno(3029)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp006[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßget_colspecs, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("{%s}\n").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 3030: self.active_table.set('preamble written', 1)
							πF.SetLineno(3030)
							πTemp005 = πF.MakeArgs(2)
							πTemp005[0] = πg.NewStr("preamble written").ToObject()
							πTemp005[1] = πg.NewInt(1).ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßset, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label2
						Label2:
							// line 3031: self.out.append(self.active_table.get_caption())
							πF.SetLineno(3031)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßget_caption, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 3032: self.out.extend(self.active_table.visit_thead())
							πF.SetLineno(3032)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßvisit_thead, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßextend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_thead.ToObject(), πTemp191); πE != nil {
						continue
					}
					// line 3034: def depart_thead(self, node):
					πF.SetLineno(3034)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp192 = πg.NewFunction(πg.NewCode("depart_thead", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 []*πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNone); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(µnode != πTemp002).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label1
							}
							goto Label2
							// line 3035: if node is not None:
							πF.SetLineno(3035)
						Label1:
							// line 3036: self.out.extend(self.active_table.depart_thead())
							πF.SetLineno(3036)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßdepart_thead, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp004[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßextend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßneed_recurse, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 3037: if self.active_table.need_recurse():
							πF.SetLineno(3037)
						Label3:
							// line 3038: node.walkabout(self)
							πF.SetLineno(3038)
							πTemp004 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							πTemp004[0] = µself
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßwalkabout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp004, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp004)
							goto Label4
						Label4:
							goto Label2
						Label2:
							// line 3039: self._thead_depth -= 1
							πF.SetLineno(3039)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ß_thead_depth, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.ISub(πF, πTemp001, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ß_thead_depth, πTemp002); πE != nil {
								continue
							}
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_thead.ToObject(), πTemp192); πE != nil {
						continue
					}
					// line 3041: def visit_title(self, node):
					πF.SetLineno(3041)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp193 = πg.NewFunction(πg.NewCode("visit_title", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µclasses *πg.Object = πg.UnboundLocal
						_ = µclasses
						var µsection_name *πg.Object = πg.UnboundLocal
						_ = µsection_name
						var µsection_title *πg.Object = πg.UnboundLocal
						_ = µsection_title
						var µbookmark *πg.Object = πg.UnboundLocal
						_ = µbookmark
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πTemp006 []*πg.Object
						_ = πTemp006
						var πTemp007 *πg.Object
						_ = πTemp007
						var πTemp008 πg.KWArgs
						_ = πTemp008
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3042: """Append section and other titles."""
							πF.SetLineno(3042)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßtagname, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Eq(πF, πTemp003, ßdocument.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßtopic, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßadmonition, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp003
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsidebar, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp001 = πTemp003
						Label2:
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label3
							}
							πTemp005 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtable, nil); πE != nil {
								continue
							}
							πTemp005[1] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label4
							}
							goto Label5
							// line 3044: if node.parent.tagname == 'document':
							πF.SetLineno(3044)
						Label1:
							// line 3045: self.push_output_collector(self.title)
							πF.SetLineno(3045)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßtitle, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 3046: self.context.append('')
							πF.SetLineno(3046)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 3047: self.pdfinfo.append('  pdftitle={%s},' %
							πF.SetLineno(3047)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp006[0] = πTemp003
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("  pdftitle={%s},").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpdfinfo, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label6
							// line 3050: elif (isinstance(node.parent, nodes.topic) or
							πF.SetLineno(3050)
						Label3:
							// line 3053: self.fallbacks['title'] = PreambleCmds.title
							πF.SetLineno(3053)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtitle, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp007 = ßtitle.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp007, πTemp001); πE != nil {
								continue
							}
							// line 3054: classes = ','.join(node.parent['classes'])
							πF.SetLineno(3054)
							πTemp005 = πF.MakeArgs(1)
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, πTemp003, πTemp001); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πTemp001, πE = πg.GetAttr(πF, πg.NewStr(",").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µclasses = πTemp002
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, µclasses); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label7
							}
							goto Label8
							// line 3055: if not classes:
							πF.SetLineno(3055)
						Label7:
							// line 3056: classes = node.parent.tagname
							πF.SetLineno(3056)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtagname, nil); πE != nil {
								continue
							}
							µclasses = πTemp002
							goto Label8
						Label8:
							// line 3057: self.out.append('\n\\DUtitle[%s]{' % classes)
							πF.SetLineno(3057)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µclasses, "classes"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\n\\DUtitle[%s]{").ToObject(), µclasses); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 3058: self.context.append('}\n')
							πF.SetLineno(3058)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label6
							// line 3060: elif isinstance(node.parent, nodes.table):
							πF.SetLineno(3060)
						Label4:
							// line 3061: self.push_output_collector(self.active_table.caption)
							πF.SetLineno(3061)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßactive_table, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcaption, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 3062: self.context.append('')
							πF.SetLineno(3062)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = ß.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label6
						Label5:
							πTemp005 = πF.MakeArgs(2)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							πTemp005[1] = ßsecnumdepth.ToObject()
							if πTemp001, πE = πg.ResolveGlobal(πF, ßhasattr); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label9
							}
							goto Label10
							// line 3065: if hasattr(PreambleCmds, 'secnumdepth'):
							πF.SetLineno(3065)
						Label9:
							// line 3066: self.requirements['secnumdepth'] = PreambleCmds.secnumdepth
							πF.SetLineno(3066)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßsecnumdepth, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp007 = ßsecnumdepth.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp007, πTemp001); πE != nil {
								continue
							}
							goto Label10
						Label10:
							// line 3067: section_name = self.d_class.section(self.section_level)
							πF.SetLineno(3067)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßsection, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µsection_name = πTemp001
							// line 3068: self.out.append('\n\n')
							πF.SetLineno(3068)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\n\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, πTemp007, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, πTemp003, πg.NewStr("system-messages").ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label11
							}
							goto Label12
							// line 3070: if ('system-messages' in node.parent['classes']):
							πF.SetLineno(3070)
						Label11:
							// line 3071: self.requirements['color'] = PreambleCmds.color
							πF.SetLineno(3071)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßcolor, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp007 = ßcolor.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp007, πTemp001); πE != nil {
								continue
							}
							// line 3072: section_title = self.encode(node.astext())
							πF.SetLineno(3072)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							µsection_title = πTemp002
							// line 3073: self.out.append(r'\%s[%s]{\color{red}' % (
							πF.SetLineno(3073)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsection_name, "section_name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µsection_title, "section_title"); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple2(µsection_name, µsection_title).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\%s[%s]{\\color{red}").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label13
						Label12:
							// line 3076: self.out.append(r'\%s{' % section_name)
							πF.SetLineno(3076)
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsection_name, "section_name"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\%s{").ToObject(), µsection_name); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label13
						Label13:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp007, πE = πg.GetAttr(πF, πTemp003, ßsections, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp007
							if πTemp003, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp007, πE = πTemp003.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp001, πE = πg.GT(πF, πTemp002, πTemp007); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label14
							}
							goto Label15
							// line 3077: if self.section_level > len(self.d_class.sections):
							πF.SetLineno(3077)
						Label14:
							// line 3079: self.fallbacks['title'] = PreambleCmds.title
							πF.SetLineno(3079)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtitle, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp007 = ßtitle.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp007, πTemp001); πE != nil {
								continue
							}
							goto Label15
						Label15:
							// line 3082: bookmark = ['']
							πF.SetLineno(3082)
							πTemp005 = make([]*πg.Object, 1)
							πTemp005[0] = ß.ToObject()
							πTemp001 = πg.NewList(πTemp005...).ToObject()
							µbookmark = πTemp001
							// line 3088: bookmark += self.ids_to_labels(node.parent, set_anchor=False)
							πF.SetLineno(3088)
							if πE = πg.CheckLocal(πF, µbookmark, "bookmark"); πE != nil {
								continue
							}
							πTemp005 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							πTemp008 = πg.KWArgs{
								{"set_anchor", πTemp001},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp005, πTemp008); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							if πTemp001, πE = πg.IAdd(πF, µbookmark, πTemp002); πE != nil {
								continue
							}
							µbookmark = πTemp001
							// line 3089: self.context.append('%\n  '.join(bookmark) + '%\n}\n')
							πF.SetLineno(3089)
							πTemp005 = πF.MakeArgs(1)
							πTemp006 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µbookmark, "bookmark"); πE != nil {
								continue
							}
							πTemp006[0] = µbookmark
							if πTemp002, πE = πg.GetAttr(πF, πg.NewStr("%\n  ").ToObject(), ßjoin, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp006, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp006)
							if πTemp001, πE = πg.Add(πF, πTemp003, πg.NewStr("%\n}\n").ToObject()); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							goto Label6
						Label6:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_title.ToObject(), πTemp193); πE != nil {
						continue
					}
					// line 3042: """Append section and other titles."""
					πF.SetLineno(3042)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp194}, πg.NewStr("Append section and other titles.").ToObject()); πE != nil {
						continue
					}
					if πTemp195, πE = πg.ResolveClass(πF, πClass, nil, ßvisit_title); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp195, ß__doc__, πTemp194); πE != nil {
						continue
					}
					// line 3094: def depart_title(self, node):
					πF.SetLineno(3094)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp194 = πg.NewFunction(πg.NewCode("depart_title", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 *πg.Object
						_ = πTemp006
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3095: self.out.append(self.context.pop())
							πF.SetLineno(3095)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßcontext, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp003, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßtable, nil); πE != nil {
								continue
							}
							πTemp001[1] = πTemp005
							if πTemp003, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp005, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							πTemp002 = πTemp005
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µnode, ßparent, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.GetAttr(πF, πTemp005, ßtagname, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Eq(πF, πTemp006, ßdocument.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp003
						Label1:
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label2
							}
							goto Label3
							// line 3096: if (isinstance(node.parent, nodes.table) or
							πF.SetLineno(3096)
						Label2:
							// line 3098: self.pop_output_collector()
							πF.SetLineno(3098)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßpop_output_collector, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label3
						Label3:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_title.ToObject(), πTemp194); πE != nil {
						continue
					}
					// line 3100: def minitoc(self, node, title, depth):
					πF.SetLineno(3100)
					πTemp002 = make([]πg.Param, 4)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp002[2] = πg.Param{Name: "title", Def: nil}
					πTemp002[3] = πg.Param{Name: "depth", Def: nil}
					πTemp195 = πg.NewFunction(πg.NewCode("minitoc", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µtitle *πg.Object = πArgs[2]
						_ = µtitle
						var µdepth *πg.Object = πArgs[3]
						_ = µdepth
						var µsection_name *πg.Object = πg.UnboundLocal
						_ = µsection_name
						var µminitoc_names *πg.Object = πg.UnboundLocal
						_ = µminitoc_names
						var µminitoc_name *πg.Object = πg.UnboundLocal
						_ = µminitoc_name
						var µmaxdepth *πg.Object = πg.UnboundLocal
						_ = µmaxdepth
						var µoffset *πg.Object = πg.UnboundLocal
						_ = µoffset
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Dict
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 *πg.BaseException
						_ = πTemp007
						var πTemp008 *πg.Traceback
						_ = πTemp008
						var πTemp009 πg.KWArgs
						_ = πTemp009
						var πTemp010 *πg.Object
						_ = πTemp010
						var πTemp011 *πg.Object
						_ = πTemp011
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							case 4:
								goto Label4
							default:
								panic("unexpected function state")
							}
							// line 3101: """Generate a local table of contents with LaTeX package minitoc"""
							πF.SetLineno(3101)
							// line 3102: section_name = self.d_class.section(self.section_level)
							πF.SetLineno(3102)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsection, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µsection_name = πTemp002
							// line 3104: minitoc_names = {'part': 'part', 'chapter': 'mini'}
							πF.SetLineno(3104)
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, ßpart.ToObject(), ßpart.ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, ßchapter.ToObject(), ßmini.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp004.ToObject()
							µminitoc_names = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßsections, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp005, ßchapter.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(!πTemp006).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label1
							}
							goto Label2
							// line 3105: if 'chapter' not in self.d_class.sections:
							πF.SetLineno(3105)
						Label1:
							// line 3106: minitoc_names['section'] = 'sect'
							πF.SetLineno(3106)
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, ßsect.ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µminitoc_names, "minitoc_names"); πE != nil {
								continue
							}
							πTemp003 = ßsection.ToObject()
							if πE = πg.SetItem(πF, µminitoc_names, πTemp003, πTemp002); πE != nil {
								continue
							}
							goto Label2
						Label2:
							// line 3107: try:
							πF.SetLineno(3107)
							πF.PushCheckpoint(4)
							// line 3108: minitoc_name = minitoc_names[section_name]
							πF.SetLineno(3108)
							if πE = πg.CheckLocal(πF, µsection_name, "section_name"); πE != nil {
								continue
							}
							πTemp002 = µsection_name
							if πE = πg.CheckLocal(πF, µminitoc_names, "minitoc_names"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µminitoc_names, πTemp002); πE != nil {
								continue
							}
							µminitoc_name = πTemp003
							πF.PopCheckpoint()
							goto Label3
						Label4:
							if πE == nil {
								continue
							}
							πE = nil
							πTemp007, πTemp008 = πF.ExcInfo()
							if πTemp002, πE = πg.ResolveGlobal(πF, ßKeyError); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsInstance(πF, πTemp007.ToObject(), πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label5
							}
							πE = πF.Raise(πTemp007.ToObject(), nil, πTemp008.ToObject())
							continue
							// line 3109: except KeyError: # minitoc only supports part- and toplevel
							πF.SetLineno(3109)
						Label5:
							// line 3110: self.warn('Skipping local ToC at %s level.\n' % section_name +
							πF.SetLineno(3110)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µsection_name, "section_name"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Mod(πF, πg.NewStr("Skipping local ToC at %s level.\n").ToObject(), µsection_name); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πTemp003, πg.NewStr("  Feature not supported with option \"use-latex-toc\"").ToObject()); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp009 = πg.KWArgs{
								{"base_node", µnode},
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßwarn, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, πTemp009); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3113: return
							πF.SetLineno(3113)
							πR = πg.None
							continue
							πF.RestoreExc(nil, nil)
							goto Label3
						Label3:
							// line 3115: self.requirements['minitoc'] = PreambleCmds.minitoc
							πF.SetLineno(3115)
							if πTemp002, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßminitoc, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							πTemp010 = ßminitoc.ToObject()
							if πE = πg.SetItem(πF, πTemp005, πTemp010, πTemp002); πE != nil {
								continue
							}
							// line 3116: self.requirements['minitoc-'+minitoc_name] = (r'\do%stoc' %
							πF.SetLineno(3116)
							if πE = πg.CheckLocal(πF, µminitoc_name, "minitoc_name"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\do%stoc").ToObject(), µminitoc_name); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µminitoc_name, "minitoc_name"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.Add(πF, πg.NewStr("minitoc-").ToObject(), µminitoc_name); πE != nil {
								continue
							}
							πTemp010 = πTemp011
							if πE = πg.SetItem(πF, πTemp005, πTemp010, πTemp003); πE != nil {
								continue
							}
							// line 3119: maxdepth = len(self.d_class.sections)
							πF.SetLineno(3119)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßsections, nil); πE != nil {
								continue
							}
							πTemp001[0] = πTemp003
							if πTemp002, πE = πg.ResolveGlobal(πF, ßlen); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							µmaxdepth = πTemp003
							// line 3120: self.requirements['minitoc-%s-depth' % minitoc_name] = (
							πF.SetLineno(3120)
							if πE = πg.CheckLocal(πF, µminitoc_name, "minitoc_name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µmaxdepth, "maxdepth"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(µminitoc_name, µmaxdepth).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\mtcsetdepth{%stoc}{%d}").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßrequirements, nil); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µminitoc_name, "minitoc_name"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.Mod(πF, πg.NewStr("minitoc-%s-depth").ToObject(), µminitoc_name); πE != nil {
								continue
							}
							πTemp010 = πTemp011
							if πE = πg.SetItem(πF, πTemp005, πTemp010, πTemp003); πE != nil {
								continue
							}
							// line 3124: offset = {'sect': 1, 'mini': 0, 'part': 0}
							πF.SetLineno(3124)
							πTemp004 = πg.NewDict()
							if πE = πTemp004.SetItem(πF, ßsect.ToObject(), πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, ßmini.ToObject(), πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							if πE = πTemp004.SetItem(πF, ßpart.ToObject(), πg.NewInt(0).ToObject()); πE != nil {
								continue
							}
							πTemp002 = πTemp004.ToObject()
							µoffset = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßd_class, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp003, ßsections, nil); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp005, ßchapter.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp006).ToObject()
							if πTemp006, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label6
							}
							goto Label7
							// line 3125: if 'chapter' in self.d_class.sections:
							πF.SetLineno(3125)
						Label6:
							// line 3126: offset['part'] = -1
							πF.SetLineno(3126)
							if πTemp002, πE = πg.Neg(πF, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp003}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							πTemp005 = ßpart.ToObject()
							if πE = πg.SetItem(πF, µoffset, πTemp005, πTemp003); πE != nil {
								continue
							}
							goto Label7
						Label7:
							if πE = πg.CheckLocal(πF, µdepth, "depth"); πE != nil {
								continue
							}
							if πTemp006, πE = πg.IsTrue(πF, µdepth); πE != nil {
								continue
							}
							if πTemp006 {
								goto Label8
							}
							goto Label9
							// line 3127: if depth:
							πF.SetLineno(3127)
						Label8:
							// line 3128: self.out.append('\\setcounter{%stocdepth}{%d}' %
							πF.SetLineno(3128)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µminitoc_name, "minitoc_name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µdepth, "depth"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µminitoc_name, "minitoc_name"); πE != nil {
								continue
							}
							πTemp010 = µminitoc_name
							if πE = πg.CheckLocal(πF, µoffset, "offset"); πE != nil {
								continue
							}
							if πTemp011, πE = πg.GetItem(πF, µoffset, πTemp010); πE != nil {
								continue
							}
							if πTemp005, πE = πg.Add(πF, µdepth, πTemp011); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(µminitoc_name, πTemp005).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\setcounter{%stocdepth}{%d}").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							goto Label9
						Label9:
							// line 3131: self.out.append('\\mtcsettitle{%stoc}{%s}\n' % (minitoc_name, title))
							πF.SetLineno(3131)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µminitoc_name, "minitoc_name"); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							πTemp003 = πg.NewTuple2(µminitoc_name, µtitle).ToObject()
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\mtcsettitle{%stoc}{%s}\n").ToObject(), πTemp003); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3133: self.out.append('\\%stoc\n' % minitoc_name)
							πF.SetLineno(3133)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µminitoc_name, "minitoc_name"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("\\%stoc\n").ToObject(), µminitoc_name); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßappend, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp003.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßminitoc.ToObject(), πTemp195); πE != nil {
						continue
					}
					// line 3101: """Generate a local table of contents with LaTeX package minitoc"""
					πF.SetLineno(3101)
					if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp196}, πg.NewStr("Generate a local table of contents with LaTeX package minitoc").ToObject()); πE != nil {
						continue
					}
					if πTemp197, πE = πg.ResolveClass(πF, πClass, nil, ßminitoc); πE != nil {
						continue
					}
					if πE = πg.SetAttr(πF, πTemp197, ß__doc__, πTemp196); πE != nil {
						continue
					}
					// line 3135: def visit_topic(self, node):
					πF.SetLineno(3135)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp196 = πg.NewFunction(πg.NewCode("visit_topic", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var µtitle *πg.Object = πg.UnboundLocal
						_ = µtitle
						var µdepth *πg.Object = πg.UnboundLocal
						_ = µdepth
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 bool
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πTemp008 *πg.Object
						_ = πTemp008
						var πTemp009 *πg.Object
						_ = πTemp009
						var πTemp010 []*πg.Object
						_ = πTemp010
						var πTemp011 []*πg.Object
						_ = πTemp011
						var πTemp012 *πg.Object
						_ = πTemp012
						var πTemp013 *πg.Object
						_ = πTemp013
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, πTemp003, ßcontents.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label1
							}
							πTemp003 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp003); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp005, ßabstract.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp002
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp004 {
								goto Label2
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, πTemp002, ßuse_latex_abstract, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp003
						Label2:
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label3
							}
							goto Label4
							// line 3138: if 'contents' in node['classes']:
							πF.SetLineno(3138)
						Label1:
							// line 3139: self.out.append('\n')
							πF.SetLineno(3139)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 3140: self.out += self.ids_to_labels(node)
							πF.SetLineno(3140)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp007[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßids_to_labels, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp002, πE = πg.IAdd(πF, πTemp001, πTemp003); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßout, πTemp002); πE != nil {
								continue
							}
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßnext_node, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtitle, nil); πE != nil {
								continue
							}
							πTemp007[1] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label6
							}
							goto Label7
							// line 3142: if isinstance(node.next_node(), nodes.title):
							πF.SetLineno(3142)
						Label6:
							// line 3143: self.out.append('\n\\pdfbookmark[%d]{%s}{%s}' %
							πF.SetLineno(3143)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µself, ßsection_level, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Add(πF, πTemp005, πg.NewInt(1).ToObject()); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, µnode, ßnext_node, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetAttr(πF, πTemp008, ßastext, nil); πE != nil {
								continue
							}
							if πTemp008, πE = πTemp005.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp005 = πg.NewInt(0).ToObject()
							πTemp010 = πF.MakeArgs(2)
							πTemp010[0] = ßids.ToObject()
							πTemp011 = make([]*πg.Object, 1)
							πTemp011[0] = ßcontents.ToObject()
							πTemp012 = πg.NewList(πTemp011...).ToObject()
							πTemp010[1] = πTemp012
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp012, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp013, πE = πTemp012.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πTemp009, πE = πg.GetItem(πF, πTemp013, πTemp005); πE != nil {
								continue
							}
							πTemp002 = πg.NewTuple3(πTemp003, πTemp008, πTemp009).ToObject()
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\n\\pdfbookmark[%d]{%s}{%s}").ToObject(), πTemp002); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label7
						Label7:
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßuse_latex_toc, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label8
							}
							goto Label9
							// line 3148: if self.use_latex_toc:
							πF.SetLineno(3148)
						Label8:
							// line 3149: title = ''
							πF.SetLineno(3149)
							µtitle = ß.ToObject()
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßnext_node, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtitle, nil); πE != nil {
								continue
							}
							πTemp007[1] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label11
							}
							goto Label12
							// line 3150: if isinstance(node.next_node(), nodes.title):
							πF.SetLineno(3150)
						Label11:
							// line 3151: title = self.encode(node.pop(0).astext())
							πF.SetLineno(3151)
							πTemp007 = πF.MakeArgs(1)
							πTemp010 = πF.MakeArgs(1)
							πTemp010[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp010, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp010)
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßastext, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp002
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßencode, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µtitle = πTemp002
							goto Label12
						Label12:
							// line 3152: depth = node.get('depth', 0)
							πF.SetLineno(3152)
							πTemp007 = πF.MakeArgs(2)
							πTemp007[0] = ßdepth.ToObject()
							πTemp007[1] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßget, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							µdepth = πTemp002
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, πTemp003, ßlocal.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label13
							}
							goto Label14
							// line 3153: if 'local' in node['classes']:
							πF.SetLineno(3153)
						Label13:
							// line 3154: self.minitoc(node, title, depth)
							πF.SetLineno(3154)
							πTemp007 = πF.MakeArgs(3)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp007[0] = µnode
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							πTemp007[1] = µtitle
							if πE = πg.CheckLocal(πF, µdepth, "depth"); πE != nil {
								continue
							}
							πTemp007[2] = µdepth
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßminitoc, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 3155: return
							πF.SetLineno(3155)
							πR = πg.None
							continue
							goto Label14
						Label14:
							if πE = πg.CheckLocal(πF, µdepth, "depth"); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, µdepth); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label15
							}
							goto Label16
							// line 3156: if depth:
							πF.SetLineno(3156)
						Label15:
							// line 3157: self.out.append('\\setcounter{tocdepth}{%d}\n' % depth)
							πF.SetLineno(3157)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µdepth, "depth"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\\setcounter{tocdepth}{%d}\n").ToObject(), µdepth); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label16
						Label16:
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.NE(πF, µtitle, ßContents.ToObject()); πE != nil {
								continue
							}
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label17
							}
							goto Label18
							// line 3158: if title != 'Contents':
							πF.SetLineno(3158)
						Label17:
							// line 3159: self.out.append('\n\\renewcommand{\\contentsname}{%s}' %
							πF.SetLineno(3159)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µtitle, "title"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Mod(πF, πg.NewStr("\n\\renewcommand{\\contentsname}{%s}").ToObject(), µtitle); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label18
						Label18:
							// line 3161: self.out.append('\n\\tableofcontents\n')
							πF.SetLineno(3161)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("\n\\tableofcontents\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 3162: self.has_latex_toc = True
							πF.SetLineno(3162)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßhas_latex_toc, πTemp002); πE != nil {
								continue
							}
							goto Label10
						Label9:
							// line 3165: self.is_toc_list = True
							πF.SetLineno(3165)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßTrue); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßis_toc_list, πTemp002); πE != nil {
								continue
							}
							goto Label10
						Label10:
							goto Label5
							// line 3166: elif ('abstract' in node['classes'] and
							πF.SetLineno(3166)
						Label3:
							// line 3168: self.push_output_collector(self.abstract)
							πF.SetLineno(3168)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßabstract, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							// line 3169: self.out.append('\\begin{abstract}')
							πF.SetLineno(3169)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("\\begin{abstract}").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							πTemp007 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßnext_node, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßnodes); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtitle, nil); πE != nil {
								continue
							}
							πTemp007[1] = πTemp002
							if πTemp001, πE = πg.ResolveGlobal(πF, ßisinstance); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							if πTemp004, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label19
							}
							goto Label20
							// line 3170: if isinstance(node.next_node(), nodes.title):
							πF.SetLineno(3170)
						Label19:
							// line 3171: node.pop(0) # LaTeX provides its own title
							πF.SetLineno(3171)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewInt(0).ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µnode, ßpop, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label20
						Label20:
							goto Label5
						Label4:
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, πTemp003, ßabstract.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label21
							}
							πTemp002 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetItem(πF, µnode, πTemp002); πE != nil {
								continue
							}
							if πTemp004, πE = πg.Contains(πF, πTemp003, ßdedication.ToObject()); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(πTemp004).ToObject()
							if πTemp004, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp004 {
								goto Label22
							}
							goto Label23
							// line 3174: if 'abstract' in node['classes']:
							πF.SetLineno(3174)
						Label21:
							// line 3175: self.fallbacks['abstract'] = PreambleCmds.abstract
							πF.SetLineno(3175)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßabstract, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp005 = ßabstract.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp005, πTemp001); πE != nil {
								continue
							}
							// line 3176: self.push_output_collector(self.abstract)
							πF.SetLineno(3176)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßabstract, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label24
							// line 3177: elif 'dedication' in node['classes']:
							πF.SetLineno(3177)
						Label22:
							// line 3178: self.fallbacks['dedication'] = PreambleCmds.dedication
							πF.SetLineno(3178)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßdedication, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp005 = ßdedication.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp005, πTemp001); πE != nil {
								continue
							}
							// line 3179: self.push_output_collector(self.dedication)
							πF.SetLineno(3179)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdedication, nil); πE != nil {
								continue
							}
							πTemp007[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpush_output_collector, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label24
						Label23:
							// line 3181: node['classes'].insert(0, 'topic')
							πF.SetLineno(3181)
							πTemp007 = πF.MakeArgs(2)
							πTemp007[0] = πg.NewInt(0).ToObject()
							πTemp007[1] = ßtopic.ToObject()
							πTemp001 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetItem(πF, µnode, πTemp001); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, πTemp002, ßinsert, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label24
						Label24:
							// line 3182: self.visit_block_quote(node)
							πF.SetLineno(3182)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp007[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßvisit_block_quote, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label5
						Label5:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_topic.ToObject(), πTemp196); πE != nil {
						continue
					}
					// line 3184: def depart_topic(self, node):
					πF.SetLineno(3184)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp197 = πg.NewFunction(πg.NewCode("depart_topic", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 bool
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 *πg.Object
						_ = πTemp005
						var πTemp006 bool
						_ = πTemp006
						var πTemp007 []*πg.Object
						_ = πTemp007
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3185: self.is_toc_list = False
							πF.SetLineno(3185)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßFalse); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp002}, πTemp001); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πE = πg.SetAttr(πF, µself, ßis_toc_list, πTemp002); πE != nil {
								continue
							}
							πTemp004 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp005, ßabstract.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp002
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if !πTemp003 {
								goto Label1
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßsettings, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp002, ßuse_latex_abstract, nil); πE != nil {
								continue
							}
							πTemp001 = πTemp004
						Label1:
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label2
							}
							πTemp004 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							if πTemp003, πE = πg.Contains(πF, πTemp005, ßcontents.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp002); πE != nil {
								continue
							}
							πTemp001 = πg.GetBool(!πTemp003).ToObject()
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label3
							}
							goto Label4
							// line 3186: if ('abstract' in node['classes']
							πF.SetLineno(3186)
						Label2:
							// line 3188: self.out.append('\\end{abstract}\n')
							πF.SetLineno(3188)
							πTemp007 = πF.MakeArgs(1)
							πTemp007[0] = πg.NewStr("\\end{abstract}\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label4
							// line 3189: elif not 'contents' in node['classes']:
							πF.SetLineno(3189)
						Label3:
							// line 3190: self.depart_block_quote(node)
							πF.SetLineno(3190)
							πTemp007 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp007[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßdepart_block_quote, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, πTemp007, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp007)
							goto Label4
						Label4:
							πTemp004 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp005, ßabstract.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp002
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label5
							}
							πTemp004 = ßclasses.ToObject()
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp005, πE = πg.GetItem(πF, µnode, πTemp004); πE != nil {
								continue
							}
							if πTemp006, πE = πg.Contains(πF, πTemp005, ßdedication.ToObject()); πE != nil {
								continue
							}
							πTemp002 = πg.GetBool(πTemp006).ToObject()
							πTemp001 = πTemp002
						Label5:
							if πTemp003, πE = πg.IsTrue(πF, πTemp001); πE != nil {
								continue
							}
							if πTemp003 {
								goto Label6
							}
							goto Label7
							// line 3191: if ('abstract' in node['classes'] or
							πF.SetLineno(3191)
						Label6:
							// line 3193: self.pop_output_collector()
							πF.SetLineno(3193)
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßpop_output_collector, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πTemp001.Call(πF, nil, nil); πE != nil {
								continue
							}
							goto Label7
						Label7:
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_topic.ToObject(), πTemp197); πE != nil {
						continue
					}
					// line 3195: def visit_transition(self, node):
					πF.SetLineno(3195)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp198 = πg.NewFunction(πg.NewCode("visit_transition", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 *πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πTemp005 []*πg.Object
						_ = πTemp005
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3196: self.fallbacks['transition'] = PreambleCmds.transition
							πF.SetLineno(3196)
							if πTemp001, πE = πg.ResolveGlobal(πF, ßPreambleCmds); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßtransition, nil); πE != nil {
								continue
							}
							if πE = πg.Tie(πF, πg.TieTarget{Target: &πTemp001}, πTemp002); πE != nil {
								continue
							}
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µself, ßfallbacks, nil); πE != nil {
								continue
							}
							πTemp004 = ßtransition.ToObject()
							if πE = πg.SetItem(πF, πTemp003, πTemp004, πTemp001); πE != nil {
								continue
							}
							// line 3197: self.out.append('\n%' + '_' * 75 + '\n')
							πF.SetLineno(3197)
							πTemp005 = πF.MakeArgs(1)
							if πTemp003, πE = πg.Mul(πF, ß_.ToObject(), πg.NewInt(75).ToObject()); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Add(πF, πg.NewStr("\n%").ToObject(), πTemp003); πE != nil {
								continue
							}
							if πTemp001, πE = πg.Add(πF, πTemp002, πg.NewStr("\n").ToObject()); πE != nil {
								continue
							}
							πTemp005[0] = πTemp001
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
							// line 3198: self.out.append('\\DUtransition\n')
							πF.SetLineno(3198)
							πTemp005 = πF.MakeArgs(1)
							πTemp005[0] = πg.NewStr("\\DUtransition\n").ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp001, πE = πg.GetAttr(πF, µself, ßout, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, πTemp001, ßappend, nil); πE != nil {
								continue
							}
							if πTemp001, πE = πTemp002.Call(πF, πTemp005, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp005)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_transition.ToObject(), πTemp198); πE != nil {
						continue
					}
					// line 3200: def depart_transition(self, node):
					πF.SetLineno(3200)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp199 = πg.NewFunction(πg.NewCode("depart_transition", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3201: pass
							πF.SetLineno(3201)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_transition.ToObject(), πTemp199); πE != nil {
						continue
					}
					// line 3203: def visit_version(self, node):
					πF.SetLineno(3203)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp200 = πg.NewFunction(πg.NewCode("visit_version", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3204: self.visit_docinfo_item(node, 'version')
							πF.SetLineno(3204)
							πTemp001 = πF.MakeArgs(2)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							πTemp001[1] = ßversion.ToObject()
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßvisit_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßvisit_version.ToObject(), πTemp200); πE != nil {
						continue
					}
					// line 3206: def depart_version(self, node):
					πF.SetLineno(3206)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp201 = πg.NewFunction(πg.NewCode("depart_version", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							// line 3207: self.depart_docinfo_item(node)
							πF.SetLineno(3207)
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							πTemp001[0] = µnode
							if πE = πg.CheckLocal(πF, µself, "self"); πE != nil {
								continue
							}
							if πTemp002, πE = πg.GetAttr(πF, µself, ßdepart_docinfo_item, nil); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßdepart_version.ToObject(), πTemp201); πE != nil {
						continue
					}
					// line 3209: def unimplemented_visit(self, node):
					πF.SetLineno(3209)
					πTemp002 = make([]πg.Param, 2)
					πTemp002[0] = πg.Param{Name: "self", Def: nil}
					πTemp002[1] = πg.Param{Name: "node", Def: nil}
					πTemp202 = πg.NewFunction(πg.NewCode("unimplemented_visit", "/usr/lib/python2.7/site-packages/docutils/writers/latex2e/__init__.py", πTemp002, 0, func(πF *πg.Frame, πArgs []*πg.Object) (*πg.Object, *πg.BaseException) {
						var µself *πg.Object = πArgs[0]
						_ = µself
						var µnode *πg.Object = πArgs[1]
						_ = µnode
						var πTemp001 []*πg.Object
						_ = πTemp001
						var πTemp002 *πg.Object
						_ = πTemp002
						var πTemp003 *πg.Object
						_ = πTemp003
						var πTemp004 *πg.Object
						_ = πTemp004
						var πR *πg.Object
						_ = πR
						var πE *πg.BaseException
						_ = πE
						for ; πF.State() >= 0; πF.PopCheckpoint() {
							switch πF.State() {
							case 0:
							default:
								panic("unexpected function state")
							}
							πTemp001 = πF.MakeArgs(1)
							if πE = πg.CheckLocal(πF, µnode, "node"); πE != nil {
								continue
							}
							if πTemp003, πE = πg.GetAttr(πF, µnode, ß__class__, nil); πE != nil {
								continue
							}
							if πTemp004, πE = πg.GetAttr(πF, πTemp003, ß__name__, nil); πE != nil {
								continue
							}
							if πTemp002, πE = πg.Mod(πF, πg.NewStr("visiting unimplemented node type: %s").ToObject(), πTemp004); πE != nil {
								continue
							}
							πTemp001[0] = πTemp002
							if πTemp002, πE = πg.ResolveGlobal(πF, ßNotImplementedError); πE != nil {
								continue
							}
							if πTemp003, πE = πTemp002.Call(πF, πTemp001, nil); πE != nil {
								continue
							}
							πF.FreeArgs(πTemp001)
							// line 3210: raise NotImplementedError('visiting unimplemented node type: %s' %
							πF.SetLineno(3210)
							πE = πF.Raise(πTemp003, nil, nil)
							continue
						}
						if πE != nil {
							πR = nil
						} else if πR == nil {
							πR = πg.None
						}
						return πR, πE
					}), πF.Globals()).ToObject()
					if πE = πClass.SetItem(πF, ßunimplemented_visit.ToObject(), πTemp202); πE != nil {
						continue
					}
				}
				return nil, nil
			}).Eval(πF, πF.Globals(), nil, nil)
			if πE != nil {
				continue
			}
			if πTemp006, πE = πTemp008.GetItem(πF, ß__metaclass__.ToObject()); πE != nil {
				continue
			}
			if πTemp006 == nil {
				πTemp006 = πg.TypeType.ToObject()
			}
			if πTemp007, πE = πTemp006.Call(πF, []*πg.Object{πg.NewStr("LaTeXTranslator").ToObject(), πg.NewTuple(πTemp002...).ToObject(), πTemp008.ToObject()}, nil); πE != nil {
				continue
			}
			if πE = πF.Globals().SetItem(πF, ßLaTeXTranslator.ToObject(), πTemp007); πE != nil {
				continue
			}
		}
		return nil, πE
	})
	πg.RegisterModule("latex2e", Code)
}
